<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/2025/06/09/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2025/06/09/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="命令执行常见函数："><a href="#命令执行常见函数：" class="headerlink" title="命令执行常见函数："></a>命令执行常见函数：</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span>    <span class="hljs-comment">// 执行外部程序并显示输出</span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">()</span></span>      <span class="hljs-comment">// 执行外部程序</span><br><span class="hljs-function"><span class="hljs-title">passthru</span><span class="hljs-params">()</span></span>  <span class="hljs-comment">// 执行外部程序并显示原始输出</span><br><span class="hljs-function"><span class="hljs-title">shell_exec</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 通过shell执行命令</span><br>`` ``<br>(反引号)    <span class="hljs-comment">// 执行shell命令</span><br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span>     <span class="hljs-comment">// 打开进程文件指针</span><br><span class="hljs-function"><span class="hljs-title">proc_open</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 执行命令并打开文件指针</span><br></code></pre></td></tr></table></figure><h2 id="常用连接符："><a href="#常用连接符：" class="headerlink" title="常用连接符："></a>常用连接符：</h2><pre><code class="hljs">; 顺序执行多条命令(Unix)&amp; 后台执行&amp;&amp; 前一条成功才执行后一条| 管道符|| 前一条失败才执行后一条\n(换行符) 也可作为命令分隔符</code></pre><h3 id="管道符："><a href="#管道符：" class="headerlink" title="管道符："></a>管道符：</h3><p>在命令注入攻击中，管道符可以：</p><p><strong>串联多个命令</strong>：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http://example.<span class="hljs-keyword">com</span>/vuln.php?<span class="hljs-built_in">input</span>=<span class="hljs-keyword">file</span>.txt|whoami<br></code></pre></td></tr></table></figure><p>尝试执行<code>file.txt</code>后接着执行<code>whoami</code></p><p><strong>过滤或处理输出</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.com/vuln.php?input=<span class="hljs-built_in">ls</span>|<span class="hljs-built_in">base64</span><br></code></pre></td></tr></table></figure><p>将<code>ls</code>命令的输出进行base64编码</p><h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(isset($_GET[<span class="hljs-string">&#x27;c&#x27;</span>])</span></span>)&#123;<br></code></pre></td></tr></table></figure><p> 检查 HTTP 请求中是否包含名为 c 的参数。如果存在，执行后续代码；否则，跳到 else 语句。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$c = $_GET[<span class="hljs-string">&#x27;c&#x27;</span>]<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><p>获取 HTTP 请求中的 c 参数并将其赋值给变量 $c。 （此处的$c不一定是c，只是更好理解罢了）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(!preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>)</span></span>)&#123; <br></code></pre></td></tr></table></figure><p>使用 preg_match() 函数对 $c 变量进行正则匹配。这个正则表达式检查 $c 中是否包含不区分大小写的字符串 “flag”。如果 $c 中不包含 “flag”，则继续执行后续代码。</p><p>eval($c); 使用 eval() 函数执行 $c 变量中的代码。eval() 会将 $c 中的字符串作为 PHP 代码执行，这可能导致执行任意 PHP 代码，从而形成安全漏洞。</p><p>} 结束 if(!preg_match(“&#x2F;flag&#x2F;i”, $c)) 语句的判断。</p><p>}else{ 如果 $_GET[‘c’] 不存在（即 c 参数没有传递），则执行以下代码。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">highlight_file</span>(FILE); <br></code></pre></td></tr></table></figure><p>highlight_file() 函数将当前 PHP 文件的源代码高亮显示。FILE 是一个常量，它表示当前脚本的文件路径。这意味着如果没有 c 参数，脚本将显示自身的源代码。</p><p>} 结束else语句块</p><p>当程序执行到 system(‘ls’) 时，会调用系统的 Shell（如 Bash），运行 ls 命令，列出当前目录下的文件和文件夹（相当于在终端直接输入 ls）。</p><p>得到</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">flag.php <span class="hljs-keyword">index</span>.php<br></code></pre></td></tr></table></figure><h4 id="cat：正序，查看-合并文件"><a href="#cat：正序，查看-合并文件" class="headerlink" title="cat：正序，查看&#x2F;合并文件"></a>cat：正序，查看&#x2F;合并文件</h4><h4 id="tac：倒序，查看日志时，优先显示最新行"><a href="#tac：倒序，查看日志时，优先显示最新行" class="headerlink" title="tac：倒序，查看日志时，优先显示最新行"></a>tac：倒序，查看日志时，优先显示最新行</h4><p>本题flag被ban，用通配符*，访问?c&#x3D;system(‘tac fla*.php’);得到flag，访问?c&#x3D;system(‘cat fla*.php’);无显示，查看源代码得到flag</p><p><strong>tac</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">flag = <span class="hljs-string">&#x27;ctfshow&#123;7b9e92b8-e4c5-4478-a9eb-e4a8862691a5&#125;&#x27;</span>;</span><br><br>*/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@<span class="hljs-built_in">link</span>: https://ctfer.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@email: h1xa@ctfer.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Last Modified <span class="hljs-keyword">time</span>: 2020-09-04 00:14:17</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Last Modified by:   h1xa</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Date:   2020-09-04 00:14:07</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">@Author: h1xa</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-*- coding: utf-8 -*-</span><br>/*<br><br>&lt;?php<br><br></code></pre></td></tr></table></figure><p>输出顺序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;/html&gt;       <span class="hljs-comment">// 浏览器认为文档已结束</span><br>...<br>&lt;html&gt;        <span class="hljs-comment">// 被当作普通文本</span><br><span class="hljs-meta">&lt;?php</span> ... <span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">// 全部当作文本显示</span><br></code></pre></td></tr></table></figure><p>→ Flag直接可见</p><p><strong>cat</strong>（源代码）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:14:07</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 00:14:17</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;ctfshow&#123;c78ff3fc-09d6-4aa0-9b59-689b0eefebd3&#125;&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>输出顺序：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span> ... <span class="hljs-meta">?&gt;</span></span><span class="language-xml">  // PHP引擎执行，可能抑制输出</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>        // 浏览器开始解析</span><br><span class="language-xml">...</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- flag --&gt;</span> // 可能被隐藏</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2025/06/08/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2025/06/08/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="文件包含函数-php"><a href="#文件包含函数-php" class="headerlink" title="文件包含函数(php):"></a>文件包含函数(php):</h2><p><strong>include($file)</strong>:包含文件，出错时仅报警告（E_WARNING），程序继续执行。</p><p><strong>require($file)</strong>:包含文件，出错时报致命错误（E_COMPILE_ERROR），程序终止。</p><p><strong>include_once($file)</strong>:与 include 类似，但会先检查文件是否已被包含，避免重复包含。</p><p><strong>require_once($file)</strong>:与 require 类似，但会先检查文件是否已被包含，避免重复包含。</p><p><strong>file_get_contents($file)</strong>:读取整个文件内容到字符串，可配合 allow_url_fopen 读取远程文件。</p><h2 id="动态执行函数"><a href="#动态执行函数" class="headerlink" title="动态执行函数:"></a>动态执行函数:</h2><p><strong>eval($code)</strong>:执行字符串形式的 PHP 代码（如 eval(“echo ‘hello’;”);）。</p><p><strong>system($cmd)</strong>:执行系统命令并输出结果（如 system(“ls -l”);）。</p><p><strong>exec($cmd)</strong>:执行系统命令并返回结果的最后一行（如 exec(“whoami”);）。</p><p><strong>shell_exec($cmd)</strong>:通过 shell 执行命令，返回完整输出（如 <code>ls -l</code> 或 shell_exec(“ls”);）。</p><h2 id="本地文件包含漏洞（LFI-Local-File-Inclusion）"><a href="#本地文件包含漏洞（LFI-Local-File-Inclusion）" class="headerlink" title="本地文件包含漏洞（LFI, Local File Inclusion）"></a>本地文件包含漏洞（LFI, Local File Inclusion）</h2><h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1.&#x2F;?file&#x3D;..&#x2F;..&#x2F;flag.php 报错的原因:</strong></p><p> <em><strong>Warning</strong>:  include(&#x2F;…&#x2F;www&#x2F;html&#x2F;index.php): failed to open stream: No such file or directory in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</strong> on line <strong>17</strong></em></p><p> <em><strong>Warning</strong>:  include(): Failed opening ‘&#x2F;…&#x2F;www&#x2F;html&#x2F;index.php’ for inclusion (include_path&#x3D;’.:&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php’) in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</strong> on line <strong>17</strong></em></p><p><strong>路径问题</strong>：..&#x2F;..&#x2F;flag.php 是相对路径，表示”向上两级目录中的flag.php”</p><p><strong>安全机制</strong>：PHP的 open_basedir 限制会阻止访问系统文件（常见于CTF环境）</p><p><strong>路径转换</strong>：PHP将相对路径转为绝对路径时，超出允许范围的路径会被替换为 &#x2F;…&#x2F;（安全占位符）</p><p><strong>根本原因</strong>：实际路径可能是 &#x2F;var&#x2F;www&#x2F;..&#x2F;..&#x2F;flag.php → 解析为 &#x2F;flag.php（根目录），而服务器禁止访问根目录</p><p><strong>关键点</strong>：这不是文件不存在，而是路径被安全机制拦截</p><p><strong>2.&#x2F;?file&#x3D;flag.php 显示空白的原因:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// flag.php 实际内容</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;ctfshow&#123;...&#125;&quot;</span>;  <span class="hljs-comment">// 没有输出语句！</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>include机制</strong>：当包含 .php 文件时，PHP会执行其中的代码，而非显示源码</p><p><strong>执行而非读取</strong>：</p><p>​    include(“flag.php”) 会执行 $flag&#x3D;”…” 的赋值操作</p><p>​    但该文件没有 echo&#x2F;print 语句 → 无任何输出</p><p>​    赋值操作在内存中完成，浏览器不可见</p><p><strong>空白页面</strong> &#x3D; 包含成功 + 文件无输出内容</p><p><strong>3.?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php成功的原因：</strong></p><p><strong>绕过执行</strong>：</p><p>​    php:&#x2F;&#x2F;filter 将文件视为数据流而非代码</p><p>​    resource&#x3D;flag.php 指定读取目标文件</p><p><strong>编码转换</strong>：</p><p>​    convert.base64-encode 对文件内容进行Base64编码</p><p>​    将二进制数据转为纯ASCII字符（A-Z a-z 0-9 +&#x3D;）</p><p><strong>安全输出</strong>：</p><p>​    编码后的内容不包含 <?php ?> 等标签</p><p>​    PHP引擎将其视为普通文本而非代码 → 直接输出到页面</p><p><strong>最终结果</strong>：</p><p>​    页面显示Base64编码的源码：PD9waHAgJGZsYWc9ImN0ZnNob3d7…</p><p>​    解码后得到原始代码</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shell</title>
    <link href="/2025/06/06/shell/"/>
    <url>/2025/06/06/shell/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>信息搜集</title>
    <link href="/2025/06/04/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2025/06/04/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>网站根目录下存在robots.txt文件，其内容规定了网络爬虫可爬和不可爬的目录文件。</p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p><strong>phps文件</strong>就是php的源代码文件，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。</p><p>因为用户无法直接通过Web浏览器“看到”php文件的内容，所以需要用phps文件代替。直接访问&#x2F;index.phps即可获得php</p><h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>www源码泄露</p><p>访问url&#x2F;<a href="http://www.zip,通过其源码泄露,发现index.php文件/">www.zip，通过其源码泄露，发现index.php文件</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-01 14:37:13</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-01 14:42:44</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//flag in fl000g.txt</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;web6:where is flag?&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>fl000g.txt里显示flag{flag_here}，尝试直接url&#x2F;fl000g.txt，得到flag</p><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><blockquote><p>版本控制很重要，但不要部署到生产环境更重要。</p></blockquote><p>开发人员在开发时，常常会先把源码提交到远程托管网站（如github），最后再从远程托管网站把源码pull到服务器的web目录下，如果忘记把.git文件删除，就造成此漏洞。利用.git文件恢复网站的源码，而源码里可能会有数据库的信息。<br>当前大量开发人员使用git进行版本控制，对站点自动部署。 如果配置不当，可能会将.git文件夹直接部署到线上环境，这就引起了git泄露漏洞。</p><p>尝试&#x2F;.git得到flag</p><h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p>主流的版本控制器有git和svn，访问&#x2F;.svn得到flag</p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><blockquote><p>发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</p></blockquote><p>在Linux生产环境上使用vim或者vi做修改时，会生成一个swp为后缀的文件.</p><ul><li>第一次意外退出生成的是.swp</li><li>第二次意外退出生成的是.swo</li><li>第三次为.swn</li></ul><p>访问&#x2F;index.php.swp获得带有flag的文件</p><h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><blockquote><p>有时候网站上的公开信息，就是管理员常用密码</p></blockquote><p>访问&#x2F;admin，弹出登陆界面，账号用admin，密码从网站里找</p><h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><blockquote><p>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</p></blockquote><p>访问&#x2F;editor，是文件上传界面，点击文件空间，从var&#x2F;www&#x2F;html找到nothinghere，点进去是fl000g.txt，访问&#x2F;nothinghere&#x2F;fl000g.txt得到flag</p><h2 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h2><blockquote><p>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p></blockquote><p>登录界面找回密保问题，通过文章里的qq邮箱得到居住地，成功找回密码。</p><h2 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h2><blockquote><p>对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p></blockquote><p>访问tz.php找到flag</p><h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><blockquote><p>备份的sql文件会泄露敏感信息</p></blockquote><p>扫到backup.sql得到flag</p><h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><blockquote><p>玩101分给你flag</p></blockquote><p>找到js文件，看见大于100分输出的字符串，解码获得flag</p><h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><p>mdb文件从txt打开，虽然是乱码也可以搜到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/06/02/%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/06/02/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="无过滤注入"><a href="#无过滤注入" class="headerlink" title="无过滤注入"></a>无过滤注入</h1><h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p><img src="/images/web171.jpg"></p><ol><li><strong>闭合单引号</strong>：通过输入<code>&#39;</code>闭合id参数的单引号。</li><li><strong>注入UNION查询</strong>：使用<code>UNION SELECT</code>获取其他数据，确保列数与原查询一致。</li><li><strong>绕过原查询条件</strong>：直接查询username为’flag’的记录，因为UNION后的SELECT不受原查询的<code>username != &#39;flag&#39;</code>限制。</li><li><strong>注释剩余部分</strong>：使用<code>--</code>注释掉原SQL的剩余部分，避免语法错误。</li></ol><p>观察到有三列，两种解发均可，后者会带出id&#x3D;1的那一行，没啥作用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; union select username,password,1 from ctfshow_user where username=&#x27;</span>flag<span class="hljs-string">&#x27; -- </span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> username,password,<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p> <strong>注释符的区别</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/05/29/hello-world/"/>
    <url>/2025/05/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
